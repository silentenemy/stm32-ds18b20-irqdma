
thermometer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000083a0  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000b8c  080084b0  080084b0  000184b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800903c  0800903c  000201e8  2**0
                  CONTENTS
  4 .ARM          00000000  0800903c  0800903c  000201e8  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800903c  0800903c  000201e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800903c  0800903c  0001903c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009040  08009040  00019040  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e8  20000000  08009044  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000430  200001e8  0800922c  000201e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000618  0800922c  00020618  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000fb92  00000000  00000000  00020211  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000026ee  00000000  00000000  0002fda3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010d0  00000000  00000000  00032498  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ff8  00000000  00000000  00033568  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00003c61  00000000  00000000  00034560  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001295b  00000000  00000000  000381c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008f08d  00000000  00000000  0004ab1c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d9ba9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000058ec  00000000  00000000  000d9bfc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001e8 	.word	0x200001e8
 800012c:	00000000 	.word	0x00000000
 8000130:	08008498 	.word	0x08008498

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001ec 	.word	0x200001ec
 800014c:	08008498 	.word	0x08008498

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_frsub>:
 8000a88:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000a8c:	e002      	b.n	8000a94 <__addsf3>
 8000a8e:	bf00      	nop

08000a90 <__aeabi_fsub>:
 8000a90:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000a94 <__addsf3>:
 8000a94:	0042      	lsls	r2, r0, #1
 8000a96:	bf1f      	itttt	ne
 8000a98:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000a9c:	ea92 0f03 	teqne	r2, r3
 8000aa0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000aa4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000aa8:	d06a      	beq.n	8000b80 <__addsf3+0xec>
 8000aaa:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000aae:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000ab2:	bfc1      	itttt	gt
 8000ab4:	18d2      	addgt	r2, r2, r3
 8000ab6:	4041      	eorgt	r1, r0
 8000ab8:	4048      	eorgt	r0, r1
 8000aba:	4041      	eorgt	r1, r0
 8000abc:	bfb8      	it	lt
 8000abe:	425b      	neglt	r3, r3
 8000ac0:	2b19      	cmp	r3, #25
 8000ac2:	bf88      	it	hi
 8000ac4:	4770      	bxhi	lr
 8000ac6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000aca:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ace:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000ad2:	bf18      	it	ne
 8000ad4:	4240      	negne	r0, r0
 8000ad6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ada:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000ade:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000ae2:	bf18      	it	ne
 8000ae4:	4249      	negne	r1, r1
 8000ae6:	ea92 0f03 	teq	r2, r3
 8000aea:	d03f      	beq.n	8000b6c <__addsf3+0xd8>
 8000aec:	f1a2 0201 	sub.w	r2, r2, #1
 8000af0:	fa41 fc03 	asr.w	ip, r1, r3
 8000af4:	eb10 000c 	adds.w	r0, r0, ip
 8000af8:	f1c3 0320 	rsb	r3, r3, #32
 8000afc:	fa01 f103 	lsl.w	r1, r1, r3
 8000b00:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b04:	d502      	bpl.n	8000b0c <__addsf3+0x78>
 8000b06:	4249      	negs	r1, r1
 8000b08:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b0c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000b10:	d313      	bcc.n	8000b3a <__addsf3+0xa6>
 8000b12:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b16:	d306      	bcc.n	8000b26 <__addsf3+0x92>
 8000b18:	0840      	lsrs	r0, r0, #1
 8000b1a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b1e:	f102 0201 	add.w	r2, r2, #1
 8000b22:	2afe      	cmp	r2, #254	; 0xfe
 8000b24:	d251      	bcs.n	8000bca <__addsf3+0x136>
 8000b26:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000b2a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b2e:	bf08      	it	eq
 8000b30:	f020 0001 	biceq.w	r0, r0, #1
 8000b34:	ea40 0003 	orr.w	r0, r0, r3
 8000b38:	4770      	bx	lr
 8000b3a:	0049      	lsls	r1, r1, #1
 8000b3c:	eb40 0000 	adc.w	r0, r0, r0
 8000b40:	3a01      	subs	r2, #1
 8000b42:	bf28      	it	cs
 8000b44:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000b48:	d2ed      	bcs.n	8000b26 <__addsf3+0x92>
 8000b4a:	fab0 fc80 	clz	ip, r0
 8000b4e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b52:	ebb2 020c 	subs.w	r2, r2, ip
 8000b56:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b5a:	bfaa      	itet	ge
 8000b5c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000b60:	4252      	neglt	r2, r2
 8000b62:	4318      	orrge	r0, r3
 8000b64:	bfbc      	itt	lt
 8000b66:	40d0      	lsrlt	r0, r2
 8000b68:	4318      	orrlt	r0, r3
 8000b6a:	4770      	bx	lr
 8000b6c:	f092 0f00 	teq	r2, #0
 8000b70:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000b74:	bf06      	itte	eq
 8000b76:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000b7a:	3201      	addeq	r2, #1
 8000b7c:	3b01      	subne	r3, #1
 8000b7e:	e7b5      	b.n	8000aec <__addsf3+0x58>
 8000b80:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b84:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b88:	bf18      	it	ne
 8000b8a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b8e:	d021      	beq.n	8000bd4 <__addsf3+0x140>
 8000b90:	ea92 0f03 	teq	r2, r3
 8000b94:	d004      	beq.n	8000ba0 <__addsf3+0x10c>
 8000b96:	f092 0f00 	teq	r2, #0
 8000b9a:	bf08      	it	eq
 8000b9c:	4608      	moveq	r0, r1
 8000b9e:	4770      	bx	lr
 8000ba0:	ea90 0f01 	teq	r0, r1
 8000ba4:	bf1c      	itt	ne
 8000ba6:	2000      	movne	r0, #0
 8000ba8:	4770      	bxne	lr
 8000baa:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000bae:	d104      	bne.n	8000bba <__addsf3+0x126>
 8000bb0:	0040      	lsls	r0, r0, #1
 8000bb2:	bf28      	it	cs
 8000bb4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000bb8:	4770      	bx	lr
 8000bba:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000bbe:	bf3c      	itt	cc
 8000bc0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000bc4:	4770      	bxcc	lr
 8000bc6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000bca:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000bce:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bd2:	4770      	bx	lr
 8000bd4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000bd8:	bf16      	itet	ne
 8000bda:	4608      	movne	r0, r1
 8000bdc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000be0:	4601      	movne	r1, r0
 8000be2:	0242      	lsls	r2, r0, #9
 8000be4:	bf06      	itte	eq
 8000be6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000bea:	ea90 0f01 	teqeq	r0, r1
 8000bee:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000bf2:	4770      	bx	lr

08000bf4 <__aeabi_ui2f>:
 8000bf4:	f04f 0300 	mov.w	r3, #0
 8000bf8:	e004      	b.n	8000c04 <__aeabi_i2f+0x8>
 8000bfa:	bf00      	nop

08000bfc <__aeabi_i2f>:
 8000bfc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c00:	bf48      	it	mi
 8000c02:	4240      	negmi	r0, r0
 8000c04:	ea5f 0c00 	movs.w	ip, r0
 8000c08:	bf08      	it	eq
 8000c0a:	4770      	bxeq	lr
 8000c0c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000c10:	4601      	mov	r1, r0
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	e01c      	b.n	8000c52 <__aeabi_l2f+0x2a>

08000c18 <__aeabi_ul2f>:
 8000c18:	ea50 0201 	orrs.w	r2, r0, r1
 8000c1c:	bf08      	it	eq
 8000c1e:	4770      	bxeq	lr
 8000c20:	f04f 0300 	mov.w	r3, #0
 8000c24:	e00a      	b.n	8000c3c <__aeabi_l2f+0x14>
 8000c26:	bf00      	nop

08000c28 <__aeabi_l2f>:
 8000c28:	ea50 0201 	orrs.w	r2, r0, r1
 8000c2c:	bf08      	it	eq
 8000c2e:	4770      	bxeq	lr
 8000c30:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000c34:	d502      	bpl.n	8000c3c <__aeabi_l2f+0x14>
 8000c36:	4240      	negs	r0, r0
 8000c38:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c3c:	ea5f 0c01 	movs.w	ip, r1
 8000c40:	bf02      	ittt	eq
 8000c42:	4684      	moveq	ip, r0
 8000c44:	4601      	moveq	r1, r0
 8000c46:	2000      	moveq	r0, #0
 8000c48:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000c4c:	bf08      	it	eq
 8000c4e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000c52:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000c56:	fabc f28c 	clz	r2, ip
 8000c5a:	3a08      	subs	r2, #8
 8000c5c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000c60:	db10      	blt.n	8000c84 <__aeabi_l2f+0x5c>
 8000c62:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c66:	4463      	add	r3, ip
 8000c68:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c6c:	f1c2 0220 	rsb	r2, r2, #32
 8000c70:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000c74:	fa20 f202 	lsr.w	r2, r0, r2
 8000c78:	eb43 0002 	adc.w	r0, r3, r2
 8000c7c:	bf08      	it	eq
 8000c7e:	f020 0001 	biceq.w	r0, r0, #1
 8000c82:	4770      	bx	lr
 8000c84:	f102 0220 	add.w	r2, r2, #32
 8000c88:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c8c:	f1c2 0220 	rsb	r2, r2, #32
 8000c90:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000c94:	fa21 f202 	lsr.w	r2, r1, r2
 8000c98:	eb43 0002 	adc.w	r0, r3, r2
 8000c9c:	bf08      	it	eq
 8000c9e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ca2:	4770      	bx	lr

08000ca4 <__aeabi_fmul>:
 8000ca4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ca8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000cac:	bf1e      	ittt	ne
 8000cae:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000cb2:	ea92 0f0c 	teqne	r2, ip
 8000cb6:	ea93 0f0c 	teqne	r3, ip
 8000cba:	d06f      	beq.n	8000d9c <__aeabi_fmul+0xf8>
 8000cbc:	441a      	add	r2, r3
 8000cbe:	ea80 0c01 	eor.w	ip, r0, r1
 8000cc2:	0240      	lsls	r0, r0, #9
 8000cc4:	bf18      	it	ne
 8000cc6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000cca:	d01e      	beq.n	8000d0a <__aeabi_fmul+0x66>
 8000ccc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000cd0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000cd4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000cd8:	fba0 3101 	umull	r3, r1, r0, r1
 8000cdc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ce0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000ce4:	bf3e      	ittt	cc
 8000ce6:	0049      	lslcc	r1, r1, #1
 8000ce8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000cec:	005b      	lslcc	r3, r3, #1
 8000cee:	ea40 0001 	orr.w	r0, r0, r1
 8000cf2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000cf6:	2afd      	cmp	r2, #253	; 0xfd
 8000cf8:	d81d      	bhi.n	8000d36 <__aeabi_fmul+0x92>
 8000cfa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000cfe:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d02:	bf08      	it	eq
 8000d04:	f020 0001 	biceq.w	r0, r0, #1
 8000d08:	4770      	bx	lr
 8000d0a:	f090 0f00 	teq	r0, #0
 8000d0e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000d12:	bf08      	it	eq
 8000d14:	0249      	lsleq	r1, r1, #9
 8000d16:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d1a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d1e:	3a7f      	subs	r2, #127	; 0x7f
 8000d20:	bfc2      	ittt	gt
 8000d22:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000d26:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d2a:	4770      	bxgt	lr
 8000d2c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d30:	f04f 0300 	mov.w	r3, #0
 8000d34:	3a01      	subs	r2, #1
 8000d36:	dc5d      	bgt.n	8000df4 <__aeabi_fmul+0x150>
 8000d38:	f112 0f19 	cmn.w	r2, #25
 8000d3c:	bfdc      	itt	le
 8000d3e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000d42:	4770      	bxle	lr
 8000d44:	f1c2 0200 	rsb	r2, r2, #0
 8000d48:	0041      	lsls	r1, r0, #1
 8000d4a:	fa21 f102 	lsr.w	r1, r1, r2
 8000d4e:	f1c2 0220 	rsb	r2, r2, #32
 8000d52:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d56:	ea5f 0031 	movs.w	r0, r1, rrx
 8000d5a:	f140 0000 	adc.w	r0, r0, #0
 8000d5e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000d62:	bf08      	it	eq
 8000d64:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d68:	4770      	bx	lr
 8000d6a:	f092 0f00 	teq	r2, #0
 8000d6e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000d72:	bf02      	ittt	eq
 8000d74:	0040      	lsleq	r0, r0, #1
 8000d76:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000d7a:	3a01      	subeq	r2, #1
 8000d7c:	d0f9      	beq.n	8000d72 <__aeabi_fmul+0xce>
 8000d7e:	ea40 000c 	orr.w	r0, r0, ip
 8000d82:	f093 0f00 	teq	r3, #0
 8000d86:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000d8a:	bf02      	ittt	eq
 8000d8c:	0049      	lsleq	r1, r1, #1
 8000d8e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000d92:	3b01      	subeq	r3, #1
 8000d94:	d0f9      	beq.n	8000d8a <__aeabi_fmul+0xe6>
 8000d96:	ea41 010c 	orr.w	r1, r1, ip
 8000d9a:	e78f      	b.n	8000cbc <__aeabi_fmul+0x18>
 8000d9c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000da0:	ea92 0f0c 	teq	r2, ip
 8000da4:	bf18      	it	ne
 8000da6:	ea93 0f0c 	teqne	r3, ip
 8000daa:	d00a      	beq.n	8000dc2 <__aeabi_fmul+0x11e>
 8000dac:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000db0:	bf18      	it	ne
 8000db2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000db6:	d1d8      	bne.n	8000d6a <__aeabi_fmul+0xc6>
 8000db8:	ea80 0001 	eor.w	r0, r0, r1
 8000dbc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000dc0:	4770      	bx	lr
 8000dc2:	f090 0f00 	teq	r0, #0
 8000dc6:	bf17      	itett	ne
 8000dc8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000dcc:	4608      	moveq	r0, r1
 8000dce:	f091 0f00 	teqne	r1, #0
 8000dd2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000dd6:	d014      	beq.n	8000e02 <__aeabi_fmul+0x15e>
 8000dd8:	ea92 0f0c 	teq	r2, ip
 8000ddc:	d101      	bne.n	8000de2 <__aeabi_fmul+0x13e>
 8000dde:	0242      	lsls	r2, r0, #9
 8000de0:	d10f      	bne.n	8000e02 <__aeabi_fmul+0x15e>
 8000de2:	ea93 0f0c 	teq	r3, ip
 8000de6:	d103      	bne.n	8000df0 <__aeabi_fmul+0x14c>
 8000de8:	024b      	lsls	r3, r1, #9
 8000dea:	bf18      	it	ne
 8000dec:	4608      	movne	r0, r1
 8000dee:	d108      	bne.n	8000e02 <__aeabi_fmul+0x15e>
 8000df0:	ea80 0001 	eor.w	r0, r0, r1
 8000df4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000df8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000dfc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e00:	4770      	bx	lr
 8000e02:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e06:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000e0a:	4770      	bx	lr

08000e0c <__aeabi_fdiv>:
 8000e0c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e10:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e14:	bf1e      	ittt	ne
 8000e16:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e1a:	ea92 0f0c 	teqne	r2, ip
 8000e1e:	ea93 0f0c 	teqne	r3, ip
 8000e22:	d069      	beq.n	8000ef8 <__aeabi_fdiv+0xec>
 8000e24:	eba2 0203 	sub.w	r2, r2, r3
 8000e28:	ea80 0c01 	eor.w	ip, r0, r1
 8000e2c:	0249      	lsls	r1, r1, #9
 8000e2e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e32:	d037      	beq.n	8000ea4 <__aeabi_fdiv+0x98>
 8000e34:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000e38:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000e3c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000e40:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000e44:	428b      	cmp	r3, r1
 8000e46:	bf38      	it	cc
 8000e48:	005b      	lslcc	r3, r3, #1
 8000e4a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000e4e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000e52:	428b      	cmp	r3, r1
 8000e54:	bf24      	itt	cs
 8000e56:	1a5b      	subcs	r3, r3, r1
 8000e58:	ea40 000c 	orrcs.w	r0, r0, ip
 8000e5c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000e60:	bf24      	itt	cs
 8000e62:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000e66:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000e6a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000e6e:	bf24      	itt	cs
 8000e70:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000e74:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000e78:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000e7c:	bf24      	itt	cs
 8000e7e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000e82:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000e86:	011b      	lsls	r3, r3, #4
 8000e88:	bf18      	it	ne
 8000e8a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000e8e:	d1e0      	bne.n	8000e52 <__aeabi_fdiv+0x46>
 8000e90:	2afd      	cmp	r2, #253	; 0xfd
 8000e92:	f63f af50 	bhi.w	8000d36 <__aeabi_fmul+0x92>
 8000e96:	428b      	cmp	r3, r1
 8000e98:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e9c:	bf08      	it	eq
 8000e9e:	f020 0001 	biceq.w	r0, r0, #1
 8000ea2:	4770      	bx	lr
 8000ea4:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000ea8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000eac:	327f      	adds	r2, #127	; 0x7f
 8000eae:	bfc2      	ittt	gt
 8000eb0:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000eb4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000eb8:	4770      	bxgt	lr
 8000eba:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ebe:	f04f 0300 	mov.w	r3, #0
 8000ec2:	3a01      	subs	r2, #1
 8000ec4:	e737      	b.n	8000d36 <__aeabi_fmul+0x92>
 8000ec6:	f092 0f00 	teq	r2, #0
 8000eca:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000ece:	bf02      	ittt	eq
 8000ed0:	0040      	lsleq	r0, r0, #1
 8000ed2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000ed6:	3a01      	subeq	r2, #1
 8000ed8:	d0f9      	beq.n	8000ece <__aeabi_fdiv+0xc2>
 8000eda:	ea40 000c 	orr.w	r0, r0, ip
 8000ede:	f093 0f00 	teq	r3, #0
 8000ee2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ee6:	bf02      	ittt	eq
 8000ee8:	0049      	lsleq	r1, r1, #1
 8000eea:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000eee:	3b01      	subeq	r3, #1
 8000ef0:	d0f9      	beq.n	8000ee6 <__aeabi_fdiv+0xda>
 8000ef2:	ea41 010c 	orr.w	r1, r1, ip
 8000ef6:	e795      	b.n	8000e24 <__aeabi_fdiv+0x18>
 8000ef8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000efc:	ea92 0f0c 	teq	r2, ip
 8000f00:	d108      	bne.n	8000f14 <__aeabi_fdiv+0x108>
 8000f02:	0242      	lsls	r2, r0, #9
 8000f04:	f47f af7d 	bne.w	8000e02 <__aeabi_fmul+0x15e>
 8000f08:	ea93 0f0c 	teq	r3, ip
 8000f0c:	f47f af70 	bne.w	8000df0 <__aeabi_fmul+0x14c>
 8000f10:	4608      	mov	r0, r1
 8000f12:	e776      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f14:	ea93 0f0c 	teq	r3, ip
 8000f18:	d104      	bne.n	8000f24 <__aeabi_fdiv+0x118>
 8000f1a:	024b      	lsls	r3, r1, #9
 8000f1c:	f43f af4c 	beq.w	8000db8 <__aeabi_fmul+0x114>
 8000f20:	4608      	mov	r0, r1
 8000f22:	e76e      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f24:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f28:	bf18      	it	ne
 8000f2a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f2e:	d1ca      	bne.n	8000ec6 <__aeabi_fdiv+0xba>
 8000f30:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000f34:	f47f af5c 	bne.w	8000df0 <__aeabi_fmul+0x14c>
 8000f38:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000f3c:	f47f af3c 	bne.w	8000db8 <__aeabi_fmul+0x114>
 8000f40:	e75f      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f42:	bf00      	nop

08000f44 <OneWire_SetCallback>:
		void(*OnErr)(void);
}OneWire_Callback;
OneWire_Callback onewire_callback;

void OneWire_SetCallback(void(*OnComplete)(void), void(*OnErr)(void))
{
 8000f44:	b480      	push	{r7}
 8000f46:	b083      	sub	sp, #12
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
 8000f4c:	6039      	str	r1, [r7, #0]
	onewire_callback.OnErr = OnErr;
 8000f4e:	4a05      	ldr	r2, [pc, #20]	; (8000f64 <OneWire_SetCallback+0x20>)
 8000f50:	683b      	ldr	r3, [r7, #0]
 8000f52:	6053      	str	r3, [r2, #4]
	onewire_callback.OnComplete = OnComplete;
 8000f54:	4a03      	ldr	r2, [pc, #12]	; (8000f64 <OneWire_SetCallback+0x20>)
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	6013      	str	r3, [r2, #0]
}
 8000f5a:	bf00      	nop
 8000f5c:	370c      	adds	r7, #12
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	bc80      	pop	{r7}
 8000f62:	4770      	bx	lr
 8000f64:	20000270 	.word	0x20000270

08000f68 <OneWire_Init>:

void OneWire_Init(UART_HandleTypeDef *huart){
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b082      	sub	sp, #8
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]
	OneWire_UARTInit(9600, huart);
 8000f70:	6879      	ldr	r1, [r7, #4]
 8000f72:	f44f 5016 	mov.w	r0, #9600	; 0x2580
 8000f76:	f000 f805 	bl	8000f84 <OneWire_UARTInit>
}
 8000f7a:	bf00      	nop
 8000f7c:	3708      	adds	r7, #8
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	bd80      	pop	{r7, pc}
	...

08000f84 <OneWire_UARTInit>:

// Declare a USART_HandleTypeDef handle structure.
void OneWire_UARTInit(uint32_t baudRate, UART_HandleTypeDef *huart){
 8000f84:	b5b0      	push	{r4, r5, r7, lr}
 8000f86:	b082      	sub	sp, #8
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]
 8000f8c:	6039      	str	r1, [r7, #0]
//	huart->Instance = USART1;
	huart->Init.BaudRate = baudRate;
 8000f8e:	683b      	ldr	r3, [r7, #0]
 8000f90:	687a      	ldr	r2, [r7, #4]
 8000f92:	605a      	str	r2, [r3, #4]
	huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8000f94:	f003 f86c 	bl	8004070 <HAL_RCC_GetPCLK2Freq>
 8000f98:	4602      	mov	r2, r0
 8000f9a:	4613      	mov	r3, r2
 8000f9c:	009b      	lsls	r3, r3, #2
 8000f9e:	4413      	add	r3, r2
 8000fa0:	009a      	lsls	r2, r3, #2
 8000fa2:	441a      	add	r2, r3
 8000fa4:	683b      	ldr	r3, [r7, #0]
 8000fa6:	685b      	ldr	r3, [r3, #4]
 8000fa8:	009b      	lsls	r3, r3, #2
 8000faa:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fae:	4a3d      	ldr	r2, [pc, #244]	; (80010a4 <OneWire_UARTInit+0x120>)
 8000fb0:	fba2 2303 	umull	r2, r3, r2, r3
 8000fb4:	095b      	lsrs	r3, r3, #5
 8000fb6:	011c      	lsls	r4, r3, #4
 8000fb8:	f003 f85a 	bl	8004070 <HAL_RCC_GetPCLK2Freq>
 8000fbc:	4602      	mov	r2, r0
 8000fbe:	4613      	mov	r3, r2
 8000fc0:	009b      	lsls	r3, r3, #2
 8000fc2:	4413      	add	r3, r2
 8000fc4:	009a      	lsls	r2, r3, #2
 8000fc6:	441a      	add	r2, r3
 8000fc8:	683b      	ldr	r3, [r7, #0]
 8000fca:	685b      	ldr	r3, [r3, #4]
 8000fcc:	009b      	lsls	r3, r3, #2
 8000fce:	fbb2 f5f3 	udiv	r5, r2, r3
 8000fd2:	f003 f84d 	bl	8004070 <HAL_RCC_GetPCLK2Freq>
 8000fd6:	4602      	mov	r2, r0
 8000fd8:	4613      	mov	r3, r2
 8000fda:	009b      	lsls	r3, r3, #2
 8000fdc:	4413      	add	r3, r2
 8000fde:	009a      	lsls	r2, r3, #2
 8000fe0:	441a      	add	r2, r3
 8000fe2:	683b      	ldr	r3, [r7, #0]
 8000fe4:	685b      	ldr	r3, [r3, #4]
 8000fe6:	009b      	lsls	r3, r3, #2
 8000fe8:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fec:	4a2d      	ldr	r2, [pc, #180]	; (80010a4 <OneWire_UARTInit+0x120>)
 8000fee:	fba2 2303 	umull	r2, r3, r2, r3
 8000ff2:	095b      	lsrs	r3, r3, #5
 8000ff4:	2264      	movs	r2, #100	; 0x64
 8000ff6:	fb02 f303 	mul.w	r3, r2, r3
 8000ffa:	1aeb      	subs	r3, r5, r3
 8000ffc:	011b      	lsls	r3, r3, #4
 8000ffe:	3332      	adds	r3, #50	; 0x32
 8001000:	4a28      	ldr	r2, [pc, #160]	; (80010a4 <OneWire_UARTInit+0x120>)
 8001002:	fba2 2303 	umull	r2, r3, r2, r3
 8001006:	095b      	lsrs	r3, r3, #5
 8001008:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800100c:	441c      	add	r4, r3
 800100e:	f003 f82f 	bl	8004070 <HAL_RCC_GetPCLK2Freq>
 8001012:	4602      	mov	r2, r0
 8001014:	4613      	mov	r3, r2
 8001016:	009b      	lsls	r3, r3, #2
 8001018:	4413      	add	r3, r2
 800101a:	009a      	lsls	r2, r3, #2
 800101c:	441a      	add	r2, r3
 800101e:	683b      	ldr	r3, [r7, #0]
 8001020:	685b      	ldr	r3, [r3, #4]
 8001022:	009b      	lsls	r3, r3, #2
 8001024:	fbb2 f5f3 	udiv	r5, r2, r3
 8001028:	f003 f822 	bl	8004070 <HAL_RCC_GetPCLK2Freq>
 800102c:	4602      	mov	r2, r0
 800102e:	4613      	mov	r3, r2
 8001030:	009b      	lsls	r3, r3, #2
 8001032:	4413      	add	r3, r2
 8001034:	009a      	lsls	r2, r3, #2
 8001036:	441a      	add	r2, r3
 8001038:	683b      	ldr	r3, [r7, #0]
 800103a:	685b      	ldr	r3, [r3, #4]
 800103c:	009b      	lsls	r3, r3, #2
 800103e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001042:	4a18      	ldr	r2, [pc, #96]	; (80010a4 <OneWire_UARTInit+0x120>)
 8001044:	fba2 2303 	umull	r2, r3, r2, r3
 8001048:	095b      	lsrs	r3, r3, #5
 800104a:	2264      	movs	r2, #100	; 0x64
 800104c:	fb02 f303 	mul.w	r3, r2, r3
 8001050:	1aeb      	subs	r3, r5, r3
 8001052:	011b      	lsls	r3, r3, #4
 8001054:	3332      	adds	r3, #50	; 0x32
 8001056:	4a13      	ldr	r2, [pc, #76]	; (80010a4 <OneWire_UARTInit+0x120>)
 8001058:	fba2 2303 	umull	r2, r3, r2, r3
 800105c:	095b      	lsrs	r3, r3, #5
 800105e:	f003 020f 	and.w	r2, r3, #15
 8001062:	683b      	ldr	r3, [r7, #0]
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	4422      	add	r2, r4
 8001068:	609a      	str	r2, [r3, #8]
	huart->Init.WordLength = UART_WORDLENGTH_8B;
 800106a:	683b      	ldr	r3, [r7, #0]
 800106c:	2200      	movs	r2, #0
 800106e:	609a      	str	r2, [r3, #8]
	huart->Init.StopBits = UART_STOPBITS_1;
 8001070:	683b      	ldr	r3, [r7, #0]
 8001072:	2200      	movs	r2, #0
 8001074:	60da      	str	r2, [r3, #12]
	huart->Init.Parity = UART_PARITY_NONE;
 8001076:	683b      	ldr	r3, [r7, #0]
 8001078:	2200      	movs	r2, #0
 800107a:	611a      	str	r2, [r3, #16]
	huart->Init.Mode = UART_MODE_TX_RX;
 800107c:	683b      	ldr	r3, [r7, #0]
 800107e:	220c      	movs	r2, #12
 8001080:	615a      	str	r2, [r3, #20]
	huart->Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001082:	683b      	ldr	r3, [r7, #0]
 8001084:	2200      	movs	r2, #0
 8001086:	619a      	str	r2, [r3, #24]
	huart->Init.OverSampling = UART_OVERSAMPLING_16;
 8001088:	683b      	ldr	r3, [r7, #0]
 800108a:	2200      	movs	r2, #0
 800108c:	61da      	str	r2, [r3, #28]
    HAL_HalfDuplex_Init(huart);
 800108e:	6838      	ldr	r0, [r7, #0]
 8001090:	f003 fcf4 	bl	8004a7c <HAL_HalfDuplex_Init>
    huart_ow = huart;
 8001094:	4a04      	ldr	r2, [pc, #16]	; (80010a8 <OneWire_UARTInit+0x124>)
 8001096:	683b      	ldr	r3, [r7, #0]
 8001098:	6013      	str	r3, [r2, #0]
    return ;
 800109a:	bf00      	nop
}
 800109c:	3708      	adds	r7, #8
 800109e:	46bd      	mov	sp, r7
 80010a0:	bdb0      	pop	{r4, r5, r7, pc}
 80010a2:	bf00      	nop
 80010a4:	51eb851f 	.word	0x51eb851f
 80010a8:	2000026c 	.word	0x2000026c

080010ac <OneWire_TxCpltCallback>:

void OneWire_TxCpltCallback(){
 80010ac:	b480      	push	{r7}
 80010ae:	af00      	add	r7, sp, #0
	//StateMachine();
}
 80010b0:	bf00      	nop
 80010b2:	46bd      	mov	sp, r7
 80010b4:	bc80      	pop	{r7}
 80010b6:	4770      	bx	lr

080010b8 <OneWire_RxCpltCallback>:

void OneWire_RxCpltCallback(){
 80010b8:	b580      	push	{r7, lr}
 80010ba:	af00      	add	r7, sp, #0
    StateMachine();
 80010bc:	f000 f802 	bl	80010c4 <StateMachine>
}
 80010c0:	bf00      	nop
 80010c2:	bd80      	pop	{r7, pc}

080010c4 <StateMachine>:

void StateMachine(){
 80010c4:	b580      	push	{r7, lr}
 80010c6:	af00      	add	r7, sp, #0
    switch (state.Reset){
 80010c8:	4b33      	ldr	r3, [pc, #204]	; (8001198 <StateMachine+0xd4>)
 80010ca:	781b      	ldrb	r3, [r3, #0]
 80010cc:	2b04      	cmp	r3, #4
 80010ce:	d861      	bhi.n	8001194 <StateMachine+0xd0>
 80010d0:	a201      	add	r2, pc, #4	; (adr r2, 80010d8 <StateMachine+0x14>)
 80010d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010d6:	bf00      	nop
 80010d8:	080010ed 	.word	0x080010ed
 80010dc:	08001131 	.word	0x08001131
 80010e0:	08001153 	.word	0x08001153
 80010e4:	08001169 	.word	0x08001169
 80010e8:	0800117f 	.word	0x0800117f
        case 0: // start the reset produce;
            OneWire_UARTInit(9600, huart_ow);
 80010ec:	4b2b      	ldr	r3, [pc, #172]	; (800119c <StateMachine+0xd8>)
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	4619      	mov	r1, r3
 80010f2:	f44f 5016 	mov.w	r0, #9600	; 0x2580
 80010f6:	f7ff ff45 	bl	8000f84 <OneWire_UARTInit>
            internal_Buffer[0]=0xf0;
 80010fa:	4b29      	ldr	r3, [pc, #164]	; (80011a0 <StateMachine+0xdc>)
 80010fc:	22f0      	movs	r2, #240	; 0xf0
 80010fe:	701a      	strb	r2, [r3, #0]
            HAL_UART_Transmit_DMA(huart_ow,&(internal_Buffer[0]),1);
 8001100:	4b26      	ldr	r3, [pc, #152]	; (800119c <StateMachine+0xd8>)
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	2201      	movs	r2, #1
 8001106:	4926      	ldr	r1, [pc, #152]	; (80011a0 <StateMachine+0xdc>)
 8001108:	4618      	mov	r0, r3
 800110a:	f003 fd0d 	bl	8004b28 <HAL_UART_Transmit_DMA>
            HAL_UART_Receive_DMA(huart_ow,&(internal_Buffer[0]),1);
 800110e:	4b23      	ldr	r3, [pc, #140]	; (800119c <StateMachine+0xd8>)
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	2201      	movs	r2, #1
 8001114:	4922      	ldr	r1, [pc, #136]	; (80011a0 <StateMachine+0xdc>)
 8001116:	4618      	mov	r0, r3
 8001118:	f003 fd72 	bl	8004c00 <HAL_UART_Receive_DMA>
            HAL_Delay(100);
 800111c:	2064      	movs	r0, #100	; 0x64
 800111e:	f001 fa11 	bl	8002544 <HAL_Delay>
            state.Reset++;
 8001122:	4b1d      	ldr	r3, [pc, #116]	; (8001198 <StateMachine+0xd4>)
 8001124:	781b      	ldrb	r3, [r3, #0]
 8001126:	3301      	adds	r3, #1
 8001128:	b2da      	uxtb	r2, r3
 800112a:	4b1b      	ldr	r3, [pc, #108]	; (8001198 <StateMachine+0xd4>)
 800112c:	701a      	strb	r2, [r3, #0]
  	    break;
 800112e:	e030      	b.n	8001192 <StateMachine+0xce>
        case 1: // to check if the device exist or not.
        	if (internal_Buffer[0]==0xf0)
 8001130:	4b1b      	ldr	r3, [pc, #108]	; (80011a0 <StateMachine+0xdc>)
 8001132:	781b      	ldrb	r3, [r3, #0]
 8001134:	2bf0      	cmp	r3, #240	; 0xf0
 8001136:	d106      	bne.n	8001146 <StateMachine+0x82>
            {
	    		onewire_callback.OnErr();
 8001138:	4b1a      	ldr	r3, [pc, #104]	; (80011a4 <StateMachine+0xe0>)
 800113a:	685b      	ldr	r3, [r3, #4]
 800113c:	4798      	blx	r3
	    		state.Reset = 0;
 800113e:	4b16      	ldr	r3, [pc, #88]	; (8001198 <StateMachine+0xd4>)
 8001140:	2200      	movs	r2, #0
 8001142:	701a      	strb	r2, [r3, #0]
                break;
 8001144:	e025      	b.n	8001192 <StateMachine+0xce>
            }
            state.Reset++;
 8001146:	4b14      	ldr	r3, [pc, #80]	; (8001198 <StateMachine+0xd4>)
 8001148:	781b      	ldrb	r3, [r3, #0]
 800114a:	3301      	adds	r3, #1
 800114c:	b2da      	uxtb	r2, r3
 800114e:	4b12      	ldr	r3, [pc, #72]	; (8001198 <StateMachine+0xd4>)
 8001150:	701a      	strb	r2, [r3, #0]
        case 2:
            if (ROMStateMachine()==0)
 8001152:	f000 f829 	bl	80011a8 <ROMStateMachine>
 8001156:	4603      	mov	r3, r0
 8001158:	2b00      	cmp	r3, #0
 800115a:	d117      	bne.n	800118c <StateMachine+0xc8>
            	state.Reset++;
 800115c:	4b0e      	ldr	r3, [pc, #56]	; (8001198 <StateMachine+0xd4>)
 800115e:	781b      	ldrb	r3, [r3, #0]
 8001160:	3301      	adds	r3, #1
 8001162:	b2da      	uxtb	r2, r3
 8001164:	4b0c      	ldr	r3, [pc, #48]	; (8001198 <StateMachine+0xd4>)
 8001166:	701a      	strb	r2, [r3, #0]
            else break;
        case 3:
            if (FunctionStateMachine()==0)
 8001168:	f000 f914 	bl	8001394 <FunctionStateMachine>
 800116c:	4603      	mov	r3, r0
 800116e:	2b00      	cmp	r3, #0
 8001170:	d10e      	bne.n	8001190 <StateMachine+0xcc>
            	state.Reset++;
 8001172:	4b09      	ldr	r3, [pc, #36]	; (8001198 <StateMachine+0xd4>)
 8001174:	781b      	ldrb	r3, [r3, #0]
 8001176:	3301      	adds	r3, #1
 8001178:	b2da      	uxtb	r2, r3
 800117a:	4b07      	ldr	r3, [pc, #28]	; (8001198 <StateMachine+0xd4>)
 800117c:	701a      	strb	r2, [r3, #0]
            else break;
        case 4:
        	onewire_callback.OnComplete();
 800117e:	4b09      	ldr	r3, [pc, #36]	; (80011a4 <StateMachine+0xe0>)
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	4798      	blx	r3
        	state.Reset = 0;
 8001184:	4b04      	ldr	r3, [pc, #16]	; (8001198 <StateMachine+0xd4>)
 8001186:	2200      	movs	r2, #0
 8001188:	701a      	strb	r2, [r3, #0]
	    break;
 800118a:	e002      	b.n	8001192 <StateMachine+0xce>
            else break;
 800118c:	bf00      	nop
 800118e:	e000      	b.n	8001192 <StateMachine+0xce>
            else break;
 8001190:	bf00      	nop
    }
    return ;
 8001192:	bf00      	nop
 8001194:	bf00      	nop
}
 8001196:	bd80      	pop	{r7, pc}
 8001198:	20000204 	.word	0x20000204
 800119c:	2000026c 	.word	0x2000026c
 80011a0:	20000220 	.word	0x20000220
 80011a4:	20000270 	.word	0x20000270

080011a8 <ROMStateMachine>:

uint8_t ROMStateMachine(void){
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b082      	sub	sp, #8
 80011ac:	af00      	add	r7, sp, #0
    switch(state.ROM){
 80011ae:	4b76      	ldr	r3, [pc, #472]	; (8001388 <ROMStateMachine+0x1e0>)
 80011b0:	7e9b      	ldrb	r3, [r3, #26]
 80011b2:	2b02      	cmp	r3, #2
 80011b4:	f000 80a9 	beq.w	800130a <ROMStateMachine+0x162>
 80011b8:	2b02      	cmp	r3, #2
 80011ba:	f300 80de 	bgt.w	800137a <ROMStateMachine+0x1d2>
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d002      	beq.n	80011c8 <ROMStateMachine+0x20>
 80011c2:	2b01      	cmp	r3, #1
 80011c4:	d035      	beq.n	8001232 <ROMStateMachine+0x8a>
 80011c6:	e0d8      	b.n	800137a <ROMStateMachine+0x1d2>
        case 0: // start the ROM command by sending the ROM_Command
            OneWire_UARTInit(115200, huart_ow);
 80011c8:	4b70      	ldr	r3, [pc, #448]	; (800138c <ROMStateMachine+0x1e4>)
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	4619      	mov	r1, r3
 80011ce:	f44f 30e1 	mov.w	r0, #115200	; 0x1c200
 80011d2:	f7ff fed7 	bl	8000f84 <OneWire_UARTInit>
            for (uint8_t i=0;i<8;i++)
 80011d6:	2300      	movs	r3, #0
 80011d8:	71fb      	strb	r3, [r7, #7]
 80011da:	e012      	b.n	8001202 <ROMStateMachine+0x5a>
                internal_Buffer[i]=((state.ROM_Command>>i)&0x01)?0xff:0x00;
 80011dc:	4b6a      	ldr	r3, [pc, #424]	; (8001388 <ROMStateMachine+0x1e0>)
 80011de:	785b      	ldrb	r3, [r3, #1]
 80011e0:	461a      	mov	r2, r3
 80011e2:	79fb      	ldrb	r3, [r7, #7]
 80011e4:	fa42 f303 	asr.w	r3, r2, r3
 80011e8:	f003 0301 	and.w	r3, r3, #1
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d001      	beq.n	80011f4 <ROMStateMachine+0x4c>
 80011f0:	21ff      	movs	r1, #255	; 0xff
 80011f2:	e000      	b.n	80011f6 <ROMStateMachine+0x4e>
 80011f4:	2100      	movs	r1, #0
 80011f6:	79fb      	ldrb	r3, [r7, #7]
 80011f8:	4a65      	ldr	r2, [pc, #404]	; (8001390 <ROMStateMachine+0x1e8>)
 80011fa:	54d1      	strb	r1, [r2, r3]
            for (uint8_t i=0;i<8;i++)
 80011fc:	79fb      	ldrb	r3, [r7, #7]
 80011fe:	3301      	adds	r3, #1
 8001200:	71fb      	strb	r3, [r7, #7]
 8001202:	79fb      	ldrb	r3, [r7, #7]
 8001204:	2b07      	cmp	r3, #7
 8001206:	d9e9      	bls.n	80011dc <ROMStateMachine+0x34>
            HAL_UART_Transmit_DMA(huart_ow,internal_Buffer,8);
 8001208:	4b60      	ldr	r3, [pc, #384]	; (800138c <ROMStateMachine+0x1e4>)
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	2208      	movs	r2, #8
 800120e:	4960      	ldr	r1, [pc, #384]	; (8001390 <ROMStateMachine+0x1e8>)
 8001210:	4618      	mov	r0, r3
 8001212:	f003 fc89 	bl	8004b28 <HAL_UART_Transmit_DMA>
            HAL_UART_Receive_DMA(huart_ow,&(internal_Buffer[0]),8);
 8001216:	4b5d      	ldr	r3, [pc, #372]	; (800138c <ROMStateMachine+0x1e4>)
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	2208      	movs	r2, #8
 800121c:	495c      	ldr	r1, [pc, #368]	; (8001390 <ROMStateMachine+0x1e8>)
 800121e:	4618      	mov	r0, r3
 8001220:	f003 fcee 	bl	8004c00 <HAL_UART_Receive_DMA>
            state.ROM++;
 8001224:	4b58      	ldr	r3, [pc, #352]	; (8001388 <ROMStateMachine+0x1e0>)
 8001226:	7e9b      	ldrb	r3, [r3, #26]
 8001228:	3301      	adds	r3, #1
 800122a:	b2da      	uxtb	r2, r3
 800122c:	4b56      	ldr	r3, [pc, #344]	; (8001388 <ROMStateMachine+0x1e0>)
 800122e:	769a      	strb	r2, [r3, #26]
//            if (state.ROM_Command != 0xcc)
            break;
 8001230:	e0a3      	b.n	800137a <ROMStateMachine+0x1d2>
        case 1: // continue by sending necessary Tx buffer
            if (state.ROM_TxCount!=0){
 8001232:	4b55      	ldr	r3, [pc, #340]	; (8001388 <ROMStateMachine+0x1e0>)
 8001234:	7b1b      	ldrb	r3, [r3, #12]
 8001236:	2b00      	cmp	r3, #0
 8001238:	d03b      	beq.n	80012b2 <ROMStateMachine+0x10a>
                for (uint8_t i=0;i<state.ROM_TxCount;i++)
 800123a:	2300      	movs	r3, #0
 800123c:	71bb      	strb	r3, [r7, #6]
 800123e:	e021      	b.n	8001284 <ROMStateMachine+0xdc>
                    for (uint8_t j=0;j<8;j++)
 8001240:	2300      	movs	r3, #0
 8001242:	717b      	strb	r3, [r7, #5]
 8001244:	e018      	b.n	8001278 <ROMStateMachine+0xd0>
                        internal_Buffer[i*8+j]=((state.ROM_TxBuffer[i]>>j)&0x01)?0xff:0x00;
 8001246:	4b50      	ldr	r3, [pc, #320]	; (8001388 <ROMStateMachine+0x1e0>)
 8001248:	685a      	ldr	r2, [r3, #4]
 800124a:	79bb      	ldrb	r3, [r7, #6]
 800124c:	4413      	add	r3, r2
 800124e:	781b      	ldrb	r3, [r3, #0]
 8001250:	461a      	mov	r2, r3
 8001252:	797b      	ldrb	r3, [r7, #5]
 8001254:	fa42 f303 	asr.w	r3, r2, r3
 8001258:	f003 0301 	and.w	r3, r3, #1
 800125c:	2b00      	cmp	r3, #0
 800125e:	d001      	beq.n	8001264 <ROMStateMachine+0xbc>
 8001260:	21ff      	movs	r1, #255	; 0xff
 8001262:	e000      	b.n	8001266 <ROMStateMachine+0xbe>
 8001264:	2100      	movs	r1, #0
 8001266:	79bb      	ldrb	r3, [r7, #6]
 8001268:	00da      	lsls	r2, r3, #3
 800126a:	797b      	ldrb	r3, [r7, #5]
 800126c:	4413      	add	r3, r2
 800126e:	4a48      	ldr	r2, [pc, #288]	; (8001390 <ROMStateMachine+0x1e8>)
 8001270:	54d1      	strb	r1, [r2, r3]
                    for (uint8_t j=0;j<8;j++)
 8001272:	797b      	ldrb	r3, [r7, #5]
 8001274:	3301      	adds	r3, #1
 8001276:	717b      	strb	r3, [r7, #5]
 8001278:	797b      	ldrb	r3, [r7, #5]
 800127a:	2b07      	cmp	r3, #7
 800127c:	d9e3      	bls.n	8001246 <ROMStateMachine+0x9e>
                for (uint8_t i=0;i<state.ROM_TxCount;i++)
 800127e:	79bb      	ldrb	r3, [r7, #6]
 8001280:	3301      	adds	r3, #1
 8001282:	71bb      	strb	r3, [r7, #6]
 8001284:	4b40      	ldr	r3, [pc, #256]	; (8001388 <ROMStateMachine+0x1e0>)
 8001286:	7b1b      	ldrb	r3, [r3, #12]
 8001288:	79ba      	ldrb	r2, [r7, #6]
 800128a:	429a      	cmp	r2, r3
 800128c:	d3d8      	bcc.n	8001240 <ROMStateMachine+0x98>
                HAL_UART_Transmit_DMA(huart_ow,&(internal_Buffer[0]),state.ROM_TxCount*8);
 800128e:	4b3f      	ldr	r3, [pc, #252]	; (800138c <ROMStateMachine+0x1e4>)
 8001290:	6818      	ldr	r0, [r3, #0]
 8001292:	4b3d      	ldr	r3, [pc, #244]	; (8001388 <ROMStateMachine+0x1e0>)
 8001294:	7b1b      	ldrb	r3, [r3, #12]
 8001296:	b29b      	uxth	r3, r3
 8001298:	00db      	lsls	r3, r3, #3
 800129a:	b29b      	uxth	r3, r3
 800129c:	461a      	mov	r2, r3
 800129e:	493c      	ldr	r1, [pc, #240]	; (8001390 <ROMStateMachine+0x1e8>)
 80012a0:	f003 fc42 	bl	8004b28 <HAL_UART_Transmit_DMA>
                //HAL_UART_Receive_DMA(huart_ow,&(internal_Buffer[0]),state.ROM_TxCount*8);
                state.ROM++;
 80012a4:	4b38      	ldr	r3, [pc, #224]	; (8001388 <ROMStateMachine+0x1e0>)
 80012a6:	7e9b      	ldrb	r3, [r3, #26]
 80012a8:	3301      	adds	r3, #1
 80012aa:	b2da      	uxtb	r2, r3
 80012ac:	4b36      	ldr	r3, [pc, #216]	; (8001388 <ROMStateMachine+0x1e0>)
 80012ae:	769a      	strb	r2, [r3, #26]
                break;
 80012b0:	e063      	b.n	800137a <ROMStateMachine+0x1d2>
            }
            if (state.ROM_RxCount!=0){
 80012b2:	4b35      	ldr	r3, [pc, #212]	; (8001388 <ROMStateMachine+0x1e0>)
 80012b4:	7b5b      	ldrb	r3, [r3, #13]
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d021      	beq.n	80012fe <ROMStateMachine+0x156>
                for (uint8_t i=0;i<=state.ROM_RxCount*8;i++)
 80012ba:	2300      	movs	r3, #0
 80012bc:	713b      	strb	r3, [r7, #4]
 80012be:	e006      	b.n	80012ce <ROMStateMachine+0x126>
                    internal_Buffer[i]=0xff;
 80012c0:	793b      	ldrb	r3, [r7, #4]
 80012c2:	4a33      	ldr	r2, [pc, #204]	; (8001390 <ROMStateMachine+0x1e8>)
 80012c4:	21ff      	movs	r1, #255	; 0xff
 80012c6:	54d1      	strb	r1, [r2, r3]
                for (uint8_t i=0;i<=state.ROM_RxCount*8;i++)
 80012c8:	793b      	ldrb	r3, [r7, #4]
 80012ca:	3301      	adds	r3, #1
 80012cc:	713b      	strb	r3, [r7, #4]
 80012ce:	793a      	ldrb	r2, [r7, #4]
 80012d0:	4b2d      	ldr	r3, [pc, #180]	; (8001388 <ROMStateMachine+0x1e0>)
 80012d2:	7b5b      	ldrb	r3, [r3, #13]
 80012d4:	00db      	lsls	r3, r3, #3
 80012d6:	429a      	cmp	r2, r3
 80012d8:	ddf2      	ble.n	80012c0 <ROMStateMachine+0x118>
                //HAL_UART_Transmit_DMA(huart_ow,&(internal_Buffer[0]),state.ROM_RxCount*8);
                HAL_UART_Receive_DMA(huart_ow,&(internal_Buffer[0]),state.ROM_RxCount*8);
 80012da:	4b2c      	ldr	r3, [pc, #176]	; (800138c <ROMStateMachine+0x1e4>)
 80012dc:	6818      	ldr	r0, [r3, #0]
 80012de:	4b2a      	ldr	r3, [pc, #168]	; (8001388 <ROMStateMachine+0x1e0>)
 80012e0:	7b5b      	ldrb	r3, [r3, #13]
 80012e2:	b29b      	uxth	r3, r3
 80012e4:	00db      	lsls	r3, r3, #3
 80012e6:	b29b      	uxth	r3, r3
 80012e8:	461a      	mov	r2, r3
 80012ea:	4929      	ldr	r1, [pc, #164]	; (8001390 <ROMStateMachine+0x1e8>)
 80012ec:	f003 fc88 	bl	8004c00 <HAL_UART_Receive_DMA>
                state.ROM++;
 80012f0:	4b25      	ldr	r3, [pc, #148]	; (8001388 <ROMStateMachine+0x1e0>)
 80012f2:	7e9b      	ldrb	r3, [r3, #26]
 80012f4:	3301      	adds	r3, #1
 80012f6:	b2da      	uxtb	r2, r3
 80012f8:	4b23      	ldr	r3, [pc, #140]	; (8001388 <ROMStateMachine+0x1e0>)
 80012fa:	769a      	strb	r2, [r3, #26]
                break;
 80012fc:	e03d      	b.n	800137a <ROMStateMachine+0x1d2>
            }
	    state.ROM++;
 80012fe:	4b22      	ldr	r3, [pc, #136]	; (8001388 <ROMStateMachine+0x1e0>)
 8001300:	7e9b      	ldrb	r3, [r3, #26]
 8001302:	3301      	adds	r3, #1
 8001304:	b2da      	uxtb	r2, r3
 8001306:	4b20      	ldr	r3, [pc, #128]	; (8001388 <ROMStateMachine+0x1e0>)
 8001308:	769a      	strb	r2, [r3, #26]
        case 2:
            if (state.ROM_RxCount!=0){
 800130a:	4b1f      	ldr	r3, [pc, #124]	; (8001388 <ROMStateMachine+0x1e0>)
 800130c:	7b5b      	ldrb	r3, [r3, #13]
 800130e:	2b00      	cmp	r3, #0
 8001310:	d02f      	beq.n	8001372 <ROMStateMachine+0x1ca>
        		for (uint8_t i=0;i<state.ROM_RxCount;i++)
 8001312:	2300      	movs	r3, #0
 8001314:	70fb      	strb	r3, [r7, #3]
 8001316:	e027      	b.n	8001368 <ROMStateMachine+0x1c0>
	                	for (uint8_t j=0;j<8;j++)
 8001318:	2300      	movs	r3, #0
 800131a:	70bb      	strb	r3, [r7, #2]
 800131c:	e01e      	b.n	800135c <ROMStateMachine+0x1b4>
	      	  	        state.ROM_RxBuffer[i]=state.ROM_RxBuffer[i]+
 800131e:	4b1a      	ldr	r3, [pc, #104]	; (8001388 <ROMStateMachine+0x1e0>)
 8001320:	689a      	ldr	r2, [r3, #8]
 8001322:	78fb      	ldrb	r3, [r7, #3]
 8001324:	4413      	add	r3, r2
 8001326:	7819      	ldrb	r1, [r3, #0]
					(((internal_Buffer[i*8+j]==0xff)?0x01:0x00)<<j);
 8001328:	78fb      	ldrb	r3, [r7, #3]
 800132a:	00da      	lsls	r2, r3, #3
 800132c:	78bb      	ldrb	r3, [r7, #2]
 800132e:	4413      	add	r3, r2
 8001330:	4a17      	ldr	r2, [pc, #92]	; (8001390 <ROMStateMachine+0x1e8>)
 8001332:	5cd3      	ldrb	r3, [r2, r3]
 8001334:	2bff      	cmp	r3, #255	; 0xff
 8001336:	bf0c      	ite	eq
 8001338:	2301      	moveq	r3, #1
 800133a:	2300      	movne	r3, #0
 800133c:	b2db      	uxtb	r3, r3
 800133e:	461a      	mov	r2, r3
 8001340:	78bb      	ldrb	r3, [r7, #2]
 8001342:	fa02 f303 	lsl.w	r3, r2, r3
	      	  	        state.ROM_RxBuffer[i]=state.ROM_RxBuffer[i]+
 8001346:	b2da      	uxtb	r2, r3
 8001348:	4b0f      	ldr	r3, [pc, #60]	; (8001388 <ROMStateMachine+0x1e0>)
 800134a:	6898      	ldr	r0, [r3, #8]
 800134c:	78fb      	ldrb	r3, [r7, #3]
 800134e:	4403      	add	r3, r0
 8001350:	440a      	add	r2, r1
 8001352:	b2d2      	uxtb	r2, r2
 8001354:	701a      	strb	r2, [r3, #0]
	                	for (uint8_t j=0;j<8;j++)
 8001356:	78bb      	ldrb	r3, [r7, #2]
 8001358:	3301      	adds	r3, #1
 800135a:	70bb      	strb	r3, [r7, #2]
 800135c:	78bb      	ldrb	r3, [r7, #2]
 800135e:	2b07      	cmp	r3, #7
 8001360:	d9dd      	bls.n	800131e <ROMStateMachine+0x176>
        		for (uint8_t i=0;i<state.ROM_RxCount;i++)
 8001362:	78fb      	ldrb	r3, [r7, #3]
 8001364:	3301      	adds	r3, #1
 8001366:	70fb      	strb	r3, [r7, #3]
 8001368:	4b07      	ldr	r3, [pc, #28]	; (8001388 <ROMStateMachine+0x1e0>)
 800136a:	7b5b      	ldrb	r3, [r3, #13]
 800136c:	78fa      	ldrb	r2, [r7, #3]
 800136e:	429a      	cmp	r2, r3
 8001370:	d3d2      	bcc.n	8001318 <ROMStateMachine+0x170>
            }
            state.ROM=0;
 8001372:	4b05      	ldr	r3, [pc, #20]	; (8001388 <ROMStateMachine+0x1e0>)
 8001374:	2200      	movs	r2, #0
 8001376:	769a      	strb	r2, [r3, #26]
            break;
 8001378:	bf00      	nop
        }
    return state.ROM;
 800137a:	4b03      	ldr	r3, [pc, #12]	; (8001388 <ROMStateMachine+0x1e0>)
 800137c:	7e9b      	ldrb	r3, [r3, #26]
}
 800137e:	4618      	mov	r0, r3
 8001380:	3708      	adds	r7, #8
 8001382:	46bd      	mov	sp, r7
 8001384:	bd80      	pop	{r7, pc}
 8001386:	bf00      	nop
 8001388:	20000204 	.word	0x20000204
 800138c:	2000026c 	.word	0x2000026c
 8001390:	20000220 	.word	0x20000220

08001394 <FunctionStateMachine>:

uint8_t FunctionStateMachine(void){
 8001394:	b580      	push	{r7, lr}
 8001396:	b082      	sub	sp, #8
 8001398:	af00      	add	r7, sp, #0
    switch(state.Function){
 800139a:	4b76      	ldr	r3, [pc, #472]	; (8001574 <FunctionStateMachine+0x1e0>)
 800139c:	7edb      	ldrb	r3, [r3, #27]
 800139e:	2b02      	cmp	r3, #2
 80013a0:	f000 80a9 	beq.w	80014f6 <FunctionStateMachine+0x162>
 80013a4:	2b02      	cmp	r3, #2
 80013a6:	f300 80de 	bgt.w	8001566 <FunctionStateMachine+0x1d2>
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d002      	beq.n	80013b4 <FunctionStateMachine+0x20>
 80013ae:	2b01      	cmp	r3, #1
 80013b0:	d035      	beq.n	800141e <FunctionStateMachine+0x8a>
 80013b2:	e0d8      	b.n	8001566 <FunctionStateMachine+0x1d2>
        case 0:
            OneWire_UARTInit(115200, huart_ow);
 80013b4:	4b70      	ldr	r3, [pc, #448]	; (8001578 <FunctionStateMachine+0x1e4>)
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	4619      	mov	r1, r3
 80013ba:	f44f 30e1 	mov.w	r0, #115200	; 0x1c200
 80013be:	f7ff fde1 	bl	8000f84 <OneWire_UARTInit>
            for (uint8_t i=0;i<8;i++)
 80013c2:	2300      	movs	r3, #0
 80013c4:	71fb      	strb	r3, [r7, #7]
 80013c6:	e012      	b.n	80013ee <FunctionStateMachine+0x5a>
                internal_Buffer[i]=((state.Function_Command>>i)&0x01)?0xff:0x00;
 80013c8:	4b6a      	ldr	r3, [pc, #424]	; (8001574 <FunctionStateMachine+0x1e0>)
 80013ca:	789b      	ldrb	r3, [r3, #2]
 80013cc:	461a      	mov	r2, r3
 80013ce:	79fb      	ldrb	r3, [r7, #7]
 80013d0:	fa42 f303 	asr.w	r3, r2, r3
 80013d4:	f003 0301 	and.w	r3, r3, #1
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d001      	beq.n	80013e0 <FunctionStateMachine+0x4c>
 80013dc:	21ff      	movs	r1, #255	; 0xff
 80013de:	e000      	b.n	80013e2 <FunctionStateMachine+0x4e>
 80013e0:	2100      	movs	r1, #0
 80013e2:	79fb      	ldrb	r3, [r7, #7]
 80013e4:	4a65      	ldr	r2, [pc, #404]	; (800157c <FunctionStateMachine+0x1e8>)
 80013e6:	54d1      	strb	r1, [r2, r3]
            for (uint8_t i=0;i<8;i++)
 80013e8:	79fb      	ldrb	r3, [r7, #7]
 80013ea:	3301      	adds	r3, #1
 80013ec:	71fb      	strb	r3, [r7, #7]
 80013ee:	79fb      	ldrb	r3, [r7, #7]
 80013f0:	2b07      	cmp	r3, #7
 80013f2:	d9e9      	bls.n	80013c8 <FunctionStateMachine+0x34>
            HAL_UART_Transmit_DMA(huart_ow,&(internal_Buffer[0]),8);
 80013f4:	4b60      	ldr	r3, [pc, #384]	; (8001578 <FunctionStateMachine+0x1e4>)
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	2208      	movs	r2, #8
 80013fa:	4960      	ldr	r1, [pc, #384]	; (800157c <FunctionStateMachine+0x1e8>)
 80013fc:	4618      	mov	r0, r3
 80013fe:	f003 fb93 	bl	8004b28 <HAL_UART_Transmit_DMA>
            HAL_UART_Receive_DMA(huart_ow, &(internal_Buffer[0]),8);
 8001402:	4b5d      	ldr	r3, [pc, #372]	; (8001578 <FunctionStateMachine+0x1e4>)
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	2208      	movs	r2, #8
 8001408:	495c      	ldr	r1, [pc, #368]	; (800157c <FunctionStateMachine+0x1e8>)
 800140a:	4618      	mov	r0, r3
 800140c:	f003 fbf8 	bl	8004c00 <HAL_UART_Receive_DMA>
            state.Function++;
 8001410:	4b58      	ldr	r3, [pc, #352]	; (8001574 <FunctionStateMachine+0x1e0>)
 8001412:	7edb      	ldrb	r3, [r3, #27]
 8001414:	3301      	adds	r3, #1
 8001416:	b2da      	uxtb	r2, r3
 8001418:	4b56      	ldr	r3, [pc, #344]	; (8001574 <FunctionStateMachine+0x1e0>)
 800141a:	76da      	strb	r2, [r3, #27]
//            if (state.Function_TxCount != 0)
            break;
 800141c:	e0a3      	b.n	8001566 <FunctionStateMachine+0x1d2>
        case 1: // continue by sending necessary Tx buffer
            if (state.Function_TxCount!=0){
 800141e:	4b55      	ldr	r3, [pc, #340]	; (8001574 <FunctionStateMachine+0x1e0>)
 8001420:	7e1b      	ldrb	r3, [r3, #24]
 8001422:	2b00      	cmp	r3, #0
 8001424:	d03b      	beq.n	800149e <FunctionStateMachine+0x10a>
                for (uint8_t i=0;i<state.Function_TxCount;i++)
 8001426:	2300      	movs	r3, #0
 8001428:	71bb      	strb	r3, [r7, #6]
 800142a:	e021      	b.n	8001470 <FunctionStateMachine+0xdc>
                    for (uint8_t j=0;j<8;j++)
 800142c:	2300      	movs	r3, #0
 800142e:	717b      	strb	r3, [r7, #5]
 8001430:	e018      	b.n	8001464 <FunctionStateMachine+0xd0>
                        internal_Buffer[i*8+j]=((state.Function_TxBuffer[i]>>j)&0x01)?0xff:0x00;
 8001432:	4b50      	ldr	r3, [pc, #320]	; (8001574 <FunctionStateMachine+0x1e0>)
 8001434:	691a      	ldr	r2, [r3, #16]
 8001436:	79bb      	ldrb	r3, [r7, #6]
 8001438:	4413      	add	r3, r2
 800143a:	781b      	ldrb	r3, [r3, #0]
 800143c:	461a      	mov	r2, r3
 800143e:	797b      	ldrb	r3, [r7, #5]
 8001440:	fa42 f303 	asr.w	r3, r2, r3
 8001444:	f003 0301 	and.w	r3, r3, #1
 8001448:	2b00      	cmp	r3, #0
 800144a:	d001      	beq.n	8001450 <FunctionStateMachine+0xbc>
 800144c:	21ff      	movs	r1, #255	; 0xff
 800144e:	e000      	b.n	8001452 <FunctionStateMachine+0xbe>
 8001450:	2100      	movs	r1, #0
 8001452:	79bb      	ldrb	r3, [r7, #6]
 8001454:	00da      	lsls	r2, r3, #3
 8001456:	797b      	ldrb	r3, [r7, #5]
 8001458:	4413      	add	r3, r2
 800145a:	4a48      	ldr	r2, [pc, #288]	; (800157c <FunctionStateMachine+0x1e8>)
 800145c:	54d1      	strb	r1, [r2, r3]
                    for (uint8_t j=0;j<8;j++)
 800145e:	797b      	ldrb	r3, [r7, #5]
 8001460:	3301      	adds	r3, #1
 8001462:	717b      	strb	r3, [r7, #5]
 8001464:	797b      	ldrb	r3, [r7, #5]
 8001466:	2b07      	cmp	r3, #7
 8001468:	d9e3      	bls.n	8001432 <FunctionStateMachine+0x9e>
                for (uint8_t i=0;i<state.Function_TxCount;i++)
 800146a:	79bb      	ldrb	r3, [r7, #6]
 800146c:	3301      	adds	r3, #1
 800146e:	71bb      	strb	r3, [r7, #6]
 8001470:	4b40      	ldr	r3, [pc, #256]	; (8001574 <FunctionStateMachine+0x1e0>)
 8001472:	7e1b      	ldrb	r3, [r3, #24]
 8001474:	79ba      	ldrb	r2, [r7, #6]
 8001476:	429a      	cmp	r2, r3
 8001478:	d3d8      	bcc.n	800142c <FunctionStateMachine+0x98>
                HAL_UART_Transmit_DMA(huart_ow,&(internal_Buffer[0]),state.Function_TxCount*8);
 800147a:	4b3f      	ldr	r3, [pc, #252]	; (8001578 <FunctionStateMachine+0x1e4>)
 800147c:	6818      	ldr	r0, [r3, #0]
 800147e:	4b3d      	ldr	r3, [pc, #244]	; (8001574 <FunctionStateMachine+0x1e0>)
 8001480:	7e1b      	ldrb	r3, [r3, #24]
 8001482:	b29b      	uxth	r3, r3
 8001484:	00db      	lsls	r3, r3, #3
 8001486:	b29b      	uxth	r3, r3
 8001488:	461a      	mov	r2, r3
 800148a:	493c      	ldr	r1, [pc, #240]	; (800157c <FunctionStateMachine+0x1e8>)
 800148c:	f003 fb4c 	bl	8004b28 <HAL_UART_Transmit_DMA>
                //HAL_UART_Receive_DMA(huart_ow,&(internal_Buffer[0]),state.Function_TxCount*8);
                state.Function++;
 8001490:	4b38      	ldr	r3, [pc, #224]	; (8001574 <FunctionStateMachine+0x1e0>)
 8001492:	7edb      	ldrb	r3, [r3, #27]
 8001494:	3301      	adds	r3, #1
 8001496:	b2da      	uxtb	r2, r3
 8001498:	4b36      	ldr	r3, [pc, #216]	; (8001574 <FunctionStateMachine+0x1e0>)
 800149a:	76da      	strb	r2, [r3, #27]
                break;
 800149c:	e063      	b.n	8001566 <FunctionStateMachine+0x1d2>
            }
            if (state.Function_RxCount!=0){
 800149e:	4b35      	ldr	r3, [pc, #212]	; (8001574 <FunctionStateMachine+0x1e0>)
 80014a0:	7e5b      	ldrb	r3, [r3, #25]
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d021      	beq.n	80014ea <FunctionStateMachine+0x156>
                for (uint8_t i=0;i<=state.Function_RxCount*8;i++)
 80014a6:	2300      	movs	r3, #0
 80014a8:	713b      	strb	r3, [r7, #4]
 80014aa:	e006      	b.n	80014ba <FunctionStateMachine+0x126>
                    internal_Buffer[i]=0xff;
 80014ac:	793b      	ldrb	r3, [r7, #4]
 80014ae:	4a33      	ldr	r2, [pc, #204]	; (800157c <FunctionStateMachine+0x1e8>)
 80014b0:	21ff      	movs	r1, #255	; 0xff
 80014b2:	54d1      	strb	r1, [r2, r3]
                for (uint8_t i=0;i<=state.Function_RxCount*8;i++)
 80014b4:	793b      	ldrb	r3, [r7, #4]
 80014b6:	3301      	adds	r3, #1
 80014b8:	713b      	strb	r3, [r7, #4]
 80014ba:	793a      	ldrb	r2, [r7, #4]
 80014bc:	4b2d      	ldr	r3, [pc, #180]	; (8001574 <FunctionStateMachine+0x1e0>)
 80014be:	7e5b      	ldrb	r3, [r3, #25]
 80014c0:	00db      	lsls	r3, r3, #3
 80014c2:	429a      	cmp	r2, r3
 80014c4:	ddf2      	ble.n	80014ac <FunctionStateMachine+0x118>
                //HAL_UART_Transmit_DMA(huart_ow,&(internal_Buffer[0]),8);//state.Function_RxCount*8);
                HAL_UART_Receive_DMA(huart_ow,&(internal_Buffer[0]),state.Function_RxCount*8);
 80014c6:	4b2c      	ldr	r3, [pc, #176]	; (8001578 <FunctionStateMachine+0x1e4>)
 80014c8:	6818      	ldr	r0, [r3, #0]
 80014ca:	4b2a      	ldr	r3, [pc, #168]	; (8001574 <FunctionStateMachine+0x1e0>)
 80014cc:	7e5b      	ldrb	r3, [r3, #25]
 80014ce:	b29b      	uxth	r3, r3
 80014d0:	00db      	lsls	r3, r3, #3
 80014d2:	b29b      	uxth	r3, r3
 80014d4:	461a      	mov	r2, r3
 80014d6:	4929      	ldr	r1, [pc, #164]	; (800157c <FunctionStateMachine+0x1e8>)
 80014d8:	f003 fb92 	bl	8004c00 <HAL_UART_Receive_DMA>
                state.Function++;
 80014dc:	4b25      	ldr	r3, [pc, #148]	; (8001574 <FunctionStateMachine+0x1e0>)
 80014de:	7edb      	ldrb	r3, [r3, #27]
 80014e0:	3301      	adds	r3, #1
 80014e2:	b2da      	uxtb	r2, r3
 80014e4:	4b23      	ldr	r3, [pc, #140]	; (8001574 <FunctionStateMachine+0x1e0>)
 80014e6:	76da      	strb	r2, [r3, #27]
                break;
 80014e8:	e03d      	b.n	8001566 <FunctionStateMachine+0x1d2>
            }
            state.Function++;
 80014ea:	4b22      	ldr	r3, [pc, #136]	; (8001574 <FunctionStateMachine+0x1e0>)
 80014ec:	7edb      	ldrb	r3, [r3, #27]
 80014ee:	3301      	adds	r3, #1
 80014f0:	b2da      	uxtb	r2, r3
 80014f2:	4b20      	ldr	r3, [pc, #128]	; (8001574 <FunctionStateMachine+0x1e0>)
 80014f4:	76da      	strb	r2, [r3, #27]
        case 2:
        	if (state.Function_RxCount!=0){
 80014f6:	4b1f      	ldr	r3, [pc, #124]	; (8001574 <FunctionStateMachine+0x1e0>)
 80014f8:	7e5b      	ldrb	r3, [r3, #25]
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d02f      	beq.n	800155e <FunctionStateMachine+0x1ca>
        		for (uint8_t i=0;i<state.Function_RxCount;i++)
 80014fe:	2300      	movs	r3, #0
 8001500:	70fb      	strb	r3, [r7, #3]
 8001502:	e027      	b.n	8001554 <FunctionStateMachine+0x1c0>
        			for (uint8_t j=0;j<8;j++)
 8001504:	2300      	movs	r3, #0
 8001506:	70bb      	strb	r3, [r7, #2]
 8001508:	e01e      	b.n	8001548 <FunctionStateMachine+0x1b4>
        				state.Function_RxBuffer[i]=state.Function_RxBuffer[i]+
 800150a:	4b1a      	ldr	r3, [pc, #104]	; (8001574 <FunctionStateMachine+0x1e0>)
 800150c:	695a      	ldr	r2, [r3, #20]
 800150e:	78fb      	ldrb	r3, [r7, #3]
 8001510:	4413      	add	r3, r2
 8001512:	7819      	ldrb	r1, [r3, #0]
							(((internal_Buffer[i*8+j]==0xff)?0x01:0x00)<<j);
 8001514:	78fb      	ldrb	r3, [r7, #3]
 8001516:	00da      	lsls	r2, r3, #3
 8001518:	78bb      	ldrb	r3, [r7, #2]
 800151a:	4413      	add	r3, r2
 800151c:	4a17      	ldr	r2, [pc, #92]	; (800157c <FunctionStateMachine+0x1e8>)
 800151e:	5cd3      	ldrb	r3, [r2, r3]
 8001520:	2bff      	cmp	r3, #255	; 0xff
 8001522:	bf0c      	ite	eq
 8001524:	2301      	moveq	r3, #1
 8001526:	2300      	movne	r3, #0
 8001528:	b2db      	uxtb	r3, r3
 800152a:	461a      	mov	r2, r3
 800152c:	78bb      	ldrb	r3, [r7, #2]
 800152e:	fa02 f303 	lsl.w	r3, r2, r3
        				state.Function_RxBuffer[i]=state.Function_RxBuffer[i]+
 8001532:	b2da      	uxtb	r2, r3
 8001534:	4b0f      	ldr	r3, [pc, #60]	; (8001574 <FunctionStateMachine+0x1e0>)
 8001536:	6958      	ldr	r0, [r3, #20]
 8001538:	78fb      	ldrb	r3, [r7, #3]
 800153a:	4403      	add	r3, r0
 800153c:	440a      	add	r2, r1
 800153e:	b2d2      	uxtb	r2, r2
 8001540:	701a      	strb	r2, [r3, #0]
        			for (uint8_t j=0;j<8;j++)
 8001542:	78bb      	ldrb	r3, [r7, #2]
 8001544:	3301      	adds	r3, #1
 8001546:	70bb      	strb	r3, [r7, #2]
 8001548:	78bb      	ldrb	r3, [r7, #2]
 800154a:	2b07      	cmp	r3, #7
 800154c:	d9dd      	bls.n	800150a <FunctionStateMachine+0x176>
        		for (uint8_t i=0;i<state.Function_RxCount;i++)
 800154e:	78fb      	ldrb	r3, [r7, #3]
 8001550:	3301      	adds	r3, #1
 8001552:	70fb      	strb	r3, [r7, #3]
 8001554:	4b07      	ldr	r3, [pc, #28]	; (8001574 <FunctionStateMachine+0x1e0>)
 8001556:	7e5b      	ldrb	r3, [r3, #25]
 8001558:	78fa      	ldrb	r2, [r7, #3]
 800155a:	429a      	cmp	r2, r3
 800155c:	d3d2      	bcc.n	8001504 <FunctionStateMachine+0x170>
        	}
            state.Function=0;
 800155e:	4b05      	ldr	r3, [pc, #20]	; (8001574 <FunctionStateMachine+0x1e0>)
 8001560:	2200      	movs	r2, #0
 8001562:	76da      	strb	r2, [r3, #27]
            break;
 8001564:	bf00      	nop
    	}
    return state.Function;
 8001566:	4b03      	ldr	r3, [pc, #12]	; (8001574 <FunctionStateMachine+0x1e0>)
 8001568:	7edb      	ldrb	r3, [r3, #27]
}
 800156a:	4618      	mov	r0, r3
 800156c:	3708      	adds	r7, #8
 800156e:	46bd      	mov	sp, r7
 8001570:	bd80      	pop	{r7, pc}
 8001572:	bf00      	nop
 8001574:	20000204 	.word	0x20000204
 8001578:	2000026c 	.word	0x2000026c
 800157c:	20000220 	.word	0x20000220

08001580 <OneWire_Execute>:

void OneWire_Execute(uint8_t ROM_Command,uint8_t* ROM_Buffer,
				uint8_t Function_Command,uint8_t* Function_buffer){
 8001580:	b580      	push	{r7, lr}
 8001582:	b084      	sub	sp, #16
 8001584:	af00      	add	r7, sp, #0
 8001586:	60b9      	str	r1, [r7, #8]
 8001588:	607b      	str	r3, [r7, #4]
 800158a:	4603      	mov	r3, r0
 800158c:	73fb      	strb	r3, [r7, #15]
 800158e:	4613      	mov	r3, r2
 8001590:	73bb      	strb	r3, [r7, #14]
    memset(&(state),0,sizeof(State));
 8001592:	221c      	movs	r2, #28
 8001594:	2100      	movs	r1, #0
 8001596:	4828      	ldr	r0, [pc, #160]	; (8001638 <OneWire_Execute+0xb8>)
 8001598:	f004 f8c4 	bl	8005724 <memset>
    state.ROM_Command=ROM_Command;
 800159c:	4a26      	ldr	r2, [pc, #152]	; (8001638 <OneWire_Execute+0xb8>)
 800159e:	7bfb      	ldrb	r3, [r7, #15]
 80015a0:	7053      	strb	r3, [r2, #1]
    state.Function_Command=Function_Command;
 80015a2:	4a25      	ldr	r2, [pc, #148]	; (8001638 <OneWire_Execute+0xb8>)
 80015a4:	7bbb      	ldrb	r3, [r7, #14]
 80015a6:	7093      	strb	r3, [r2, #2]
    switch (ROM_Command){
 80015a8:	7bfb      	ldrb	r3, [r7, #15]
 80015aa:	2bcc      	cmp	r3, #204	; 0xcc
 80015ac:	d014      	beq.n	80015d8 <OneWire_Execute+0x58>
 80015ae:	2bcc      	cmp	r3, #204	; 0xcc
 80015b0:	dc13      	bgt.n	80015da <OneWire_Execute+0x5a>
 80015b2:	2b33      	cmp	r3, #51	; 0x33
 80015b4:	d002      	beq.n	80015bc <OneWire_Execute+0x3c>
 80015b6:	2b55      	cmp	r3, #85	; 0x55
 80015b8:	d007      	beq.n	80015ca <OneWire_Execute+0x4a>
 80015ba:	e00e      	b.n	80015da <OneWire_Execute+0x5a>
        case 0x33:  // Read ROM
            state.ROM_RxBuffer=ROM_Buffer;
 80015bc:	4a1e      	ldr	r2, [pc, #120]	; (8001638 <OneWire_Execute+0xb8>)
 80015be:	68bb      	ldr	r3, [r7, #8]
 80015c0:	6093      	str	r3, [r2, #8]
            state.ROM_RxCount=8; //8 byte
 80015c2:	4b1d      	ldr	r3, [pc, #116]	; (8001638 <OneWire_Execute+0xb8>)
 80015c4:	2208      	movs	r2, #8
 80015c6:	735a      	strb	r2, [r3, #13]
            break;
 80015c8:	e007      	b.n	80015da <OneWire_Execute+0x5a>
        case 0x55:  // Match ROM
            state.ROM_TxBuffer=ROM_Buffer;
 80015ca:	4a1b      	ldr	r2, [pc, #108]	; (8001638 <OneWire_Execute+0xb8>)
 80015cc:	68bb      	ldr	r3, [r7, #8]
 80015ce:	6053      	str	r3, [r2, #4]
            state.ROM_TxCount=8;
 80015d0:	4b19      	ldr	r3, [pc, #100]	; (8001638 <OneWire_Execute+0xb8>)
 80015d2:	2208      	movs	r2, #8
 80015d4:	731a      	strb	r2, [r3, #12]
            break;
 80015d6:	e000      	b.n	80015da <OneWire_Execute+0x5a>
        case 0xcc: break;  // Skip ROM
 80015d8:	bf00      	nop
    }
    switch (Function_Command){
 80015da:	7bbb      	ldrb	r3, [r7, #14]
 80015dc:	2bbe      	cmp	r3, #190	; 0xbe
 80015de:	d018      	beq.n	8001612 <OneWire_Execute+0x92>
 80015e0:	2bbe      	cmp	r3, #190	; 0xbe
 80015e2:	dc22      	bgt.n	800162a <OneWire_Execute+0xaa>
 80015e4:	2bb8      	cmp	r3, #184	; 0xb8
 80015e6:	d01b      	beq.n	8001620 <OneWire_Execute+0xa0>
 80015e8:	2bb8      	cmp	r3, #184	; 0xb8
 80015ea:	dc1e      	bgt.n	800162a <OneWire_Execute+0xaa>
 80015ec:	2bb4      	cmp	r3, #180	; 0xb4
 80015ee:	d019      	beq.n	8001624 <OneWire_Execute+0xa4>
 80015f0:	2bb4      	cmp	r3, #180	; 0xb4
 80015f2:	dc1a      	bgt.n	800162a <OneWire_Execute+0xaa>
 80015f4:	2b4e      	cmp	r3, #78	; 0x4e
 80015f6:	d005      	beq.n	8001604 <OneWire_Execute+0x84>
 80015f8:	2b4e      	cmp	r3, #78	; 0x4e
 80015fa:	dc16      	bgt.n	800162a <OneWire_Execute+0xaa>
 80015fc:	2b44      	cmp	r3, #68	; 0x44
 80015fe:	d013      	beq.n	8001628 <OneWire_Execute+0xa8>
 8001600:	2b48      	cmp	r3, #72	; 0x48
		// while the temperature is in progress read a 1 while the temperature is done.
        case 0x4e:  // Write Scratchpad
            state.Function_TxBuffer=Function_buffer;
            state.Function_TxCount=3;
            break;
        case 0x48: break; // Copy Scratchpad need to transmit nothing
 8001602:	e012      	b.n	800162a <OneWire_Execute+0xaa>
            state.Function_TxBuffer=Function_buffer;
 8001604:	4a0c      	ldr	r2, [pc, #48]	; (8001638 <OneWire_Execute+0xb8>)
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	6113      	str	r3, [r2, #16]
            state.Function_TxCount=3;
 800160a:	4b0b      	ldr	r3, [pc, #44]	; (8001638 <OneWire_Execute+0xb8>)
 800160c:	2203      	movs	r2, #3
 800160e:	761a      	strb	r2, [r3, #24]
            break;
 8001610:	e00b      	b.n	800162a <OneWire_Execute+0xaa>
        case 0xbe:  // Read Scratchpad
            state.Function_RxBuffer=Function_buffer;
 8001612:	4a09      	ldr	r2, [pc, #36]	; (8001638 <OneWire_Execute+0xb8>)
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	6153      	str	r3, [r2, #20]
            state.Function_RxCount=9;
 8001618:	4b07      	ldr	r3, [pc, #28]	; (8001638 <OneWire_Execute+0xb8>)
 800161a:	2209      	movs	r2, #9
 800161c:	765a      	strb	r2, [r3, #25]
            break;
 800161e:	e004      	b.n	800162a <OneWire_Execute+0xaa>
        case 0xb8: break;
 8001620:	bf00      	nop
 8001622:	e002      	b.n	800162a <OneWire_Execute+0xaa>
		// Recall EEPROM return transmit status to master 0 for in progress and 1 is for done.
        case 0xb4: break;
 8001624:	bf00      	nop
 8001626:	e000      	b.n	800162a <OneWire_Execute+0xaa>
        case 0x44: break;
 8001628:	bf00      	nop
		// read power supply only work for undetermined power supply status. so don't need to implement it
    }
    StateMachine();
 800162a:	f7ff fd4b 	bl	80010c4 <StateMachine>
}
 800162e:	bf00      	nop
 8001630:	3710      	adds	r7, #16
 8001632:	46bd      	mov	sp, r7
 8001634:	bd80      	pop	{r7, pc}
 8001636:	bf00      	nop
 8001638:	20000204 	.word	0x20000204

0800163c <OneWire_GetState>:

uint8_t OneWire_GetState() {
 800163c:	b480      	push	{r7}
 800163e:	af00      	add	r7, sp, #0
	return state.Reset;
 8001640:	4b02      	ldr	r3, [pc, #8]	; (800164c <OneWire_GetState+0x10>)
 8001642:	781b      	ldrb	r3, [r3, #0]
}
 8001644:	4618      	mov	r0, r3
 8001646:	46bd      	mov	sp, r7
 8001648:	bc80      	pop	{r7}
 800164a:	4770      	bx	lr
 800164c:	20000204 	.word	0x20000204

08001650 <DS18B20_TempFloat>:

float DS18B20_TempFloat(uint8_t scratchpad[]) {
 8001650:	b580      	push	{r7, lr}
 8001652:	b086      	sub	sp, #24
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]
	uint16_t tRegValue = (scratchpad[DS18B20_SCRATCHPAD_T_MSB_BYTE_IDX] << 8) | scratchpad[DS18B20_SCRATCHPAD_T_LSB_BYTE_IDX];
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	3301      	adds	r3, #1
 800165c:	781b      	ldrb	r3, [r3, #0]
 800165e:	021b      	lsls	r3, r3, #8
 8001660:	b21a      	sxth	r2, r3
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	781b      	ldrb	r3, [r3, #0]
 8001666:	b21b      	sxth	r3, r3
 8001668:	4313      	orrs	r3, r2
 800166a:	b21b      	sxth	r3, r3
 800166c:	82fb      	strh	r3, [r7, #22]
	uint16_t sign = tRegValue & DS18B20_SIGN_MASK;
 800166e:	8afb      	ldrh	r3, [r7, #22]
 8001670:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001674:	f023 0307 	bic.w	r3, r3, #7
 8001678:	81fb      	strh	r3, [r7, #14]

	if (sign != 0)
 800167a:	89fb      	ldrh	r3, [r7, #14]
 800167c:	2b00      	cmp	r3, #0
 800167e:	d002      	beq.n	8001686 <DS18B20_TempFloat+0x36>
	{
	  tRegValue = (0xFFFF - tRegValue + 1);
 8001680:	8afb      	ldrh	r3, [r7, #22]
 8001682:	425b      	negs	r3, r3
 8001684:	82fb      	strh	r3, [r7, #22]
	}

   	tRegValue &= DS18B20_12_BITS_DATA_MASK;
 8001686:	8afb      	ldrh	r3, [r7, #22]
 8001688:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800168c:	82fb      	strh	r3, [r7, #22]

	float temp = (float)tRegValue * DS18B20_T_STEP;
 800168e:	8afb      	ldrh	r3, [r7, #22]
 8001690:	4618      	mov	r0, r3
 8001692:	f7ff faaf 	bl	8000bf4 <__aeabi_ui2f>
 8001696:	4603      	mov	r3, r0
 8001698:	f04f 5176 	mov.w	r1, #1031798784	; 0x3d800000
 800169c:	4618      	mov	r0, r3
 800169e:	f7ff fb01 	bl	8000ca4 <__aeabi_fmul>
 80016a2:	4603      	mov	r3, r0
 80016a4:	613b      	str	r3, [r7, #16]

	if (sign != 0)
 80016a6:	89fb      	ldrh	r3, [r7, #14]
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d003      	beq.n	80016b4 <DS18B20_TempFloat+0x64>
	{
		temp *= (-1);
 80016ac:	693b      	ldr	r3, [r7, #16]
 80016ae:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80016b2:	613b      	str	r3, [r7, #16]
	}

	return temp;
 80016b4:	693b      	ldr	r3, [r7, #16]
}
 80016b6:	4618      	mov	r0, r3
 80016b8:	3718      	adds	r7, #24
 80016ba:	46bd      	mov	sp, r7
 80016bc:	bd80      	pop	{r7, pc}
	...

080016c0 <HAL_UART_TxCpltCallback>:
//    	HAL_SuspendTick();
//   	HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
}
*/

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b082      	sub	sp, #8
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
		if (huart->Instance == USART1){
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	4a04      	ldr	r2, [pc, #16]	; (80016e0 <HAL_UART_TxCpltCallback+0x20>)
 80016ce:	4293      	cmp	r3, r2
 80016d0:	d101      	bne.n	80016d6 <HAL_UART_TxCpltCallback+0x16>
			OneWire_TxCpltCallback();
 80016d2:	f7ff fceb 	bl	80010ac <OneWire_TxCpltCallback>
		}
}
 80016d6:	bf00      	nop
 80016d8:	3708      	adds	r7, #8
 80016da:	46bd      	mov	sp, r7
 80016dc:	bd80      	pop	{r7, pc}
 80016de:	bf00      	nop
 80016e0:	40013800 	.word	0x40013800

080016e4 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b082      	sub	sp, #8
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
		if (huart->Instance == USART1){
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	4a04      	ldr	r2, [pc, #16]	; (8001704 <HAL_UART_RxCpltCallback+0x20>)
 80016f2:	4293      	cmp	r3, r2
 80016f4:	d101      	bne.n	80016fa <HAL_UART_RxCpltCallback+0x16>
			OneWire_RxCpltCallback();
 80016f6:	f7ff fcdf 	bl	80010b8 <OneWire_RxCpltCallback>
		}
}
 80016fa:	bf00      	nop
 80016fc:	3708      	adds	r7, #8
 80016fe:	46bd      	mov	sp, r7
 8001700:	bd80      	pop	{r7, pc}
 8001702:	bf00      	nop
 8001704:	40013800 	.word	0x40013800

08001708 <OneWire_OnErr>:

void OneWire_OnErr() {
 8001708:	b580      	push	{r7, lr}
 800170a:	af00      	add	r7, sp, #0
	ssd1306_SetCursor(0, 0);
 800170c:	2100      	movs	r1, #0
 800170e:	2000      	movs	r0, #0
 8001710:	f000 fbbe 	bl	8001e90 <ssd1306_SetCursor>
	if(!blink)
 8001714:	4b0d      	ldr	r3, [pc, #52]	; (800174c <OneWire_OnErr+0x44>)
 8001716:	781b      	ldrb	r3, [r3, #0]
 8001718:	2b00      	cmp	r3, #0
 800171a:	d106      	bne.n	800172a <OneWire_OnErr+0x22>
		ssd1306_WriteString("ERROR", Font_7x10, White);
 800171c:	4a0c      	ldr	r2, [pc, #48]	; (8001750 <OneWire_OnErr+0x48>)
 800171e:	2301      	movs	r3, #1
 8001720:	ca06      	ldmia	r2, {r1, r2}
 8001722:	480c      	ldr	r0, [pc, #48]	; (8001754 <OneWire_OnErr+0x4c>)
 8001724:	f000 fb8e 	bl	8001e44 <ssd1306_WriteString>
 8001728:	e005      	b.n	8001736 <OneWire_OnErr+0x2e>
	else
		ssd1306_WriteString("     ", Font_7x10, White);
 800172a:	4a09      	ldr	r2, [pc, #36]	; (8001750 <OneWire_OnErr+0x48>)
 800172c:	2301      	movs	r3, #1
 800172e:	ca06      	ldmia	r2, {r1, r2}
 8001730:	4809      	ldr	r0, [pc, #36]	; (8001758 <OneWire_OnErr+0x50>)
 8001732:	f000 fb87 	bl	8001e44 <ssd1306_WriteString>
	blink = ~blink;
 8001736:	4b05      	ldr	r3, [pc, #20]	; (800174c <OneWire_OnErr+0x44>)
 8001738:	781b      	ldrb	r3, [r3, #0]
 800173a:	43db      	mvns	r3, r3
 800173c:	b2da      	uxtb	r2, r3
 800173e:	4b03      	ldr	r3, [pc, #12]	; (800174c <OneWire_OnErr+0x44>)
 8001740:	701a      	strb	r2, [r3, #0]
	ssd1306_UpdateScreen();
 8001742:	f000 fa7d 	bl	8001c40 <ssd1306_UpdateScreen>
}
 8001746:	bf00      	nop
 8001748:	bd80      	pop	{r7, pc}
 800174a:	bf00      	nop
 800174c:	200003f4 	.word	0x200003f4
 8001750:	20000004 	.word	0x20000004
 8001754:	080084b0 	.word	0x080084b0
 8001758:	080084b8 	.word	0x080084b8

0800175c <OneWire_OnOk>:

void OneWire_OnOk() {
 800175c:	b580      	push	{r7, lr}
 800175e:	af00      	add	r7, sp, #0
	ssd1306_SetCursor(0, 0);
 8001760:	2100      	movs	r1, #0
 8001762:	2000      	movs	r0, #0
 8001764:	f000 fb94 	bl	8001e90 <ssd1306_SetCursor>
	if(!blink)
 8001768:	4b0d      	ldr	r3, [pc, #52]	; (80017a0 <OneWire_OnOk+0x44>)
 800176a:	781b      	ldrb	r3, [r3, #0]
 800176c:	2b00      	cmp	r3, #0
 800176e:	d106      	bne.n	800177e <OneWire_OnOk+0x22>
		ssd1306_WriteString("OK   ", Font_7x10, White);
 8001770:	4a0c      	ldr	r2, [pc, #48]	; (80017a4 <OneWire_OnOk+0x48>)
 8001772:	2301      	movs	r3, #1
 8001774:	ca06      	ldmia	r2, {r1, r2}
 8001776:	480c      	ldr	r0, [pc, #48]	; (80017a8 <OneWire_OnOk+0x4c>)
 8001778:	f000 fb64 	bl	8001e44 <ssd1306_WriteString>
 800177c:	e005      	b.n	800178a <OneWire_OnOk+0x2e>
	else
		ssd1306_WriteString("     ", Font_7x10, White);
 800177e:	4a09      	ldr	r2, [pc, #36]	; (80017a4 <OneWire_OnOk+0x48>)
 8001780:	2301      	movs	r3, #1
 8001782:	ca06      	ldmia	r2, {r1, r2}
 8001784:	4809      	ldr	r0, [pc, #36]	; (80017ac <OneWire_OnOk+0x50>)
 8001786:	f000 fb5d 	bl	8001e44 <ssd1306_WriteString>
	blink = ~blink;
 800178a:	4b05      	ldr	r3, [pc, #20]	; (80017a0 <OneWire_OnOk+0x44>)
 800178c:	781b      	ldrb	r3, [r3, #0]
 800178e:	43db      	mvns	r3, r3
 8001790:	b2da      	uxtb	r2, r3
 8001792:	4b03      	ldr	r3, [pc, #12]	; (80017a0 <OneWire_OnOk+0x44>)
 8001794:	701a      	strb	r2, [r3, #0]
	ssd1306_UpdateScreen();
 8001796:	f000 fa53 	bl	8001c40 <ssd1306_UpdateScreen>
}
 800179a:	bf00      	nop
 800179c:	bd80      	pop	{r7, pc}
 800179e:	bf00      	nop
 80017a0:	200003f4 	.word	0x200003f4
 80017a4:	20000004 	.word	0x20000004
 80017a8:	080084c0 	.word	0x080084c0
 80017ac:	080084b8 	.word	0x080084b8

080017b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80017b4:	f000 fe64 	bl	8002480 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80017b8:	f000 f822 	bl	8001800 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80017bc:	f000 f948 	bl	8001a50 <MX_GPIO_Init>
  MX_I2C1_Init();
 80017c0:	f000 f864 	bl	800188c <MX_I2C1_Init>
  MX_DMA_Init();
 80017c4:	f000 f91e 	bl	8001a04 <MX_DMA_Init>
  MX_TIM2_Init();
 80017c8:	f000 f88e 	bl	80018e8 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 80017cc:	f000 f8f0 	bl	80019b0 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_UART_MspInit(&huart1);
 80017d0:	4807      	ldr	r0, [pc, #28]	; (80017f0 <main+0x40>)
 80017d2:	f000 fc3b 	bl	800204c <HAL_UART_MspInit>

  ssd1306_Init();
 80017d6:	f000 f9a7 	bl	8001b28 <ssd1306_Init>
  OneWire_Init(&huart1);
 80017da:	4805      	ldr	r0, [pc, #20]	; (80017f0 <main+0x40>)
 80017dc:	f7ff fbc4 	bl	8000f68 <OneWire_Init>
  OneWire_SetCallback(OneWire_OnOk, OneWire_OnErr);
 80017e0:	4904      	ldr	r1, [pc, #16]	; (80017f4 <main+0x44>)
 80017e2:	4805      	ldr	r0, [pc, #20]	; (80017f8 <main+0x48>)
 80017e4:	f7ff fbae 	bl	8000f44 <OneWire_SetCallback>

  HAL_TIM_Base_Start_IT(&htim2);
 80017e8:	4804      	ldr	r0, [pc, #16]	; (80017fc <main+0x4c>)
 80017ea:	f002 fcc3 	bl	8004174 <HAL_TIM_Base_Start_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80017ee:	e7fe      	b.n	80017ee <main+0x3e>
 80017f0:	20000314 	.word	0x20000314
 80017f4:	08001709 	.word	0x08001709
 80017f8:	0800175d 	.word	0x0800175d
 80017fc:	200002cc 	.word	0x200002cc

08001800 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	b090      	sub	sp, #64	; 0x40
 8001804:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001806:	f107 0318 	add.w	r3, r7, #24
 800180a:	2228      	movs	r2, #40	; 0x28
 800180c:	2100      	movs	r1, #0
 800180e:	4618      	mov	r0, r3
 8001810:	f003 ff88 	bl	8005724 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001814:	1d3b      	adds	r3, r7, #4
 8001816:	2200      	movs	r2, #0
 8001818:	601a      	str	r2, [r3, #0]
 800181a:	605a      	str	r2, [r3, #4]
 800181c:	609a      	str	r2, [r3, #8]
 800181e:	60da      	str	r2, [r3, #12]
 8001820:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001822:	2301      	movs	r3, #1
 8001824:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001826:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800182a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800182c:	2300      	movs	r3, #0
 800182e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001830:	2301      	movs	r3, #1
 8001832:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001834:	2302      	movs	r3, #2
 8001836:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001838:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800183c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800183e:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001842:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001844:	f107 0318 	add.w	r3, r7, #24
 8001848:	4618      	mov	r0, r3
 800184a:	f002 f829 	bl	80038a0 <HAL_RCC_OscConfig>
 800184e:	4603      	mov	r3, r0
 8001850:	2b00      	cmp	r3, #0
 8001852:	d001      	beq.n	8001858 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8001854:	f000 f92a 	bl	8001aac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001858:	230f      	movs	r3, #15
 800185a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800185c:	2302      	movs	r3, #2
 800185e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001860:	2300      	movs	r3, #0
 8001862:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001864:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001868:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800186a:	2300      	movs	r3, #0
 800186c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800186e:	1d3b      	adds	r3, r7, #4
 8001870:	2102      	movs	r1, #2
 8001872:	4618      	mov	r0, r3
 8001874:	f002 fa96 	bl	8003da4 <HAL_RCC_ClockConfig>
 8001878:	4603      	mov	r3, r0
 800187a:	2b00      	cmp	r3, #0
 800187c:	d001      	beq.n	8001882 <SystemClock_Config+0x82>
  {
    Error_Handler();
 800187e:	f000 f915 	bl	8001aac <Error_Handler>
  }
}
 8001882:	bf00      	nop
 8001884:	3740      	adds	r7, #64	; 0x40
 8001886:	46bd      	mov	sp, r7
 8001888:	bd80      	pop	{r7, pc}
	...

0800188c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001890:	4b12      	ldr	r3, [pc, #72]	; (80018dc <MX_I2C1_Init+0x50>)
 8001892:	4a13      	ldr	r2, [pc, #76]	; (80018e0 <MX_I2C1_Init+0x54>)
 8001894:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001896:	4b11      	ldr	r3, [pc, #68]	; (80018dc <MX_I2C1_Init+0x50>)
 8001898:	4a12      	ldr	r2, [pc, #72]	; (80018e4 <MX_I2C1_Init+0x58>)
 800189a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800189c:	4b0f      	ldr	r3, [pc, #60]	; (80018dc <MX_I2C1_Init+0x50>)
 800189e:	2200      	movs	r2, #0
 80018a0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80018a2:	4b0e      	ldr	r3, [pc, #56]	; (80018dc <MX_I2C1_Init+0x50>)
 80018a4:	2200      	movs	r2, #0
 80018a6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80018a8:	4b0c      	ldr	r3, [pc, #48]	; (80018dc <MX_I2C1_Init+0x50>)
 80018aa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80018ae:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80018b0:	4b0a      	ldr	r3, [pc, #40]	; (80018dc <MX_I2C1_Init+0x50>)
 80018b2:	2200      	movs	r2, #0
 80018b4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80018b6:	4b09      	ldr	r3, [pc, #36]	; (80018dc <MX_I2C1_Init+0x50>)
 80018b8:	2200      	movs	r2, #0
 80018ba:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80018bc:	4b07      	ldr	r3, [pc, #28]	; (80018dc <MX_I2C1_Init+0x50>)
 80018be:	2200      	movs	r2, #0
 80018c0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80018c2:	4b06      	ldr	r3, [pc, #24]	; (80018dc <MX_I2C1_Init+0x50>)
 80018c4:	2200      	movs	r2, #0
 80018c6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80018c8:	4804      	ldr	r0, [pc, #16]	; (80018dc <MX_I2C1_Init+0x50>)
 80018ca:	f001 fb8f 	bl	8002fec <HAL_I2C_Init>
 80018ce:	4603      	mov	r3, r0
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d001      	beq.n	80018d8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80018d4:	f000 f8ea 	bl	8001aac <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80018d8:	bf00      	nop
 80018da:	bd80      	pop	{r7, pc}
 80018dc:	20000278 	.word	0x20000278
 80018e0:	40005400 	.word	0x40005400
 80018e4:	000186a0 	.word	0x000186a0

080018e8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b08c      	sub	sp, #48	; 0x30
 80018ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80018ee:	f107 0320 	add.w	r3, r7, #32
 80018f2:	2200      	movs	r2, #0
 80018f4:	601a      	str	r2, [r3, #0]
 80018f6:	605a      	str	r2, [r3, #4]
 80018f8:	609a      	str	r2, [r3, #8]
 80018fa:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80018fc:	f107 030c 	add.w	r3, r7, #12
 8001900:	2200      	movs	r2, #0
 8001902:	601a      	str	r2, [r3, #0]
 8001904:	605a      	str	r2, [r3, #4]
 8001906:	609a      	str	r2, [r3, #8]
 8001908:	60da      	str	r2, [r3, #12]
 800190a:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800190c:	1d3b      	adds	r3, r7, #4
 800190e:	2200      	movs	r2, #0
 8001910:	601a      	str	r2, [r3, #0]
 8001912:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001914:	4b25      	ldr	r3, [pc, #148]	; (80019ac <MX_TIM2_Init+0xc4>)
 8001916:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800191a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 2879;
 800191c:	4b23      	ldr	r3, [pc, #140]	; (80019ac <MX_TIM2_Init+0xc4>)
 800191e:	f640 323f 	movw	r2, #2879	; 0xb3f
 8001922:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001924:	4b21      	ldr	r3, [pc, #132]	; (80019ac <MX_TIM2_Init+0xc4>)
 8001926:	2200      	movs	r2, #0
 8001928:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 49999;
 800192a:	4b20      	ldr	r3, [pc, #128]	; (80019ac <MX_TIM2_Init+0xc4>)
 800192c:	f24c 324f 	movw	r2, #49999	; 0xc34f
 8001930:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001932:	4b1e      	ldr	r3, [pc, #120]	; (80019ac <MX_TIM2_Init+0xc4>)
 8001934:	2200      	movs	r2, #0
 8001936:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001938:	4b1c      	ldr	r3, [pc, #112]	; (80019ac <MX_TIM2_Init+0xc4>)
 800193a:	2200      	movs	r2, #0
 800193c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800193e:	481b      	ldr	r0, [pc, #108]	; (80019ac <MX_TIM2_Init+0xc4>)
 8001940:	f002 fbc8 	bl	80040d4 <HAL_TIM_Base_Init>
 8001944:	4603      	mov	r3, r0
 8001946:	2b00      	cmp	r3, #0
 8001948:	d001      	beq.n	800194e <MX_TIM2_Init+0x66>
  {
    Error_Handler();
 800194a:	f000 f8af 	bl	8001aac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800194e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001952:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001954:	f107 0320 	add.w	r3, r7, #32
 8001958:	4619      	mov	r1, r3
 800195a:	4814      	ldr	r0, [pc, #80]	; (80019ac <MX_TIM2_Init+0xc4>)
 800195c:	f002 fd64 	bl	8004428 <HAL_TIM_ConfigClockSource>
 8001960:	4603      	mov	r3, r0
 8001962:	2b00      	cmp	r3, #0
 8001964:	d001      	beq.n	800196a <MX_TIM2_Init+0x82>
  {
    Error_Handler();
 8001966:	f000 f8a1 	bl	8001aac <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_DISABLE;
 800196a:	2300      	movs	r3, #0
 800196c:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 800196e:	2300      	movs	r3, #0
 8001970:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 8001972:	f107 030c 	add.w	r3, r7, #12
 8001976:	4619      	mov	r1, r3
 8001978:	480c      	ldr	r0, [pc, #48]	; (80019ac <MX_TIM2_Init+0xc4>)
 800197a:	f002 fe19 	bl	80045b0 <HAL_TIM_SlaveConfigSynchro>
 800197e:	4603      	mov	r3, r0
 8001980:	2b00      	cmp	r3, #0
 8001982:	d001      	beq.n	8001988 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 8001984:	f000 f892 	bl	8001aac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001988:	2300      	movs	r3, #0
 800198a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800198c:	2300      	movs	r3, #0
 800198e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001990:	1d3b      	adds	r3, r7, #4
 8001992:	4619      	mov	r1, r3
 8001994:	4805      	ldr	r0, [pc, #20]	; (80019ac <MX_TIM2_Init+0xc4>)
 8001996:	f003 f801 	bl	800499c <HAL_TIMEx_MasterConfigSynchronization>
 800199a:	4603      	mov	r3, r0
 800199c:	2b00      	cmp	r3, #0
 800199e:	d001      	beq.n	80019a4 <MX_TIM2_Init+0xbc>
  {
    Error_Handler();
 80019a0:	f000 f884 	bl	8001aac <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80019a4:	bf00      	nop
 80019a6:	3730      	adds	r7, #48	; 0x30
 80019a8:	46bd      	mov	sp, r7
 80019aa:	bd80      	pop	{r7, pc}
 80019ac:	200002cc 	.word	0x200002cc

080019b0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80019b4:	4b11      	ldr	r3, [pc, #68]	; (80019fc <MX_USART1_UART_Init+0x4c>)
 80019b6:	4a12      	ldr	r2, [pc, #72]	; (8001a00 <MX_USART1_UART_Init+0x50>)
 80019b8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80019ba:	4b10      	ldr	r3, [pc, #64]	; (80019fc <MX_USART1_UART_Init+0x4c>)
 80019bc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80019c0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80019c2:	4b0e      	ldr	r3, [pc, #56]	; (80019fc <MX_USART1_UART_Init+0x4c>)
 80019c4:	2200      	movs	r2, #0
 80019c6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80019c8:	4b0c      	ldr	r3, [pc, #48]	; (80019fc <MX_USART1_UART_Init+0x4c>)
 80019ca:	2200      	movs	r2, #0
 80019cc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80019ce:	4b0b      	ldr	r3, [pc, #44]	; (80019fc <MX_USART1_UART_Init+0x4c>)
 80019d0:	2200      	movs	r2, #0
 80019d2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80019d4:	4b09      	ldr	r3, [pc, #36]	; (80019fc <MX_USART1_UART_Init+0x4c>)
 80019d6:	220c      	movs	r2, #12
 80019d8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80019da:	4b08      	ldr	r3, [pc, #32]	; (80019fc <MX_USART1_UART_Init+0x4c>)
 80019dc:	2200      	movs	r2, #0
 80019de:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80019e0:	4b06      	ldr	r3, [pc, #24]	; (80019fc <MX_USART1_UART_Init+0x4c>)
 80019e2:	2200      	movs	r2, #0
 80019e4:	61da      	str	r2, [r3, #28]
  if (HAL_HalfDuplex_Init(&huart1) != HAL_OK)
 80019e6:	4805      	ldr	r0, [pc, #20]	; (80019fc <MX_USART1_UART_Init+0x4c>)
 80019e8:	f003 f848 	bl	8004a7c <HAL_HalfDuplex_Init>
 80019ec:	4603      	mov	r3, r0
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d001      	beq.n	80019f6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80019f2:	f000 f85b 	bl	8001aac <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80019f6:	bf00      	nop
 80019f8:	bd80      	pop	{r7, pc}
 80019fa:	bf00      	nop
 80019fc:	20000314 	.word	0x20000314
 8001a00:	40013800 	.word	0x40013800

08001a04 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b082      	sub	sp, #8
 8001a08:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001a0a:	4b10      	ldr	r3, [pc, #64]	; (8001a4c <MX_DMA_Init+0x48>)
 8001a0c:	695b      	ldr	r3, [r3, #20]
 8001a0e:	4a0f      	ldr	r2, [pc, #60]	; (8001a4c <MX_DMA_Init+0x48>)
 8001a10:	f043 0301 	orr.w	r3, r3, #1
 8001a14:	6153      	str	r3, [r2, #20]
 8001a16:	4b0d      	ldr	r3, [pc, #52]	; (8001a4c <MX_DMA_Init+0x48>)
 8001a18:	695b      	ldr	r3, [r3, #20]
 8001a1a:	f003 0301 	and.w	r3, r3, #1
 8001a1e:	607b      	str	r3, [r7, #4]
 8001a20:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8001a22:	2200      	movs	r2, #0
 8001a24:	2100      	movs	r1, #0
 8001a26:	200e      	movs	r0, #14
 8001a28:	f000 fe87 	bl	800273a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8001a2c:	200e      	movs	r0, #14
 8001a2e:	f000 fea0 	bl	8002772 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8001a32:	2200      	movs	r2, #0
 8001a34:	2100      	movs	r1, #0
 8001a36:	200f      	movs	r0, #15
 8001a38:	f000 fe7f 	bl	800273a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8001a3c:	200f      	movs	r0, #15
 8001a3e:	f000 fe98 	bl	8002772 <HAL_NVIC_EnableIRQ>

}
 8001a42:	bf00      	nop
 8001a44:	3708      	adds	r7, #8
 8001a46:	46bd      	mov	sp, r7
 8001a48:	bd80      	pop	{r7, pc}
 8001a4a:	bf00      	nop
 8001a4c:	40021000 	.word	0x40021000

08001a50 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001a50:	b480      	push	{r7}
 8001a52:	b085      	sub	sp, #20
 8001a54:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001a56:	4b14      	ldr	r3, [pc, #80]	; (8001aa8 <MX_GPIO_Init+0x58>)
 8001a58:	699b      	ldr	r3, [r3, #24]
 8001a5a:	4a13      	ldr	r2, [pc, #76]	; (8001aa8 <MX_GPIO_Init+0x58>)
 8001a5c:	f043 0320 	orr.w	r3, r3, #32
 8001a60:	6193      	str	r3, [r2, #24]
 8001a62:	4b11      	ldr	r3, [pc, #68]	; (8001aa8 <MX_GPIO_Init+0x58>)
 8001a64:	699b      	ldr	r3, [r3, #24]
 8001a66:	f003 0320 	and.w	r3, r3, #32
 8001a6a:	60fb      	str	r3, [r7, #12]
 8001a6c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a6e:	4b0e      	ldr	r3, [pc, #56]	; (8001aa8 <MX_GPIO_Init+0x58>)
 8001a70:	699b      	ldr	r3, [r3, #24]
 8001a72:	4a0d      	ldr	r2, [pc, #52]	; (8001aa8 <MX_GPIO_Init+0x58>)
 8001a74:	f043 0304 	orr.w	r3, r3, #4
 8001a78:	6193      	str	r3, [r2, #24]
 8001a7a:	4b0b      	ldr	r3, [pc, #44]	; (8001aa8 <MX_GPIO_Init+0x58>)
 8001a7c:	699b      	ldr	r3, [r3, #24]
 8001a7e:	f003 0304 	and.w	r3, r3, #4
 8001a82:	60bb      	str	r3, [r7, #8]
 8001a84:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a86:	4b08      	ldr	r3, [pc, #32]	; (8001aa8 <MX_GPIO_Init+0x58>)
 8001a88:	699b      	ldr	r3, [r3, #24]
 8001a8a:	4a07      	ldr	r2, [pc, #28]	; (8001aa8 <MX_GPIO_Init+0x58>)
 8001a8c:	f043 0308 	orr.w	r3, r3, #8
 8001a90:	6193      	str	r3, [r2, #24]
 8001a92:	4b05      	ldr	r3, [pc, #20]	; (8001aa8 <MX_GPIO_Init+0x58>)
 8001a94:	699b      	ldr	r3, [r3, #24]
 8001a96:	f003 0308 	and.w	r3, r3, #8
 8001a9a:	607b      	str	r3, [r7, #4]
 8001a9c:	687b      	ldr	r3, [r7, #4]

}
 8001a9e:	bf00      	nop
 8001aa0:	3714      	adds	r7, #20
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	bc80      	pop	{r7}
 8001aa6:	4770      	bx	lr
 8001aa8:	40021000 	.word	0x40021000

08001aac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001aac:	b480      	push	{r7}
 8001aae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001ab0:	b672      	cpsid	i
}
 8001ab2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001ab4:	e7fe      	b.n	8001ab4 <Error_Handler+0x8>

08001ab6 <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 8001ab6:	b480      	push	{r7}
 8001ab8:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 8001aba:	bf00      	nop
 8001abc:	46bd      	mov	sp, r7
 8001abe:	bc80      	pop	{r7}
 8001ac0:	4770      	bx	lr
	...

08001ac4 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	b086      	sub	sp, #24
 8001ac8:	af04      	add	r7, sp, #16
 8001aca:	4603      	mov	r3, r0
 8001acc:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8001ace:	f04f 33ff 	mov.w	r3, #4294967295
 8001ad2:	9302      	str	r3, [sp, #8]
 8001ad4:	2301      	movs	r3, #1
 8001ad6:	9301      	str	r3, [sp, #4]
 8001ad8:	1dfb      	adds	r3, r7, #7
 8001ada:	9300      	str	r3, [sp, #0]
 8001adc:	2301      	movs	r3, #1
 8001ade:	2200      	movs	r2, #0
 8001ae0:	2178      	movs	r1, #120	; 0x78
 8001ae2:	4803      	ldr	r0, [pc, #12]	; (8001af0 <ssd1306_WriteCommand+0x2c>)
 8001ae4:	f001 fbc6 	bl	8003274 <HAL_I2C_Mem_Write>
}
 8001ae8:	bf00      	nop
 8001aea:	3708      	adds	r7, #8
 8001aec:	46bd      	mov	sp, r7
 8001aee:	bd80      	pop	{r7, pc}
 8001af0:	20000278 	.word	0x20000278

08001af4 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b086      	sub	sp, #24
 8001af8:	af04      	add	r7, sp, #16
 8001afa:	6078      	str	r0, [r7, #4]
 8001afc:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 8001afe:	683b      	ldr	r3, [r7, #0]
 8001b00:	b29b      	uxth	r3, r3
 8001b02:	f04f 32ff 	mov.w	r2, #4294967295
 8001b06:	9202      	str	r2, [sp, #8]
 8001b08:	9301      	str	r3, [sp, #4]
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	9300      	str	r3, [sp, #0]
 8001b0e:	2301      	movs	r3, #1
 8001b10:	2240      	movs	r2, #64	; 0x40
 8001b12:	2178      	movs	r1, #120	; 0x78
 8001b14:	4803      	ldr	r0, [pc, #12]	; (8001b24 <ssd1306_WriteData+0x30>)
 8001b16:	f001 fbad 	bl	8003274 <HAL_I2C_Mem_Write>
}
 8001b1a:	bf00      	nop
 8001b1c:	3708      	adds	r7, #8
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	bd80      	pop	{r7, pc}
 8001b22:	bf00      	nop
 8001b24:	20000278 	.word	0x20000278

08001b28 <ssd1306_Init>:
    }
    return ret;
}

// Initialize the oled screen
void ssd1306_Init(void) {
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 8001b2c:	f7ff ffc3 	bl	8001ab6 <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 8001b30:	2064      	movs	r0, #100	; 0x64
 8001b32:	f000 fd07 	bl	8002544 <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 8001b36:	2000      	movs	r0, #0
 8001b38:	f000 f9d6 	bl	8001ee8 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8001b3c:	2020      	movs	r0, #32
 8001b3e:	f7ff ffc1 	bl	8001ac4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 8001b42:	2000      	movs	r0, #0
 8001b44:	f7ff ffbe 	bl	8001ac4 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8001b48:	20b0      	movs	r0, #176	; 0xb0
 8001b4a:	f7ff ffbb 	bl	8001ac4 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8001b4e:	20c8      	movs	r0, #200	; 0xc8
 8001b50:	f7ff ffb8 	bl	8001ac4 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 8001b54:	2000      	movs	r0, #0
 8001b56:	f7ff ffb5 	bl	8001ac4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 8001b5a:	2010      	movs	r0, #16
 8001b5c:	f7ff ffb2 	bl	8001ac4 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8001b60:	2040      	movs	r0, #64	; 0x40
 8001b62:	f7ff ffaf 	bl	8001ac4 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 8001b66:	20ff      	movs	r0, #255	; 0xff
 8001b68:	f000 f9aa 	bl	8001ec0 <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8001b6c:	20a1      	movs	r0, #161	; 0xa1
 8001b6e:	f7ff ffa9 	bl	8001ac4 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 8001b72:	20a6      	movs	r0, #166	; 0xa6
 8001b74:	f7ff ffa6 	bl	8001ac4 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8001b78:	20a8      	movs	r0, #168	; 0xa8
 8001b7a:	f7ff ffa3 	bl	8001ac4 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
 8001b7e:	201f      	movs	r0, #31
 8001b80:	f7ff ffa0 	bl	8001ac4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8001b84:	20a4      	movs	r0, #164	; 0xa4
 8001b86:	f7ff ff9d 	bl	8001ac4 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 8001b8a:	20d3      	movs	r0, #211	; 0xd3
 8001b8c:	f7ff ff9a 	bl	8001ac4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 8001b90:	2000      	movs	r0, #0
 8001b92:	f7ff ff97 	bl	8001ac4 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8001b96:	20d5      	movs	r0, #213	; 0xd5
 8001b98:	f7ff ff94 	bl	8001ac4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8001b9c:	20f0      	movs	r0, #240	; 0xf0
 8001b9e:	f7ff ff91 	bl	8001ac4 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8001ba2:	20d9      	movs	r0, #217	; 0xd9
 8001ba4:	f7ff ff8e 	bl	8001ac4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8001ba8:	2022      	movs	r0, #34	; 0x22
 8001baa:	f7ff ff8b 	bl	8001ac4 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 8001bae:	20da      	movs	r0, #218	; 0xda
 8001bb0:	f7ff ff88 	bl	8001ac4 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
 8001bb4:	2002      	movs	r0, #2
 8001bb6:	f7ff ff85 	bl	8001ac4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 8001bba:	20db      	movs	r0, #219	; 0xdb
 8001bbc:	f7ff ff82 	bl	8001ac4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8001bc0:	2020      	movs	r0, #32
 8001bc2:	f7ff ff7f 	bl	8001ac4 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8001bc6:	208d      	movs	r0, #141	; 0x8d
 8001bc8:	f7ff ff7c 	bl	8001ac4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8001bcc:	2014      	movs	r0, #20
 8001bce:	f7ff ff79 	bl	8001ac4 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 8001bd2:	2001      	movs	r0, #1
 8001bd4:	f000 f988 	bl	8001ee8 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 8001bd8:	2000      	movs	r0, #0
 8001bda:	f000 f80f 	bl	8001bfc <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 8001bde:	f000 f82f 	bl	8001c40 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8001be2:	4b05      	ldr	r3, [pc, #20]	; (8001bf8 <ssd1306_Init+0xd0>)
 8001be4:	2200      	movs	r2, #0
 8001be6:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8001be8:	4b03      	ldr	r3, [pc, #12]	; (8001bf8 <ssd1306_Init+0xd0>)
 8001bea:	2200      	movs	r2, #0
 8001bec:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 8001bee:	4b02      	ldr	r3, [pc, #8]	; (8001bf8 <ssd1306_Init+0xd0>)
 8001bf0:	2201      	movs	r2, #1
 8001bf2:	711a      	strb	r2, [r3, #4]
}
 8001bf4:	bf00      	nop
 8001bf6:	bd80      	pop	{r7, pc}
 8001bf8:	200005f8 	.word	0x200005f8

08001bfc <ssd1306_Fill>:

// Fill the whole screen with the given color
void ssd1306_Fill(SSD1306_COLOR color) {
 8001bfc:	b480      	push	{r7}
 8001bfe:	b085      	sub	sp, #20
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	4603      	mov	r3, r0
 8001c04:	71fb      	strb	r3, [r7, #7]
    /* Set memory */
    uint32_t i;

    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8001c06:	2300      	movs	r3, #0
 8001c08:	60fb      	str	r3, [r7, #12]
 8001c0a:	e00d      	b.n	8001c28 <ssd1306_Fill+0x2c>
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 8001c0c:	79fb      	ldrb	r3, [r7, #7]
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d101      	bne.n	8001c16 <ssd1306_Fill+0x1a>
 8001c12:	2100      	movs	r1, #0
 8001c14:	e000      	b.n	8001c18 <ssd1306_Fill+0x1c>
 8001c16:	21ff      	movs	r1, #255	; 0xff
 8001c18:	4a08      	ldr	r2, [pc, #32]	; (8001c3c <ssd1306_Fill+0x40>)
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	4413      	add	r3, r2
 8001c1e:	460a      	mov	r2, r1
 8001c20:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	3301      	adds	r3, #1
 8001c26:	60fb      	str	r3, [r7, #12]
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001c2e:	d3ed      	bcc.n	8001c0c <ssd1306_Fill+0x10>
    }
}
 8001c30:	bf00      	nop
 8001c32:	bf00      	nop
 8001c34:	3714      	adds	r7, #20
 8001c36:	46bd      	mov	sp, r7
 8001c38:	bc80      	pop	{r7}
 8001c3a:	4770      	bx	lr
 8001c3c:	200003f8 	.word	0x200003f8

08001c40 <ssd1306_UpdateScreen>:

// Write the screenbuffer with changed to the screen
void ssd1306_UpdateScreen(void) {
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b082      	sub	sp, #8
 8001c44:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8001c46:	2300      	movs	r3, #0
 8001c48:	71fb      	strb	r3, [r7, #7]
 8001c4a:	e016      	b.n	8001c7a <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8001c4c:	79fb      	ldrb	r3, [r7, #7]
 8001c4e:	3b50      	subs	r3, #80	; 0x50
 8001c50:	b2db      	uxtb	r3, r3
 8001c52:	4618      	mov	r0, r3
 8001c54:	f7ff ff36 	bl	8001ac4 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 8001c58:	2000      	movs	r0, #0
 8001c5a:	f7ff ff33 	bl	8001ac4 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 8001c5e:	2010      	movs	r0, #16
 8001c60:	f7ff ff30 	bl	8001ac4 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8001c64:	79fb      	ldrb	r3, [r7, #7]
 8001c66:	01db      	lsls	r3, r3, #7
 8001c68:	4a08      	ldr	r2, [pc, #32]	; (8001c8c <ssd1306_UpdateScreen+0x4c>)
 8001c6a:	4413      	add	r3, r2
 8001c6c:	2180      	movs	r1, #128	; 0x80
 8001c6e:	4618      	mov	r0, r3
 8001c70:	f7ff ff40 	bl	8001af4 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8001c74:	79fb      	ldrb	r3, [r7, #7]
 8001c76:	3301      	adds	r3, #1
 8001c78:	71fb      	strb	r3, [r7, #7]
 8001c7a:	79fb      	ldrb	r3, [r7, #7]
 8001c7c:	2b03      	cmp	r3, #3
 8001c7e:	d9e5      	bls.n	8001c4c <ssd1306_UpdateScreen+0xc>
    }
}
 8001c80:	bf00      	nop
 8001c82:	bf00      	nop
 8001c84:	3708      	adds	r7, #8
 8001c86:	46bd      	mov	sp, r7
 8001c88:	bd80      	pop	{r7, pc}
 8001c8a:	bf00      	nop
 8001c8c:	200003f8 	.word	0x200003f8

08001c90 <ssd1306_DrawPixel>:

//    Draw one pixel in the screenbuffer
//    X => X Coordinate
//    Y => Y Coordinate
//    color => Pixel color
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8001c90:	b480      	push	{r7}
 8001c92:	b083      	sub	sp, #12
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	4603      	mov	r3, r0
 8001c98:	71fb      	strb	r3, [r7, #7]
 8001c9a:	460b      	mov	r3, r1
 8001c9c:	71bb      	strb	r3, [r7, #6]
 8001c9e:	4613      	mov	r3, r2
 8001ca0:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8001ca2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	db3d      	blt.n	8001d26 <ssd1306_DrawPixel+0x96>
 8001caa:	79bb      	ldrb	r3, [r7, #6]
 8001cac:	2b1f      	cmp	r3, #31
 8001cae:	d83a      	bhi.n	8001d26 <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 8001cb0:	797b      	ldrb	r3, [r7, #5]
 8001cb2:	2b01      	cmp	r3, #1
 8001cb4:	d11a      	bne.n	8001cec <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8001cb6:	79fa      	ldrb	r2, [r7, #7]
 8001cb8:	79bb      	ldrb	r3, [r7, #6]
 8001cba:	08db      	lsrs	r3, r3, #3
 8001cbc:	b2d8      	uxtb	r0, r3
 8001cbe:	4603      	mov	r3, r0
 8001cc0:	01db      	lsls	r3, r3, #7
 8001cc2:	4413      	add	r3, r2
 8001cc4:	4a1a      	ldr	r2, [pc, #104]	; (8001d30 <ssd1306_DrawPixel+0xa0>)
 8001cc6:	5cd3      	ldrb	r3, [r2, r3]
 8001cc8:	b25a      	sxtb	r2, r3
 8001cca:	79bb      	ldrb	r3, [r7, #6]
 8001ccc:	f003 0307 	and.w	r3, r3, #7
 8001cd0:	2101      	movs	r1, #1
 8001cd2:	fa01 f303 	lsl.w	r3, r1, r3
 8001cd6:	b25b      	sxtb	r3, r3
 8001cd8:	4313      	orrs	r3, r2
 8001cda:	b259      	sxtb	r1, r3
 8001cdc:	79fa      	ldrb	r2, [r7, #7]
 8001cde:	4603      	mov	r3, r0
 8001ce0:	01db      	lsls	r3, r3, #7
 8001ce2:	4413      	add	r3, r2
 8001ce4:	b2c9      	uxtb	r1, r1
 8001ce6:	4a12      	ldr	r2, [pc, #72]	; (8001d30 <ssd1306_DrawPixel+0xa0>)
 8001ce8:	54d1      	strb	r1, [r2, r3]
 8001cea:	e01d      	b.n	8001d28 <ssd1306_DrawPixel+0x98>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8001cec:	79fa      	ldrb	r2, [r7, #7]
 8001cee:	79bb      	ldrb	r3, [r7, #6]
 8001cf0:	08db      	lsrs	r3, r3, #3
 8001cf2:	b2d8      	uxtb	r0, r3
 8001cf4:	4603      	mov	r3, r0
 8001cf6:	01db      	lsls	r3, r3, #7
 8001cf8:	4413      	add	r3, r2
 8001cfa:	4a0d      	ldr	r2, [pc, #52]	; (8001d30 <ssd1306_DrawPixel+0xa0>)
 8001cfc:	5cd3      	ldrb	r3, [r2, r3]
 8001cfe:	b25a      	sxtb	r2, r3
 8001d00:	79bb      	ldrb	r3, [r7, #6]
 8001d02:	f003 0307 	and.w	r3, r3, #7
 8001d06:	2101      	movs	r1, #1
 8001d08:	fa01 f303 	lsl.w	r3, r1, r3
 8001d0c:	b25b      	sxtb	r3, r3
 8001d0e:	43db      	mvns	r3, r3
 8001d10:	b25b      	sxtb	r3, r3
 8001d12:	4013      	ands	r3, r2
 8001d14:	b259      	sxtb	r1, r3
 8001d16:	79fa      	ldrb	r2, [r7, #7]
 8001d18:	4603      	mov	r3, r0
 8001d1a:	01db      	lsls	r3, r3, #7
 8001d1c:	4413      	add	r3, r2
 8001d1e:	b2c9      	uxtb	r1, r1
 8001d20:	4a03      	ldr	r2, [pc, #12]	; (8001d30 <ssd1306_DrawPixel+0xa0>)
 8001d22:	54d1      	strb	r1, [r2, r3]
 8001d24:	e000      	b.n	8001d28 <ssd1306_DrawPixel+0x98>
        return;
 8001d26:	bf00      	nop
    }
}
 8001d28:	370c      	adds	r7, #12
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	bc80      	pop	{r7}
 8001d2e:	4770      	bx	lr
 8001d30:	200003f8 	.word	0x200003f8

08001d34 <ssd1306_WriteChar>:

// Draw 1 char to the screen buffer
// ch       => char om weg te schrijven
// Font     => Font waarmee we gaan schrijven
// color    => Black or White
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 8001d34:	b590      	push	{r4, r7, lr}
 8001d36:	b089      	sub	sp, #36	; 0x24
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	4604      	mov	r4, r0
 8001d3c:	1d38      	adds	r0, r7, #4
 8001d3e:	e880 0006 	stmia.w	r0, {r1, r2}
 8001d42:	461a      	mov	r2, r3
 8001d44:	4623      	mov	r3, r4
 8001d46:	73fb      	strb	r3, [r7, #15]
 8001d48:	4613      	mov	r3, r2
 8001d4a:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 8001d4c:	7bfb      	ldrb	r3, [r7, #15]
 8001d4e:	2b1f      	cmp	r3, #31
 8001d50:	d902      	bls.n	8001d58 <ssd1306_WriteChar+0x24>
 8001d52:	7bfb      	ldrb	r3, [r7, #15]
 8001d54:	2b7e      	cmp	r3, #126	; 0x7e
 8001d56:	d901      	bls.n	8001d5c <ssd1306_WriteChar+0x28>
        return 0;
 8001d58:	2300      	movs	r3, #0
 8001d5a:	e06d      	b.n	8001e38 <ssd1306_WriteChar+0x104>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8001d5c:	4b38      	ldr	r3, [pc, #224]	; (8001e40 <ssd1306_WriteChar+0x10c>)
 8001d5e:	881b      	ldrh	r3, [r3, #0]
 8001d60:	461a      	mov	r2, r3
 8001d62:	793b      	ldrb	r3, [r7, #4]
 8001d64:	4413      	add	r3, r2
 8001d66:	2b80      	cmp	r3, #128	; 0x80
 8001d68:	dc06      	bgt.n	8001d78 <ssd1306_WriteChar+0x44>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.FontHeight))
 8001d6a:	4b35      	ldr	r3, [pc, #212]	; (8001e40 <ssd1306_WriteChar+0x10c>)
 8001d6c:	885b      	ldrh	r3, [r3, #2]
 8001d6e:	461a      	mov	r2, r3
 8001d70:	797b      	ldrb	r3, [r7, #5]
 8001d72:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8001d74:	2b20      	cmp	r3, #32
 8001d76:	dd01      	ble.n	8001d7c <ssd1306_WriteChar+0x48>
    {
        // Not enough space on current line
        return 0;
 8001d78:	2300      	movs	r3, #0
 8001d7a:	e05d      	b.n	8001e38 <ssd1306_WriteChar+0x104>
    }
    
    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	61fb      	str	r3, [r7, #28]
 8001d80:	e04c      	b.n	8001e1c <ssd1306_WriteChar+0xe8>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 8001d82:	68ba      	ldr	r2, [r7, #8]
 8001d84:	7bfb      	ldrb	r3, [r7, #15]
 8001d86:	3b20      	subs	r3, #32
 8001d88:	7979      	ldrb	r1, [r7, #5]
 8001d8a:	fb01 f303 	mul.w	r3, r1, r3
 8001d8e:	4619      	mov	r1, r3
 8001d90:	69fb      	ldr	r3, [r7, #28]
 8001d92:	440b      	add	r3, r1
 8001d94:	005b      	lsls	r3, r3, #1
 8001d96:	4413      	add	r3, r2
 8001d98:	881b      	ldrh	r3, [r3, #0]
 8001d9a:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.FontWidth; j++) {
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	61bb      	str	r3, [r7, #24]
 8001da0:	e034      	b.n	8001e0c <ssd1306_WriteChar+0xd8>
            if((b << j) & 0x8000)  {
 8001da2:	697a      	ldr	r2, [r7, #20]
 8001da4:	69bb      	ldr	r3, [r7, #24]
 8001da6:	fa02 f303 	lsl.w	r3, r2, r3
 8001daa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d012      	beq.n	8001dd8 <ssd1306_WriteChar+0xa4>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8001db2:	4b23      	ldr	r3, [pc, #140]	; (8001e40 <ssd1306_WriteChar+0x10c>)
 8001db4:	881b      	ldrh	r3, [r3, #0]
 8001db6:	b2da      	uxtb	r2, r3
 8001db8:	69bb      	ldr	r3, [r7, #24]
 8001dba:	b2db      	uxtb	r3, r3
 8001dbc:	4413      	add	r3, r2
 8001dbe:	b2d8      	uxtb	r0, r3
 8001dc0:	4b1f      	ldr	r3, [pc, #124]	; (8001e40 <ssd1306_WriteChar+0x10c>)
 8001dc2:	885b      	ldrh	r3, [r3, #2]
 8001dc4:	b2da      	uxtb	r2, r3
 8001dc6:	69fb      	ldr	r3, [r7, #28]
 8001dc8:	b2db      	uxtb	r3, r3
 8001dca:	4413      	add	r3, r2
 8001dcc:	b2db      	uxtb	r3, r3
 8001dce:	7bba      	ldrb	r2, [r7, #14]
 8001dd0:	4619      	mov	r1, r3
 8001dd2:	f7ff ff5d 	bl	8001c90 <ssd1306_DrawPixel>
 8001dd6:	e016      	b.n	8001e06 <ssd1306_WriteChar+0xd2>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8001dd8:	4b19      	ldr	r3, [pc, #100]	; (8001e40 <ssd1306_WriteChar+0x10c>)
 8001dda:	881b      	ldrh	r3, [r3, #0]
 8001ddc:	b2da      	uxtb	r2, r3
 8001dde:	69bb      	ldr	r3, [r7, #24]
 8001de0:	b2db      	uxtb	r3, r3
 8001de2:	4413      	add	r3, r2
 8001de4:	b2d8      	uxtb	r0, r3
 8001de6:	4b16      	ldr	r3, [pc, #88]	; (8001e40 <ssd1306_WriteChar+0x10c>)
 8001de8:	885b      	ldrh	r3, [r3, #2]
 8001dea:	b2da      	uxtb	r2, r3
 8001dec:	69fb      	ldr	r3, [r7, #28]
 8001dee:	b2db      	uxtb	r3, r3
 8001df0:	4413      	add	r3, r2
 8001df2:	b2d9      	uxtb	r1, r3
 8001df4:	7bbb      	ldrb	r3, [r7, #14]
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	bf0c      	ite	eq
 8001dfa:	2301      	moveq	r3, #1
 8001dfc:	2300      	movne	r3, #0
 8001dfe:	b2db      	uxtb	r3, r3
 8001e00:	461a      	mov	r2, r3
 8001e02:	f7ff ff45 	bl	8001c90 <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 8001e06:	69bb      	ldr	r3, [r7, #24]
 8001e08:	3301      	adds	r3, #1
 8001e0a:	61bb      	str	r3, [r7, #24]
 8001e0c:	793b      	ldrb	r3, [r7, #4]
 8001e0e:	461a      	mov	r2, r3
 8001e10:	69bb      	ldr	r3, [r7, #24]
 8001e12:	4293      	cmp	r3, r2
 8001e14:	d3c5      	bcc.n	8001da2 <ssd1306_WriteChar+0x6e>
    for(i = 0; i < Font.FontHeight; i++) {
 8001e16:	69fb      	ldr	r3, [r7, #28]
 8001e18:	3301      	adds	r3, #1
 8001e1a:	61fb      	str	r3, [r7, #28]
 8001e1c:	797b      	ldrb	r3, [r7, #5]
 8001e1e:	461a      	mov	r2, r3
 8001e20:	69fb      	ldr	r3, [r7, #28]
 8001e22:	4293      	cmp	r3, r2
 8001e24:	d3ad      	bcc.n	8001d82 <ssd1306_WriteChar+0x4e>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 8001e26:	4b06      	ldr	r3, [pc, #24]	; (8001e40 <ssd1306_WriteChar+0x10c>)
 8001e28:	881a      	ldrh	r2, [r3, #0]
 8001e2a:	793b      	ldrb	r3, [r7, #4]
 8001e2c:	b29b      	uxth	r3, r3
 8001e2e:	4413      	add	r3, r2
 8001e30:	b29a      	uxth	r2, r3
 8001e32:	4b03      	ldr	r3, [pc, #12]	; (8001e40 <ssd1306_WriteChar+0x10c>)
 8001e34:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 8001e36:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e38:	4618      	mov	r0, r3
 8001e3a:	3724      	adds	r7, #36	; 0x24
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	bd90      	pop	{r4, r7, pc}
 8001e40:	200005f8 	.word	0x200005f8

08001e44 <ssd1306_WriteString>:

// Write full string to screenbuffer
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 8001e44:	b580      	push	{r7, lr}
 8001e46:	b084      	sub	sp, #16
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	60f8      	str	r0, [r7, #12]
 8001e4c:	1d38      	adds	r0, r7, #4
 8001e4e:	e880 0006 	stmia.w	r0, {r1, r2}
 8001e52:	70fb      	strb	r3, [r7, #3]
    // Write until null-byte
    while (*str) {
 8001e54:	e012      	b.n	8001e7c <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	7818      	ldrb	r0, [r3, #0]
 8001e5a:	78fb      	ldrb	r3, [r7, #3]
 8001e5c:	1d3a      	adds	r2, r7, #4
 8001e5e:	ca06      	ldmia	r2, {r1, r2}
 8001e60:	f7ff ff68 	bl	8001d34 <ssd1306_WriteChar>
 8001e64:	4603      	mov	r3, r0
 8001e66:	461a      	mov	r2, r3
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	781b      	ldrb	r3, [r3, #0]
 8001e6c:	429a      	cmp	r2, r3
 8001e6e:	d002      	beq.n	8001e76 <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	781b      	ldrb	r3, [r3, #0]
 8001e74:	e008      	b.n	8001e88 <ssd1306_WriteString+0x44>
        }
        
        // Next char
        str++;
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	3301      	adds	r3, #1
 8001e7a:	60fb      	str	r3, [r7, #12]
    while (*str) {
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	781b      	ldrb	r3, [r3, #0]
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d1e8      	bne.n	8001e56 <ssd1306_WriteString+0x12>
    }
    
    // Everything ok
    return *str;
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	781b      	ldrb	r3, [r3, #0]
}
 8001e88:	4618      	mov	r0, r3
 8001e8a:	3710      	adds	r7, #16
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	bd80      	pop	{r7, pc}

08001e90 <ssd1306_SetCursor>:

// Position the cursor
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 8001e90:	b480      	push	{r7}
 8001e92:	b083      	sub	sp, #12
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	4603      	mov	r3, r0
 8001e98:	460a      	mov	r2, r1
 8001e9a:	71fb      	strb	r3, [r7, #7]
 8001e9c:	4613      	mov	r3, r2
 8001e9e:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 8001ea0:	79fb      	ldrb	r3, [r7, #7]
 8001ea2:	b29a      	uxth	r2, r3
 8001ea4:	4b05      	ldr	r3, [pc, #20]	; (8001ebc <ssd1306_SetCursor+0x2c>)
 8001ea6:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8001ea8:	79bb      	ldrb	r3, [r7, #6]
 8001eaa:	b29a      	uxth	r2, r3
 8001eac:	4b03      	ldr	r3, [pc, #12]	; (8001ebc <ssd1306_SetCursor+0x2c>)
 8001eae:	805a      	strh	r2, [r3, #2]
}
 8001eb0:	bf00      	nop
 8001eb2:	370c      	adds	r7, #12
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	bc80      	pop	{r7}
 8001eb8:	4770      	bx	lr
 8001eba:	bf00      	nop
 8001ebc:	200005f8 	.word	0x200005f8

08001ec0 <ssd1306_SetContrast>:
        }
    }
    return;
}

void ssd1306_SetContrast(const uint8_t value) {
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b084      	sub	sp, #16
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	4603      	mov	r3, r0
 8001ec8:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 8001eca:	2381      	movs	r3, #129	; 0x81
 8001ecc:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 8001ece:	7bfb      	ldrb	r3, [r7, #15]
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	f7ff fdf7 	bl	8001ac4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 8001ed6:	79fb      	ldrb	r3, [r7, #7]
 8001ed8:	4618      	mov	r0, r3
 8001eda:	f7ff fdf3 	bl	8001ac4 <ssd1306_WriteCommand>
}
 8001ede:	bf00      	nop
 8001ee0:	3710      	adds	r7, #16
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	bd80      	pop	{r7, pc}
	...

08001ee8 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	b084      	sub	sp, #16
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	4603      	mov	r3, r0
 8001ef0:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 8001ef2:	79fb      	ldrb	r3, [r7, #7]
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d005      	beq.n	8001f04 <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 8001ef8:	23af      	movs	r3, #175	; 0xaf
 8001efa:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 8001efc:	4b08      	ldr	r3, [pc, #32]	; (8001f20 <ssd1306_SetDisplayOn+0x38>)
 8001efe:	2201      	movs	r2, #1
 8001f00:	715a      	strb	r2, [r3, #5]
 8001f02:	e004      	b.n	8001f0e <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 8001f04:	23ae      	movs	r3, #174	; 0xae
 8001f06:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 8001f08:	4b05      	ldr	r3, [pc, #20]	; (8001f20 <ssd1306_SetDisplayOn+0x38>)
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 8001f0e:	7bfb      	ldrb	r3, [r7, #15]
 8001f10:	4618      	mov	r0, r3
 8001f12:	f7ff fdd7 	bl	8001ac4 <ssd1306_WriteCommand>
}
 8001f16:	bf00      	nop
 8001f18:	3710      	adds	r7, #16
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	bd80      	pop	{r7, pc}
 8001f1e:	bf00      	nop
 8001f20:	200005f8 	.word	0x200005f8

08001f24 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001f24:	b480      	push	{r7}
 8001f26:	b085      	sub	sp, #20
 8001f28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001f2a:	4b15      	ldr	r3, [pc, #84]	; (8001f80 <HAL_MspInit+0x5c>)
 8001f2c:	699b      	ldr	r3, [r3, #24]
 8001f2e:	4a14      	ldr	r2, [pc, #80]	; (8001f80 <HAL_MspInit+0x5c>)
 8001f30:	f043 0301 	orr.w	r3, r3, #1
 8001f34:	6193      	str	r3, [r2, #24]
 8001f36:	4b12      	ldr	r3, [pc, #72]	; (8001f80 <HAL_MspInit+0x5c>)
 8001f38:	699b      	ldr	r3, [r3, #24]
 8001f3a:	f003 0301 	and.w	r3, r3, #1
 8001f3e:	60bb      	str	r3, [r7, #8]
 8001f40:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f42:	4b0f      	ldr	r3, [pc, #60]	; (8001f80 <HAL_MspInit+0x5c>)
 8001f44:	69db      	ldr	r3, [r3, #28]
 8001f46:	4a0e      	ldr	r2, [pc, #56]	; (8001f80 <HAL_MspInit+0x5c>)
 8001f48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f4c:	61d3      	str	r3, [r2, #28]
 8001f4e:	4b0c      	ldr	r3, [pc, #48]	; (8001f80 <HAL_MspInit+0x5c>)
 8001f50:	69db      	ldr	r3, [r3, #28]
 8001f52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f56:	607b      	str	r3, [r7, #4]
 8001f58:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001f5a:	4b0a      	ldr	r3, [pc, #40]	; (8001f84 <HAL_MspInit+0x60>)
 8001f5c:	685b      	ldr	r3, [r3, #4]
 8001f5e:	60fb      	str	r3, [r7, #12]
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001f66:	60fb      	str	r3, [r7, #12]
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001f6e:	60fb      	str	r3, [r7, #12]
 8001f70:	4a04      	ldr	r2, [pc, #16]	; (8001f84 <HAL_MspInit+0x60>)
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001f76:	bf00      	nop
 8001f78:	3714      	adds	r7, #20
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	bc80      	pop	{r7}
 8001f7e:	4770      	bx	lr
 8001f80:	40021000 	.word	0x40021000
 8001f84:	40010000 	.word	0x40010000

08001f88 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	b088      	sub	sp, #32
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f90:	f107 0310 	add.w	r3, r7, #16
 8001f94:	2200      	movs	r2, #0
 8001f96:	601a      	str	r2, [r3, #0]
 8001f98:	605a      	str	r2, [r3, #4]
 8001f9a:	609a      	str	r2, [r3, #8]
 8001f9c:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	4a15      	ldr	r2, [pc, #84]	; (8001ff8 <HAL_I2C_MspInit+0x70>)
 8001fa4:	4293      	cmp	r3, r2
 8001fa6:	d123      	bne.n	8001ff0 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fa8:	4b14      	ldr	r3, [pc, #80]	; (8001ffc <HAL_I2C_MspInit+0x74>)
 8001faa:	699b      	ldr	r3, [r3, #24]
 8001fac:	4a13      	ldr	r2, [pc, #76]	; (8001ffc <HAL_I2C_MspInit+0x74>)
 8001fae:	f043 0308 	orr.w	r3, r3, #8
 8001fb2:	6193      	str	r3, [r2, #24]
 8001fb4:	4b11      	ldr	r3, [pc, #68]	; (8001ffc <HAL_I2C_MspInit+0x74>)
 8001fb6:	699b      	ldr	r3, [r3, #24]
 8001fb8:	f003 0308 	and.w	r3, r3, #8
 8001fbc:	60fb      	str	r3, [r7, #12]
 8001fbe:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001fc0:	23c0      	movs	r3, #192	; 0xc0
 8001fc2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001fc4:	2312      	movs	r3, #18
 8001fc6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001fc8:	2303      	movs	r3, #3
 8001fca:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001fcc:	f107 0310 	add.w	r3, r7, #16
 8001fd0:	4619      	mov	r1, r3
 8001fd2:	480b      	ldr	r0, [pc, #44]	; (8002000 <HAL_I2C_MspInit+0x78>)
 8001fd4:	f000 fe86 	bl	8002ce4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001fd8:	4b08      	ldr	r3, [pc, #32]	; (8001ffc <HAL_I2C_MspInit+0x74>)
 8001fda:	69db      	ldr	r3, [r3, #28]
 8001fdc:	4a07      	ldr	r2, [pc, #28]	; (8001ffc <HAL_I2C_MspInit+0x74>)
 8001fde:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001fe2:	61d3      	str	r3, [r2, #28]
 8001fe4:	4b05      	ldr	r3, [pc, #20]	; (8001ffc <HAL_I2C_MspInit+0x74>)
 8001fe6:	69db      	ldr	r3, [r3, #28]
 8001fe8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001fec:	60bb      	str	r3, [r7, #8]
 8001fee:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001ff0:	bf00      	nop
 8001ff2:	3720      	adds	r7, #32
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	bd80      	pop	{r7, pc}
 8001ff8:	40005400 	.word	0x40005400
 8001ffc:	40021000 	.word	0x40021000
 8002000:	40010c00 	.word	0x40010c00

08002004 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002004:	b580      	push	{r7, lr}
 8002006:	b084      	sub	sp, #16
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002014:	d113      	bne.n	800203e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002016:	4b0c      	ldr	r3, [pc, #48]	; (8002048 <HAL_TIM_Base_MspInit+0x44>)
 8002018:	69db      	ldr	r3, [r3, #28]
 800201a:	4a0b      	ldr	r2, [pc, #44]	; (8002048 <HAL_TIM_Base_MspInit+0x44>)
 800201c:	f043 0301 	orr.w	r3, r3, #1
 8002020:	61d3      	str	r3, [r2, #28]
 8002022:	4b09      	ldr	r3, [pc, #36]	; (8002048 <HAL_TIM_Base_MspInit+0x44>)
 8002024:	69db      	ldr	r3, [r3, #28]
 8002026:	f003 0301 	and.w	r3, r3, #1
 800202a:	60fb      	str	r3, [r7, #12]
 800202c:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800202e:	2200      	movs	r2, #0
 8002030:	2100      	movs	r1, #0
 8002032:	201c      	movs	r0, #28
 8002034:	f000 fb81 	bl	800273a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002038:	201c      	movs	r0, #28
 800203a:	f000 fb9a 	bl	8002772 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800203e:	bf00      	nop
 8002040:	3710      	adds	r7, #16
 8002042:	46bd      	mov	sp, r7
 8002044:	bd80      	pop	{r7, pc}
 8002046:	bf00      	nop
 8002048:	40021000 	.word	0x40021000

0800204c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800204c:	b580      	push	{r7, lr}
 800204e:	b088      	sub	sp, #32
 8002050:	af00      	add	r7, sp, #0
 8002052:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002054:	f107 0310 	add.w	r3, r7, #16
 8002058:	2200      	movs	r2, #0
 800205a:	601a      	str	r2, [r3, #0]
 800205c:	605a      	str	r2, [r3, #4]
 800205e:	609a      	str	r2, [r3, #8]
 8002060:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	4a40      	ldr	r2, [pc, #256]	; (8002168 <HAL_UART_MspInit+0x11c>)
 8002068:	4293      	cmp	r3, r2
 800206a:	d178      	bne.n	800215e <HAL_UART_MspInit+0x112>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800206c:	4b3f      	ldr	r3, [pc, #252]	; (800216c <HAL_UART_MspInit+0x120>)
 800206e:	699b      	ldr	r3, [r3, #24]
 8002070:	4a3e      	ldr	r2, [pc, #248]	; (800216c <HAL_UART_MspInit+0x120>)
 8002072:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002076:	6193      	str	r3, [r2, #24]
 8002078:	4b3c      	ldr	r3, [pc, #240]	; (800216c <HAL_UART_MspInit+0x120>)
 800207a:	699b      	ldr	r3, [r3, #24]
 800207c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002080:	60fb      	str	r3, [r7, #12]
 8002082:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002084:	4b39      	ldr	r3, [pc, #228]	; (800216c <HAL_UART_MspInit+0x120>)
 8002086:	699b      	ldr	r3, [r3, #24]
 8002088:	4a38      	ldr	r2, [pc, #224]	; (800216c <HAL_UART_MspInit+0x120>)
 800208a:	f043 0304 	orr.w	r3, r3, #4
 800208e:	6193      	str	r3, [r2, #24]
 8002090:	4b36      	ldr	r3, [pc, #216]	; (800216c <HAL_UART_MspInit+0x120>)
 8002092:	699b      	ldr	r3, [r3, #24]
 8002094:	f003 0304 	and.w	r3, r3, #4
 8002098:	60bb      	str	r3, [r7, #8]
 800209a:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800209c:	f44f 7300 	mov.w	r3, #512	; 0x200
 80020a0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80020a2:	2312      	movs	r3, #18
 80020a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80020a6:	2303      	movs	r3, #3
 80020a8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020aa:	f107 0310 	add.w	r3, r7, #16
 80020ae:	4619      	mov	r1, r3
 80020b0:	482f      	ldr	r0, [pc, #188]	; (8002170 <HAL_UART_MspInit+0x124>)
 80020b2:	f000 fe17 	bl	8002ce4 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 80020b6:	4b2f      	ldr	r3, [pc, #188]	; (8002174 <HAL_UART_MspInit+0x128>)
 80020b8:	4a2f      	ldr	r2, [pc, #188]	; (8002178 <HAL_UART_MspInit+0x12c>)
 80020ba:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80020bc:	4b2d      	ldr	r3, [pc, #180]	; (8002174 <HAL_UART_MspInit+0x128>)
 80020be:	2200      	movs	r2, #0
 80020c0:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80020c2:	4b2c      	ldr	r3, [pc, #176]	; (8002174 <HAL_UART_MspInit+0x128>)
 80020c4:	2200      	movs	r2, #0
 80020c6:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80020c8:	4b2a      	ldr	r3, [pc, #168]	; (8002174 <HAL_UART_MspInit+0x128>)
 80020ca:	2280      	movs	r2, #128	; 0x80
 80020cc:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80020ce:	4b29      	ldr	r3, [pc, #164]	; (8002174 <HAL_UART_MspInit+0x128>)
 80020d0:	2200      	movs	r2, #0
 80020d2:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80020d4:	4b27      	ldr	r3, [pc, #156]	; (8002174 <HAL_UART_MspInit+0x128>)
 80020d6:	2200      	movs	r2, #0
 80020d8:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 80020da:	4b26      	ldr	r3, [pc, #152]	; (8002174 <HAL_UART_MspInit+0x128>)
 80020dc:	2200      	movs	r2, #0
 80020de:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80020e0:	4b24      	ldr	r3, [pc, #144]	; (8002174 <HAL_UART_MspInit+0x128>)
 80020e2:	2200      	movs	r2, #0
 80020e4:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80020e6:	4823      	ldr	r0, [pc, #140]	; (8002174 <HAL_UART_MspInit+0x128>)
 80020e8:	f000 fb5e 	bl	80027a8 <HAL_DMA_Init>
 80020ec:	4603      	mov	r3, r0
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d001      	beq.n	80020f6 <HAL_UART_MspInit+0xaa>
    {
      Error_Handler();
 80020f2:	f7ff fcdb 	bl	8001aac <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	4a1e      	ldr	r2, [pc, #120]	; (8002174 <HAL_UART_MspInit+0x128>)
 80020fa:	639a      	str	r2, [r3, #56]	; 0x38
 80020fc:	4a1d      	ldr	r2, [pc, #116]	; (8002174 <HAL_UART_MspInit+0x128>)
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
 8002102:	4b1e      	ldr	r3, [pc, #120]	; (800217c <HAL_UART_MspInit+0x130>)
 8002104:	4a1e      	ldr	r2, [pc, #120]	; (8002180 <HAL_UART_MspInit+0x134>)
 8002106:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002108:	4b1c      	ldr	r3, [pc, #112]	; (800217c <HAL_UART_MspInit+0x130>)
 800210a:	2210      	movs	r2, #16
 800210c:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800210e:	4b1b      	ldr	r3, [pc, #108]	; (800217c <HAL_UART_MspInit+0x130>)
 8002110:	2200      	movs	r2, #0
 8002112:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002114:	4b19      	ldr	r3, [pc, #100]	; (800217c <HAL_UART_MspInit+0x130>)
 8002116:	2280      	movs	r2, #128	; 0x80
 8002118:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800211a:	4b18      	ldr	r3, [pc, #96]	; (800217c <HAL_UART_MspInit+0x130>)
 800211c:	2200      	movs	r2, #0
 800211e:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002120:	4b16      	ldr	r3, [pc, #88]	; (800217c <HAL_UART_MspInit+0x130>)
 8002122:	2200      	movs	r2, #0
 8002124:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8002126:	4b15      	ldr	r3, [pc, #84]	; (800217c <HAL_UART_MspInit+0x130>)
 8002128:	2200      	movs	r2, #0
 800212a:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800212c:	4b13      	ldr	r3, [pc, #76]	; (800217c <HAL_UART_MspInit+0x130>)
 800212e:	2200      	movs	r2, #0
 8002130:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8002132:	4812      	ldr	r0, [pc, #72]	; (800217c <HAL_UART_MspInit+0x130>)
 8002134:	f000 fb38 	bl	80027a8 <HAL_DMA_Init>
 8002138:	4603      	mov	r3, r0
 800213a:	2b00      	cmp	r3, #0
 800213c:	d001      	beq.n	8002142 <HAL_UART_MspInit+0xf6>
    {
      Error_Handler();
 800213e:	f7ff fcb5 	bl	8001aac <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	4a0d      	ldr	r2, [pc, #52]	; (800217c <HAL_UART_MspInit+0x130>)
 8002146:	635a      	str	r2, [r3, #52]	; 0x34
 8002148:	4a0c      	ldr	r2, [pc, #48]	; (800217c <HAL_UART_MspInit+0x130>)
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800214e:	2200      	movs	r2, #0
 8002150:	2100      	movs	r1, #0
 8002152:	2025      	movs	r0, #37	; 0x25
 8002154:	f000 faf1 	bl	800273a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002158:	2025      	movs	r0, #37	; 0x25
 800215a:	f000 fb0a 	bl	8002772 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800215e:	bf00      	nop
 8002160:	3720      	adds	r7, #32
 8002162:	46bd      	mov	sp, r7
 8002164:	bd80      	pop	{r7, pc}
 8002166:	bf00      	nop
 8002168:	40013800 	.word	0x40013800
 800216c:	40021000 	.word	0x40021000
 8002170:	40010800 	.word	0x40010800
 8002174:	20000358 	.word	0x20000358
 8002178:	40020058 	.word	0x40020058
 800217c:	2000039c 	.word	0x2000039c
 8002180:	40020044 	.word	0x40020044

08002184 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002184:	b480      	push	{r7}
 8002186:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002188:	e7fe      	b.n	8002188 <NMI_Handler+0x4>

0800218a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800218a:	b480      	push	{r7}
 800218c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800218e:	e7fe      	b.n	800218e <HardFault_Handler+0x4>

08002190 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002190:	b480      	push	{r7}
 8002192:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002194:	e7fe      	b.n	8002194 <MemManage_Handler+0x4>

08002196 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002196:	b480      	push	{r7}
 8002198:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800219a:	e7fe      	b.n	800219a <BusFault_Handler+0x4>

0800219c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800219c:	b480      	push	{r7}
 800219e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80021a0:	e7fe      	b.n	80021a0 <UsageFault_Handler+0x4>

080021a2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80021a2:	b480      	push	{r7}
 80021a4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80021a6:	bf00      	nop
 80021a8:	46bd      	mov	sp, r7
 80021aa:	bc80      	pop	{r7}
 80021ac:	4770      	bx	lr

080021ae <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80021ae:	b480      	push	{r7}
 80021b0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80021b2:	bf00      	nop
 80021b4:	46bd      	mov	sp, r7
 80021b6:	bc80      	pop	{r7}
 80021b8:	4770      	bx	lr

080021ba <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80021ba:	b480      	push	{r7}
 80021bc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80021be:	bf00      	nop
 80021c0:	46bd      	mov	sp, r7
 80021c2:	bc80      	pop	{r7}
 80021c4:	4770      	bx	lr

080021c6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80021c6:	b580      	push	{r7, lr}
 80021c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80021ca:	f000 f99f 	bl	800250c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80021ce:	bf00      	nop
 80021d0:	bd80      	pop	{r7, pc}
	...

080021d4 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 80021d8:	4802      	ldr	r0, [pc, #8]	; (80021e4 <DMA1_Channel4_IRQHandler+0x10>)
 80021da:	f000 fc4f 	bl	8002a7c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 80021de:	bf00      	nop
 80021e0:	bd80      	pop	{r7, pc}
 80021e2:	bf00      	nop
 80021e4:	2000039c 	.word	0x2000039c

080021e8 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80021ec:	4802      	ldr	r0, [pc, #8]	; (80021f8 <DMA1_Channel5_IRQHandler+0x10>)
 80021ee:	f000 fc45 	bl	8002a7c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 80021f2:	bf00      	nop
 80021f4:	bd80      	pop	{r7, pc}
 80021f6:	bf00      	nop
 80021f8:	20000358 	.word	0x20000358

080021fc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	b084      	sub	sp, #16
 8002200:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002202:	481e      	ldr	r0, [pc, #120]	; (800227c <TIM2_IRQHandler+0x80>)
 8002204:	f002 f808 	bl	8004218 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  float temp = DS18B20_TempFloat(scratchpad);
 8002208:	481d      	ldr	r0, [pc, #116]	; (8002280 <TIM2_IRQHandler+0x84>)
 800220a:	f7ff fa21 	bl	8001650 <DS18B20_TempFloat>
 800220e:	60f8      	str	r0, [r7, #12]

  char buf[8];
  sprintf(buf, "%2.1f", temp);
 8002210:	68f8      	ldr	r0, [r7, #12]
 8002212:	f7fe f909 	bl	8000428 <__aeabi_f2d>
 8002216:	4602      	mov	r2, r0
 8002218:	460b      	mov	r3, r1
 800221a:	1d38      	adds	r0, r7, #4
 800221c:	4919      	ldr	r1, [pc, #100]	; (8002284 <TIM2_IRQHandler+0x88>)
 800221e:	f003 fee9 	bl	8005ff4 <siprintf>
  ssd1306_SetCursor(0, 20);
 8002222:	2114      	movs	r1, #20
 8002224:	2000      	movs	r0, #0
 8002226:	f7ff fe33 	bl	8001e90 <ssd1306_SetCursor>
  ssd1306_WriteString(buf, Font_7x10, White);
 800222a:	4a17      	ldr	r2, [pc, #92]	; (8002288 <TIM2_IRQHandler+0x8c>)
 800222c:	1d38      	adds	r0, r7, #4
 800222e:	2301      	movs	r3, #1
 8002230:	ca06      	ldmia	r2, {r1, r2}
 8002232:	f7ff fe07 	bl	8001e44 <ssd1306_WriteString>
  ssd1306_UpdateScreen();
 8002236:	f7ff fd03 	bl	8001c40 <ssd1306_UpdateScreen>

  if (OneWire_GetState() == 0) {
 800223a:	f7ff f9ff 	bl	800163c <OneWire_GetState>
 800223e:	4603      	mov	r3, r0
 8002240:	2b00      	cmp	r3, #0
 8002242:	d116      	bne.n	8002272 <TIM2_IRQHandler+0x76>
	  if (convert)
 8002244:	4b11      	ldr	r3, [pc, #68]	; (800228c <TIM2_IRQHandler+0x90>)
 8002246:	781b      	ldrb	r3, [r3, #0]
 8002248:	2b00      	cmp	r3, #0
 800224a:	d006      	beq.n	800225a <TIM2_IRQHandler+0x5e>
		  OneWire_Execute(0xcc,0,0x44,rom); // start to Convert T
 800224c:	4b10      	ldr	r3, [pc, #64]	; (8002290 <TIM2_IRQHandler+0x94>)
 800224e:	2244      	movs	r2, #68	; 0x44
 8002250:	2100      	movs	r1, #0
 8002252:	20cc      	movs	r0, #204	; 0xcc
 8002254:	f7ff f994 	bl	8001580 <OneWire_Execute>
 8002258:	e005      	b.n	8002266 <TIM2_IRQHandler+0x6a>
	  else
		  OneWire_Execute(0xcc,0,0xbe,scratchpad); // start to read configuration & result
 800225a:	4b09      	ldr	r3, [pc, #36]	; (8002280 <TIM2_IRQHandler+0x84>)
 800225c:	22be      	movs	r2, #190	; 0xbe
 800225e:	2100      	movs	r1, #0
 8002260:	20cc      	movs	r0, #204	; 0xcc
 8002262:	f7ff f98d 	bl	8001580 <OneWire_Execute>
	  convert = ~convert;
 8002266:	4b09      	ldr	r3, [pc, #36]	; (800228c <TIM2_IRQHandler+0x90>)
 8002268:	781b      	ldrb	r3, [r3, #0]
 800226a:	43db      	mvns	r3, r3
 800226c:	b2da      	uxtb	r2, r3
 800226e:	4b07      	ldr	r3, [pc, #28]	; (800228c <TIM2_IRQHandler+0x90>)
 8002270:	701a      	strb	r2, [r3, #0]
  }
  /* USER CODE END TIM2_IRQn 1 */
}
 8002272:	bf00      	nop
 8002274:	3710      	adds	r7, #16
 8002276:	46bd      	mov	sp, r7
 8002278:	bd80      	pop	{r7, pc}
 800227a:	bf00      	nop
 800227c:	200002cc 	.word	0x200002cc
 8002280:	200003e0 	.word	0x200003e0
 8002284:	080084c8 	.word	0x080084c8
 8002288:	20000004 	.word	0x20000004
 800228c:	20000000 	.word	0x20000000
 8002290:	200003ec 	.word	0x200003ec

08002294 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002294:	b580      	push	{r7, lr}
 8002296:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002298:	4802      	ldr	r0, [pc, #8]	; (80022a4 <USART1_IRQHandler+0x10>)
 800229a:	f002 fce1 	bl	8004c60 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800229e:	bf00      	nop
 80022a0:	bd80      	pop	{r7, pc}
 80022a2:	bf00      	nop
 80022a4:	20000314 	.word	0x20000314

080022a8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80022a8:	b480      	push	{r7}
 80022aa:	af00      	add	r7, sp, #0
	return 1;
 80022ac:	2301      	movs	r3, #1
}
 80022ae:	4618      	mov	r0, r3
 80022b0:	46bd      	mov	sp, r7
 80022b2:	bc80      	pop	{r7}
 80022b4:	4770      	bx	lr

080022b6 <_kill>:

int _kill(int pid, int sig)
{
 80022b6:	b580      	push	{r7, lr}
 80022b8:	b082      	sub	sp, #8
 80022ba:	af00      	add	r7, sp, #0
 80022bc:	6078      	str	r0, [r7, #4]
 80022be:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80022c0:	f003 f9de 	bl	8005680 <__errno>
 80022c4:	4603      	mov	r3, r0
 80022c6:	2216      	movs	r2, #22
 80022c8:	601a      	str	r2, [r3, #0]
	return -1;
 80022ca:	f04f 33ff 	mov.w	r3, #4294967295
}
 80022ce:	4618      	mov	r0, r3
 80022d0:	3708      	adds	r7, #8
 80022d2:	46bd      	mov	sp, r7
 80022d4:	bd80      	pop	{r7, pc}

080022d6 <_exit>:

void _exit (int status)
{
 80022d6:	b580      	push	{r7, lr}
 80022d8:	b082      	sub	sp, #8
 80022da:	af00      	add	r7, sp, #0
 80022dc:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80022de:	f04f 31ff 	mov.w	r1, #4294967295
 80022e2:	6878      	ldr	r0, [r7, #4]
 80022e4:	f7ff ffe7 	bl	80022b6 <_kill>
	while (1) {}		/* Make sure we hang here */
 80022e8:	e7fe      	b.n	80022e8 <_exit+0x12>

080022ea <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80022ea:	b580      	push	{r7, lr}
 80022ec:	b086      	sub	sp, #24
 80022ee:	af00      	add	r7, sp, #0
 80022f0:	60f8      	str	r0, [r7, #12]
 80022f2:	60b9      	str	r1, [r7, #8]
 80022f4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022f6:	2300      	movs	r3, #0
 80022f8:	617b      	str	r3, [r7, #20]
 80022fa:	e00a      	b.n	8002312 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80022fc:	f3af 8000 	nop.w
 8002300:	4601      	mov	r1, r0
 8002302:	68bb      	ldr	r3, [r7, #8]
 8002304:	1c5a      	adds	r2, r3, #1
 8002306:	60ba      	str	r2, [r7, #8]
 8002308:	b2ca      	uxtb	r2, r1
 800230a:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800230c:	697b      	ldr	r3, [r7, #20]
 800230e:	3301      	adds	r3, #1
 8002310:	617b      	str	r3, [r7, #20]
 8002312:	697a      	ldr	r2, [r7, #20]
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	429a      	cmp	r2, r3
 8002318:	dbf0      	blt.n	80022fc <_read+0x12>
	}

return len;
 800231a:	687b      	ldr	r3, [r7, #4]
}
 800231c:	4618      	mov	r0, r3
 800231e:	3718      	adds	r7, #24
 8002320:	46bd      	mov	sp, r7
 8002322:	bd80      	pop	{r7, pc}

08002324 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002324:	b580      	push	{r7, lr}
 8002326:	b086      	sub	sp, #24
 8002328:	af00      	add	r7, sp, #0
 800232a:	60f8      	str	r0, [r7, #12]
 800232c:	60b9      	str	r1, [r7, #8]
 800232e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002330:	2300      	movs	r3, #0
 8002332:	617b      	str	r3, [r7, #20]
 8002334:	e009      	b.n	800234a <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002336:	68bb      	ldr	r3, [r7, #8]
 8002338:	1c5a      	adds	r2, r3, #1
 800233a:	60ba      	str	r2, [r7, #8]
 800233c:	781b      	ldrb	r3, [r3, #0]
 800233e:	4618      	mov	r0, r3
 8002340:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002344:	697b      	ldr	r3, [r7, #20]
 8002346:	3301      	adds	r3, #1
 8002348:	617b      	str	r3, [r7, #20]
 800234a:	697a      	ldr	r2, [r7, #20]
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	429a      	cmp	r2, r3
 8002350:	dbf1      	blt.n	8002336 <_write+0x12>
	}
	return len;
 8002352:	687b      	ldr	r3, [r7, #4]
}
 8002354:	4618      	mov	r0, r3
 8002356:	3718      	adds	r7, #24
 8002358:	46bd      	mov	sp, r7
 800235a:	bd80      	pop	{r7, pc}

0800235c <_close>:

int _close(int file)
{
 800235c:	b480      	push	{r7}
 800235e:	b083      	sub	sp, #12
 8002360:	af00      	add	r7, sp, #0
 8002362:	6078      	str	r0, [r7, #4]
	return -1;
 8002364:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002368:	4618      	mov	r0, r3
 800236a:	370c      	adds	r7, #12
 800236c:	46bd      	mov	sp, r7
 800236e:	bc80      	pop	{r7}
 8002370:	4770      	bx	lr

08002372 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002372:	b480      	push	{r7}
 8002374:	b083      	sub	sp, #12
 8002376:	af00      	add	r7, sp, #0
 8002378:	6078      	str	r0, [r7, #4]
 800237a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800237c:	683b      	ldr	r3, [r7, #0]
 800237e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002382:	605a      	str	r2, [r3, #4]
	return 0;
 8002384:	2300      	movs	r3, #0
}
 8002386:	4618      	mov	r0, r3
 8002388:	370c      	adds	r7, #12
 800238a:	46bd      	mov	sp, r7
 800238c:	bc80      	pop	{r7}
 800238e:	4770      	bx	lr

08002390 <_isatty>:

int _isatty(int file)
{
 8002390:	b480      	push	{r7}
 8002392:	b083      	sub	sp, #12
 8002394:	af00      	add	r7, sp, #0
 8002396:	6078      	str	r0, [r7, #4]
	return 1;
 8002398:	2301      	movs	r3, #1
}
 800239a:	4618      	mov	r0, r3
 800239c:	370c      	adds	r7, #12
 800239e:	46bd      	mov	sp, r7
 80023a0:	bc80      	pop	{r7}
 80023a2:	4770      	bx	lr

080023a4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80023a4:	b480      	push	{r7}
 80023a6:	b085      	sub	sp, #20
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	60f8      	str	r0, [r7, #12]
 80023ac:	60b9      	str	r1, [r7, #8]
 80023ae:	607a      	str	r2, [r7, #4]
	return 0;
 80023b0:	2300      	movs	r3, #0
}
 80023b2:	4618      	mov	r0, r3
 80023b4:	3714      	adds	r7, #20
 80023b6:	46bd      	mov	sp, r7
 80023b8:	bc80      	pop	{r7}
 80023ba:	4770      	bx	lr

080023bc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80023bc:	b580      	push	{r7, lr}
 80023be:	b086      	sub	sp, #24
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80023c4:	4a14      	ldr	r2, [pc, #80]	; (8002418 <_sbrk+0x5c>)
 80023c6:	4b15      	ldr	r3, [pc, #84]	; (800241c <_sbrk+0x60>)
 80023c8:	1ad3      	subs	r3, r2, r3
 80023ca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80023cc:	697b      	ldr	r3, [r7, #20]
 80023ce:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80023d0:	4b13      	ldr	r3, [pc, #76]	; (8002420 <_sbrk+0x64>)
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d102      	bne.n	80023de <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80023d8:	4b11      	ldr	r3, [pc, #68]	; (8002420 <_sbrk+0x64>)
 80023da:	4a12      	ldr	r2, [pc, #72]	; (8002424 <_sbrk+0x68>)
 80023dc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80023de:	4b10      	ldr	r3, [pc, #64]	; (8002420 <_sbrk+0x64>)
 80023e0:	681a      	ldr	r2, [r3, #0]
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	4413      	add	r3, r2
 80023e6:	693a      	ldr	r2, [r7, #16]
 80023e8:	429a      	cmp	r2, r3
 80023ea:	d207      	bcs.n	80023fc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80023ec:	f003 f948 	bl	8005680 <__errno>
 80023f0:	4603      	mov	r3, r0
 80023f2:	220c      	movs	r2, #12
 80023f4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80023f6:	f04f 33ff 	mov.w	r3, #4294967295
 80023fa:	e009      	b.n	8002410 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80023fc:	4b08      	ldr	r3, [pc, #32]	; (8002420 <_sbrk+0x64>)
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002402:	4b07      	ldr	r3, [pc, #28]	; (8002420 <_sbrk+0x64>)
 8002404:	681a      	ldr	r2, [r3, #0]
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	4413      	add	r3, r2
 800240a:	4a05      	ldr	r2, [pc, #20]	; (8002420 <_sbrk+0x64>)
 800240c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800240e:	68fb      	ldr	r3, [r7, #12]
}
 8002410:	4618      	mov	r0, r3
 8002412:	3718      	adds	r7, #24
 8002414:	46bd      	mov	sp, r7
 8002416:	bd80      	pop	{r7, pc}
 8002418:	20005000 	.word	0x20005000
 800241c:	00000400 	.word	0x00000400
 8002420:	20000600 	.word	0x20000600
 8002424:	20000618 	.word	0x20000618

08002428 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002428:	b480      	push	{r7}
 800242a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800242c:	bf00      	nop
 800242e:	46bd      	mov	sp, r7
 8002430:	bc80      	pop	{r7}
 8002432:	4770      	bx	lr

08002434 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002434:	480c      	ldr	r0, [pc, #48]	; (8002468 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002436:	490d      	ldr	r1, [pc, #52]	; (800246c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002438:	4a0d      	ldr	r2, [pc, #52]	; (8002470 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800243a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800243c:	e002      	b.n	8002444 <LoopCopyDataInit>

0800243e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800243e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002440:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002442:	3304      	adds	r3, #4

08002444 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002444:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002446:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002448:	d3f9      	bcc.n	800243e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800244a:	4a0a      	ldr	r2, [pc, #40]	; (8002474 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800244c:	4c0a      	ldr	r4, [pc, #40]	; (8002478 <LoopFillZerobss+0x22>)
  movs r3, #0
 800244e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002450:	e001      	b.n	8002456 <LoopFillZerobss>

08002452 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002452:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002454:	3204      	adds	r2, #4

08002456 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002456:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002458:	d3fb      	bcc.n	8002452 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800245a:	f7ff ffe5 	bl	8002428 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800245e:	f003 f915 	bl	800568c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002462:	f7ff f9a5 	bl	80017b0 <main>
  bx lr
 8002466:	4770      	bx	lr
  ldr r0, =_sdata
 8002468:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800246c:	200001e8 	.word	0x200001e8
  ldr r2, =_sidata
 8002470:	08009044 	.word	0x08009044
  ldr r2, =_sbss
 8002474:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 8002478:	20000618 	.word	0x20000618

0800247c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800247c:	e7fe      	b.n	800247c <ADC1_2_IRQHandler>
	...

08002480 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002480:	b580      	push	{r7, lr}
 8002482:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002484:	4b08      	ldr	r3, [pc, #32]	; (80024a8 <HAL_Init+0x28>)
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	4a07      	ldr	r2, [pc, #28]	; (80024a8 <HAL_Init+0x28>)
 800248a:	f043 0310 	orr.w	r3, r3, #16
 800248e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002490:	2003      	movs	r0, #3
 8002492:	f000 f947 	bl	8002724 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002496:	200f      	movs	r0, #15
 8002498:	f000 f808 	bl	80024ac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800249c:	f7ff fd42 	bl	8001f24 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80024a0:	2300      	movs	r3, #0
}
 80024a2:	4618      	mov	r0, r3
 80024a4:	bd80      	pop	{r7, pc}
 80024a6:	bf00      	nop
 80024a8:	40022000 	.word	0x40022000

080024ac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80024ac:	b580      	push	{r7, lr}
 80024ae:	b082      	sub	sp, #8
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80024b4:	4b12      	ldr	r3, [pc, #72]	; (8002500 <HAL_InitTick+0x54>)
 80024b6:	681a      	ldr	r2, [r3, #0]
 80024b8:	4b12      	ldr	r3, [pc, #72]	; (8002504 <HAL_InitTick+0x58>)
 80024ba:	781b      	ldrb	r3, [r3, #0]
 80024bc:	4619      	mov	r1, r3
 80024be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80024c2:	fbb3 f3f1 	udiv	r3, r3, r1
 80024c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80024ca:	4618      	mov	r0, r3
 80024cc:	f000 f95f 	bl	800278e <HAL_SYSTICK_Config>
 80024d0:	4603      	mov	r3, r0
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d001      	beq.n	80024da <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80024d6:	2301      	movs	r3, #1
 80024d8:	e00e      	b.n	80024f8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	2b0f      	cmp	r3, #15
 80024de:	d80a      	bhi.n	80024f6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80024e0:	2200      	movs	r2, #0
 80024e2:	6879      	ldr	r1, [r7, #4]
 80024e4:	f04f 30ff 	mov.w	r0, #4294967295
 80024e8:	f000 f927 	bl	800273a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80024ec:	4a06      	ldr	r2, [pc, #24]	; (8002508 <HAL_InitTick+0x5c>)
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80024f2:	2300      	movs	r3, #0
 80024f4:	e000      	b.n	80024f8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80024f6:	2301      	movs	r3, #1
}
 80024f8:	4618      	mov	r0, r3
 80024fa:	3708      	adds	r7, #8
 80024fc:	46bd      	mov	sp, r7
 80024fe:	bd80      	pop	{r7, pc}
 8002500:	2000000c 	.word	0x2000000c
 8002504:	20000014 	.word	0x20000014
 8002508:	20000010 	.word	0x20000010

0800250c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800250c:	b480      	push	{r7}
 800250e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002510:	4b05      	ldr	r3, [pc, #20]	; (8002528 <HAL_IncTick+0x1c>)
 8002512:	781b      	ldrb	r3, [r3, #0]
 8002514:	461a      	mov	r2, r3
 8002516:	4b05      	ldr	r3, [pc, #20]	; (800252c <HAL_IncTick+0x20>)
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	4413      	add	r3, r2
 800251c:	4a03      	ldr	r2, [pc, #12]	; (800252c <HAL_IncTick+0x20>)
 800251e:	6013      	str	r3, [r2, #0]
}
 8002520:	bf00      	nop
 8002522:	46bd      	mov	sp, r7
 8002524:	bc80      	pop	{r7}
 8002526:	4770      	bx	lr
 8002528:	20000014 	.word	0x20000014
 800252c:	20000604 	.word	0x20000604

08002530 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002530:	b480      	push	{r7}
 8002532:	af00      	add	r7, sp, #0
  return uwTick;
 8002534:	4b02      	ldr	r3, [pc, #8]	; (8002540 <HAL_GetTick+0x10>)
 8002536:	681b      	ldr	r3, [r3, #0]
}
 8002538:	4618      	mov	r0, r3
 800253a:	46bd      	mov	sp, r7
 800253c:	bc80      	pop	{r7}
 800253e:	4770      	bx	lr
 8002540:	20000604 	.word	0x20000604

08002544 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002544:	b580      	push	{r7, lr}
 8002546:	b084      	sub	sp, #16
 8002548:	af00      	add	r7, sp, #0
 800254a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800254c:	f7ff fff0 	bl	8002530 <HAL_GetTick>
 8002550:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	f1b3 3fff 	cmp.w	r3, #4294967295
 800255c:	d005      	beq.n	800256a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800255e:	4b0a      	ldr	r3, [pc, #40]	; (8002588 <HAL_Delay+0x44>)
 8002560:	781b      	ldrb	r3, [r3, #0]
 8002562:	461a      	mov	r2, r3
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	4413      	add	r3, r2
 8002568:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800256a:	bf00      	nop
 800256c:	f7ff ffe0 	bl	8002530 <HAL_GetTick>
 8002570:	4602      	mov	r2, r0
 8002572:	68bb      	ldr	r3, [r7, #8]
 8002574:	1ad3      	subs	r3, r2, r3
 8002576:	68fa      	ldr	r2, [r7, #12]
 8002578:	429a      	cmp	r2, r3
 800257a:	d8f7      	bhi.n	800256c <HAL_Delay+0x28>
  {
  }
}
 800257c:	bf00      	nop
 800257e:	bf00      	nop
 8002580:	3710      	adds	r7, #16
 8002582:	46bd      	mov	sp, r7
 8002584:	bd80      	pop	{r7, pc}
 8002586:	bf00      	nop
 8002588:	20000014 	.word	0x20000014

0800258c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800258c:	b480      	push	{r7}
 800258e:	b085      	sub	sp, #20
 8002590:	af00      	add	r7, sp, #0
 8002592:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	f003 0307 	and.w	r3, r3, #7
 800259a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800259c:	4b0c      	ldr	r3, [pc, #48]	; (80025d0 <__NVIC_SetPriorityGrouping+0x44>)
 800259e:	68db      	ldr	r3, [r3, #12]
 80025a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80025a2:	68ba      	ldr	r2, [r7, #8]
 80025a4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80025a8:	4013      	ands	r3, r2
 80025aa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80025b0:	68bb      	ldr	r3, [r7, #8]
 80025b2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80025b4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80025b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80025bc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80025be:	4a04      	ldr	r2, [pc, #16]	; (80025d0 <__NVIC_SetPriorityGrouping+0x44>)
 80025c0:	68bb      	ldr	r3, [r7, #8]
 80025c2:	60d3      	str	r3, [r2, #12]
}
 80025c4:	bf00      	nop
 80025c6:	3714      	adds	r7, #20
 80025c8:	46bd      	mov	sp, r7
 80025ca:	bc80      	pop	{r7}
 80025cc:	4770      	bx	lr
 80025ce:	bf00      	nop
 80025d0:	e000ed00 	.word	0xe000ed00

080025d4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80025d4:	b480      	push	{r7}
 80025d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80025d8:	4b04      	ldr	r3, [pc, #16]	; (80025ec <__NVIC_GetPriorityGrouping+0x18>)
 80025da:	68db      	ldr	r3, [r3, #12]
 80025dc:	0a1b      	lsrs	r3, r3, #8
 80025de:	f003 0307 	and.w	r3, r3, #7
}
 80025e2:	4618      	mov	r0, r3
 80025e4:	46bd      	mov	sp, r7
 80025e6:	bc80      	pop	{r7}
 80025e8:	4770      	bx	lr
 80025ea:	bf00      	nop
 80025ec:	e000ed00 	.word	0xe000ed00

080025f0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80025f0:	b480      	push	{r7}
 80025f2:	b083      	sub	sp, #12
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	4603      	mov	r3, r0
 80025f8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025fe:	2b00      	cmp	r3, #0
 8002600:	db0b      	blt.n	800261a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002602:	79fb      	ldrb	r3, [r7, #7]
 8002604:	f003 021f 	and.w	r2, r3, #31
 8002608:	4906      	ldr	r1, [pc, #24]	; (8002624 <__NVIC_EnableIRQ+0x34>)
 800260a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800260e:	095b      	lsrs	r3, r3, #5
 8002610:	2001      	movs	r0, #1
 8002612:	fa00 f202 	lsl.w	r2, r0, r2
 8002616:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800261a:	bf00      	nop
 800261c:	370c      	adds	r7, #12
 800261e:	46bd      	mov	sp, r7
 8002620:	bc80      	pop	{r7}
 8002622:	4770      	bx	lr
 8002624:	e000e100 	.word	0xe000e100

08002628 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002628:	b480      	push	{r7}
 800262a:	b083      	sub	sp, #12
 800262c:	af00      	add	r7, sp, #0
 800262e:	4603      	mov	r3, r0
 8002630:	6039      	str	r1, [r7, #0]
 8002632:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002634:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002638:	2b00      	cmp	r3, #0
 800263a:	db0a      	blt.n	8002652 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800263c:	683b      	ldr	r3, [r7, #0]
 800263e:	b2da      	uxtb	r2, r3
 8002640:	490c      	ldr	r1, [pc, #48]	; (8002674 <__NVIC_SetPriority+0x4c>)
 8002642:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002646:	0112      	lsls	r2, r2, #4
 8002648:	b2d2      	uxtb	r2, r2
 800264a:	440b      	add	r3, r1
 800264c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002650:	e00a      	b.n	8002668 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002652:	683b      	ldr	r3, [r7, #0]
 8002654:	b2da      	uxtb	r2, r3
 8002656:	4908      	ldr	r1, [pc, #32]	; (8002678 <__NVIC_SetPriority+0x50>)
 8002658:	79fb      	ldrb	r3, [r7, #7]
 800265a:	f003 030f 	and.w	r3, r3, #15
 800265e:	3b04      	subs	r3, #4
 8002660:	0112      	lsls	r2, r2, #4
 8002662:	b2d2      	uxtb	r2, r2
 8002664:	440b      	add	r3, r1
 8002666:	761a      	strb	r2, [r3, #24]
}
 8002668:	bf00      	nop
 800266a:	370c      	adds	r7, #12
 800266c:	46bd      	mov	sp, r7
 800266e:	bc80      	pop	{r7}
 8002670:	4770      	bx	lr
 8002672:	bf00      	nop
 8002674:	e000e100 	.word	0xe000e100
 8002678:	e000ed00 	.word	0xe000ed00

0800267c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800267c:	b480      	push	{r7}
 800267e:	b089      	sub	sp, #36	; 0x24
 8002680:	af00      	add	r7, sp, #0
 8002682:	60f8      	str	r0, [r7, #12]
 8002684:	60b9      	str	r1, [r7, #8]
 8002686:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	f003 0307 	and.w	r3, r3, #7
 800268e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002690:	69fb      	ldr	r3, [r7, #28]
 8002692:	f1c3 0307 	rsb	r3, r3, #7
 8002696:	2b04      	cmp	r3, #4
 8002698:	bf28      	it	cs
 800269a:	2304      	movcs	r3, #4
 800269c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800269e:	69fb      	ldr	r3, [r7, #28]
 80026a0:	3304      	adds	r3, #4
 80026a2:	2b06      	cmp	r3, #6
 80026a4:	d902      	bls.n	80026ac <NVIC_EncodePriority+0x30>
 80026a6:	69fb      	ldr	r3, [r7, #28]
 80026a8:	3b03      	subs	r3, #3
 80026aa:	e000      	b.n	80026ae <NVIC_EncodePriority+0x32>
 80026ac:	2300      	movs	r3, #0
 80026ae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026b0:	f04f 32ff 	mov.w	r2, #4294967295
 80026b4:	69bb      	ldr	r3, [r7, #24]
 80026b6:	fa02 f303 	lsl.w	r3, r2, r3
 80026ba:	43da      	mvns	r2, r3
 80026bc:	68bb      	ldr	r3, [r7, #8]
 80026be:	401a      	ands	r2, r3
 80026c0:	697b      	ldr	r3, [r7, #20]
 80026c2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80026c4:	f04f 31ff 	mov.w	r1, #4294967295
 80026c8:	697b      	ldr	r3, [r7, #20]
 80026ca:	fa01 f303 	lsl.w	r3, r1, r3
 80026ce:	43d9      	mvns	r1, r3
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026d4:	4313      	orrs	r3, r2
         );
}
 80026d6:	4618      	mov	r0, r3
 80026d8:	3724      	adds	r7, #36	; 0x24
 80026da:	46bd      	mov	sp, r7
 80026dc:	bc80      	pop	{r7}
 80026de:	4770      	bx	lr

080026e0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80026e0:	b580      	push	{r7, lr}
 80026e2:	b082      	sub	sp, #8
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	3b01      	subs	r3, #1
 80026ec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80026f0:	d301      	bcc.n	80026f6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80026f2:	2301      	movs	r3, #1
 80026f4:	e00f      	b.n	8002716 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80026f6:	4a0a      	ldr	r2, [pc, #40]	; (8002720 <SysTick_Config+0x40>)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	3b01      	subs	r3, #1
 80026fc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80026fe:	210f      	movs	r1, #15
 8002700:	f04f 30ff 	mov.w	r0, #4294967295
 8002704:	f7ff ff90 	bl	8002628 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002708:	4b05      	ldr	r3, [pc, #20]	; (8002720 <SysTick_Config+0x40>)
 800270a:	2200      	movs	r2, #0
 800270c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800270e:	4b04      	ldr	r3, [pc, #16]	; (8002720 <SysTick_Config+0x40>)
 8002710:	2207      	movs	r2, #7
 8002712:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002714:	2300      	movs	r3, #0
}
 8002716:	4618      	mov	r0, r3
 8002718:	3708      	adds	r7, #8
 800271a:	46bd      	mov	sp, r7
 800271c:	bd80      	pop	{r7, pc}
 800271e:	bf00      	nop
 8002720:	e000e010 	.word	0xe000e010

08002724 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002724:	b580      	push	{r7, lr}
 8002726:	b082      	sub	sp, #8
 8002728:	af00      	add	r7, sp, #0
 800272a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800272c:	6878      	ldr	r0, [r7, #4]
 800272e:	f7ff ff2d 	bl	800258c <__NVIC_SetPriorityGrouping>
}
 8002732:	bf00      	nop
 8002734:	3708      	adds	r7, #8
 8002736:	46bd      	mov	sp, r7
 8002738:	bd80      	pop	{r7, pc}

0800273a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800273a:	b580      	push	{r7, lr}
 800273c:	b086      	sub	sp, #24
 800273e:	af00      	add	r7, sp, #0
 8002740:	4603      	mov	r3, r0
 8002742:	60b9      	str	r1, [r7, #8]
 8002744:	607a      	str	r2, [r7, #4]
 8002746:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002748:	2300      	movs	r3, #0
 800274a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800274c:	f7ff ff42 	bl	80025d4 <__NVIC_GetPriorityGrouping>
 8002750:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002752:	687a      	ldr	r2, [r7, #4]
 8002754:	68b9      	ldr	r1, [r7, #8]
 8002756:	6978      	ldr	r0, [r7, #20]
 8002758:	f7ff ff90 	bl	800267c <NVIC_EncodePriority>
 800275c:	4602      	mov	r2, r0
 800275e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002762:	4611      	mov	r1, r2
 8002764:	4618      	mov	r0, r3
 8002766:	f7ff ff5f 	bl	8002628 <__NVIC_SetPriority>
}
 800276a:	bf00      	nop
 800276c:	3718      	adds	r7, #24
 800276e:	46bd      	mov	sp, r7
 8002770:	bd80      	pop	{r7, pc}

08002772 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002772:	b580      	push	{r7, lr}
 8002774:	b082      	sub	sp, #8
 8002776:	af00      	add	r7, sp, #0
 8002778:	4603      	mov	r3, r0
 800277a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800277c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002780:	4618      	mov	r0, r3
 8002782:	f7ff ff35 	bl	80025f0 <__NVIC_EnableIRQ>
}
 8002786:	bf00      	nop
 8002788:	3708      	adds	r7, #8
 800278a:	46bd      	mov	sp, r7
 800278c:	bd80      	pop	{r7, pc}

0800278e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800278e:	b580      	push	{r7, lr}
 8002790:	b082      	sub	sp, #8
 8002792:	af00      	add	r7, sp, #0
 8002794:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002796:	6878      	ldr	r0, [r7, #4]
 8002798:	f7ff ffa2 	bl	80026e0 <SysTick_Config>
 800279c:	4603      	mov	r3, r0
}
 800279e:	4618      	mov	r0, r3
 80027a0:	3708      	adds	r7, #8
 80027a2:	46bd      	mov	sp, r7
 80027a4:	bd80      	pop	{r7, pc}
	...

080027a8 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80027a8:	b480      	push	{r7}
 80027aa:	b085      	sub	sp, #20
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80027b0:	2300      	movs	r3, #0
 80027b2:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d101      	bne.n	80027be <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80027ba:	2301      	movs	r3, #1
 80027bc:	e043      	b.n	8002846 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	461a      	mov	r2, r3
 80027c4:	4b22      	ldr	r3, [pc, #136]	; (8002850 <HAL_DMA_Init+0xa8>)
 80027c6:	4413      	add	r3, r2
 80027c8:	4a22      	ldr	r2, [pc, #136]	; (8002854 <HAL_DMA_Init+0xac>)
 80027ca:	fba2 2303 	umull	r2, r3, r2, r3
 80027ce:	091b      	lsrs	r3, r3, #4
 80027d0:	009a      	lsls	r2, r3, #2
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	4a1f      	ldr	r2, [pc, #124]	; (8002858 <HAL_DMA_Init+0xb0>)
 80027da:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	2202      	movs	r2, #2
 80027e0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80027f2:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80027f6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8002800:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	68db      	ldr	r3, [r3, #12]
 8002806:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800280c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	695b      	ldr	r3, [r3, #20]
 8002812:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002818:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	69db      	ldr	r3, [r3, #28]
 800281e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002820:	68fa      	ldr	r2, [r7, #12]
 8002822:	4313      	orrs	r3, r2
 8002824:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	68fa      	ldr	r2, [r7, #12]
 800282c:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	2200      	movs	r2, #0
 8002832:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	2201      	movs	r2, #1
 8002838:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	2200      	movs	r2, #0
 8002840:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8002844:	2300      	movs	r3, #0
}
 8002846:	4618      	mov	r0, r3
 8002848:	3714      	adds	r7, #20
 800284a:	46bd      	mov	sp, r7
 800284c:	bc80      	pop	{r7}
 800284e:	4770      	bx	lr
 8002850:	bffdfff8 	.word	0xbffdfff8
 8002854:	cccccccd 	.word	0xcccccccd
 8002858:	40020000 	.word	0x40020000

0800285c <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800285c:	b580      	push	{r7, lr}
 800285e:	b086      	sub	sp, #24
 8002860:	af00      	add	r7, sp, #0
 8002862:	60f8      	str	r0, [r7, #12]
 8002864:	60b9      	str	r1, [r7, #8]
 8002866:	607a      	str	r2, [r7, #4]
 8002868:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800286a:	2300      	movs	r3, #0
 800286c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002874:	2b01      	cmp	r3, #1
 8002876:	d101      	bne.n	800287c <HAL_DMA_Start_IT+0x20>
 8002878:	2302      	movs	r3, #2
 800287a:	e04a      	b.n	8002912 <HAL_DMA_Start_IT+0xb6>
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	2201      	movs	r2, #1
 8002880:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800288a:	2b01      	cmp	r3, #1
 800288c:	d13a      	bne.n	8002904 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	2202      	movs	r2, #2
 8002892:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	2200      	movs	r2, #0
 800289a:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	681a      	ldr	r2, [r3, #0]
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f022 0201 	bic.w	r2, r2, #1
 80028aa:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80028ac:	683b      	ldr	r3, [r7, #0]
 80028ae:	687a      	ldr	r2, [r7, #4]
 80028b0:	68b9      	ldr	r1, [r7, #8]
 80028b2:	68f8      	ldr	r0, [r7, #12]
 80028b4:	f000 f9e8 	bl	8002c88 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d008      	beq.n	80028d2 <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	681a      	ldr	r2, [r3, #0]
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f042 020e 	orr.w	r2, r2, #14
 80028ce:	601a      	str	r2, [r3, #0]
 80028d0:	e00f      	b.n	80028f2 <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	681a      	ldr	r2, [r3, #0]
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f022 0204 	bic.w	r2, r2, #4
 80028e0:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	681a      	ldr	r2, [r3, #0]
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f042 020a 	orr.w	r2, r2, #10
 80028f0:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	681a      	ldr	r2, [r3, #0]
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f042 0201 	orr.w	r2, r2, #1
 8002900:	601a      	str	r2, [r3, #0]
 8002902:	e005      	b.n	8002910 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	2200      	movs	r2, #0
 8002908:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 800290c:	2302      	movs	r3, #2
 800290e:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8002910:	7dfb      	ldrb	r3, [r7, #23]
}
 8002912:	4618      	mov	r0, r3
 8002914:	3718      	adds	r7, #24
 8002916:	46bd      	mov	sp, r7
 8002918:	bd80      	pop	{r7, pc}

0800291a <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800291a:	b480      	push	{r7}
 800291c:	b085      	sub	sp, #20
 800291e:	af00      	add	r7, sp, #0
 8002920:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002922:	2300      	movs	r3, #0
 8002924:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800292c:	2b02      	cmp	r3, #2
 800292e:	d008      	beq.n	8002942 <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	2204      	movs	r2, #4
 8002934:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	2200      	movs	r2, #0
 800293a:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 800293e:	2301      	movs	r3, #1
 8002940:	e020      	b.n	8002984 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	681a      	ldr	r2, [r3, #0]
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f022 020e 	bic.w	r2, r2, #14
 8002950:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	681a      	ldr	r2, [r3, #0]
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f022 0201 	bic.w	r2, r2, #1
 8002960:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800296a:	2101      	movs	r1, #1
 800296c:	fa01 f202 	lsl.w	r2, r1, r2
 8002970:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	2201      	movs	r2, #1
 8002976:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	2200      	movs	r2, #0
 800297e:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8002982:	7bfb      	ldrb	r3, [r7, #15]
}
 8002984:	4618      	mov	r0, r3
 8002986:	3714      	adds	r7, #20
 8002988:	46bd      	mov	sp, r7
 800298a:	bc80      	pop	{r7}
 800298c:	4770      	bx	lr
	...

08002990 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002990:	b580      	push	{r7, lr}
 8002992:	b084      	sub	sp, #16
 8002994:	af00      	add	r7, sp, #0
 8002996:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002998:	2300      	movs	r3, #0
 800299a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80029a2:	2b02      	cmp	r3, #2
 80029a4:	d005      	beq.n	80029b2 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	2204      	movs	r2, #4
 80029aa:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80029ac:	2301      	movs	r3, #1
 80029ae:	73fb      	strb	r3, [r7, #15]
 80029b0:	e051      	b.n	8002a56 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	681a      	ldr	r2, [r3, #0]
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f022 020e 	bic.w	r2, r2, #14
 80029c0:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	681a      	ldr	r2, [r3, #0]
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f022 0201 	bic.w	r2, r2, #1
 80029d0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	4a22      	ldr	r2, [pc, #136]	; (8002a60 <HAL_DMA_Abort_IT+0xd0>)
 80029d8:	4293      	cmp	r3, r2
 80029da:	d029      	beq.n	8002a30 <HAL_DMA_Abort_IT+0xa0>
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	4a20      	ldr	r2, [pc, #128]	; (8002a64 <HAL_DMA_Abort_IT+0xd4>)
 80029e2:	4293      	cmp	r3, r2
 80029e4:	d022      	beq.n	8002a2c <HAL_DMA_Abort_IT+0x9c>
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	4a1f      	ldr	r2, [pc, #124]	; (8002a68 <HAL_DMA_Abort_IT+0xd8>)
 80029ec:	4293      	cmp	r3, r2
 80029ee:	d01a      	beq.n	8002a26 <HAL_DMA_Abort_IT+0x96>
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	4a1d      	ldr	r2, [pc, #116]	; (8002a6c <HAL_DMA_Abort_IT+0xdc>)
 80029f6:	4293      	cmp	r3, r2
 80029f8:	d012      	beq.n	8002a20 <HAL_DMA_Abort_IT+0x90>
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	4a1c      	ldr	r2, [pc, #112]	; (8002a70 <HAL_DMA_Abort_IT+0xe0>)
 8002a00:	4293      	cmp	r3, r2
 8002a02:	d00a      	beq.n	8002a1a <HAL_DMA_Abort_IT+0x8a>
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	4a1a      	ldr	r2, [pc, #104]	; (8002a74 <HAL_DMA_Abort_IT+0xe4>)
 8002a0a:	4293      	cmp	r3, r2
 8002a0c:	d102      	bne.n	8002a14 <HAL_DMA_Abort_IT+0x84>
 8002a0e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002a12:	e00e      	b.n	8002a32 <HAL_DMA_Abort_IT+0xa2>
 8002a14:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002a18:	e00b      	b.n	8002a32 <HAL_DMA_Abort_IT+0xa2>
 8002a1a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002a1e:	e008      	b.n	8002a32 <HAL_DMA_Abort_IT+0xa2>
 8002a20:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002a24:	e005      	b.n	8002a32 <HAL_DMA_Abort_IT+0xa2>
 8002a26:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002a2a:	e002      	b.n	8002a32 <HAL_DMA_Abort_IT+0xa2>
 8002a2c:	2310      	movs	r3, #16
 8002a2e:	e000      	b.n	8002a32 <HAL_DMA_Abort_IT+0xa2>
 8002a30:	2301      	movs	r3, #1
 8002a32:	4a11      	ldr	r2, [pc, #68]	; (8002a78 <HAL_DMA_Abort_IT+0xe8>)
 8002a34:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	2201      	movs	r2, #1
 8002a3a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	2200      	movs	r2, #0
 8002a42:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d003      	beq.n	8002a56 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a52:	6878      	ldr	r0, [r7, #4]
 8002a54:	4798      	blx	r3
    } 
  }
  return status;
 8002a56:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a58:	4618      	mov	r0, r3
 8002a5a:	3710      	adds	r7, #16
 8002a5c:	46bd      	mov	sp, r7
 8002a5e:	bd80      	pop	{r7, pc}
 8002a60:	40020008 	.word	0x40020008
 8002a64:	4002001c 	.word	0x4002001c
 8002a68:	40020030 	.word	0x40020030
 8002a6c:	40020044 	.word	0x40020044
 8002a70:	40020058 	.word	0x40020058
 8002a74:	4002006c 	.word	0x4002006c
 8002a78:	40020000 	.word	0x40020000

08002a7c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	b084      	sub	sp, #16
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a98:	2204      	movs	r2, #4
 8002a9a:	409a      	lsls	r2, r3
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	4013      	ands	r3, r2
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d04f      	beq.n	8002b44 <HAL_DMA_IRQHandler+0xc8>
 8002aa4:	68bb      	ldr	r3, [r7, #8]
 8002aa6:	f003 0304 	and.w	r3, r3, #4
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d04a      	beq.n	8002b44 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f003 0320 	and.w	r3, r3, #32
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d107      	bne.n	8002acc <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	681a      	ldr	r2, [r3, #0]
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f022 0204 	bic.w	r2, r2, #4
 8002aca:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	4a66      	ldr	r2, [pc, #408]	; (8002c6c <HAL_DMA_IRQHandler+0x1f0>)
 8002ad2:	4293      	cmp	r3, r2
 8002ad4:	d029      	beq.n	8002b2a <HAL_DMA_IRQHandler+0xae>
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	4a65      	ldr	r2, [pc, #404]	; (8002c70 <HAL_DMA_IRQHandler+0x1f4>)
 8002adc:	4293      	cmp	r3, r2
 8002ade:	d022      	beq.n	8002b26 <HAL_DMA_IRQHandler+0xaa>
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	4a63      	ldr	r2, [pc, #396]	; (8002c74 <HAL_DMA_IRQHandler+0x1f8>)
 8002ae6:	4293      	cmp	r3, r2
 8002ae8:	d01a      	beq.n	8002b20 <HAL_DMA_IRQHandler+0xa4>
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	4a62      	ldr	r2, [pc, #392]	; (8002c78 <HAL_DMA_IRQHandler+0x1fc>)
 8002af0:	4293      	cmp	r3, r2
 8002af2:	d012      	beq.n	8002b1a <HAL_DMA_IRQHandler+0x9e>
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	4a60      	ldr	r2, [pc, #384]	; (8002c7c <HAL_DMA_IRQHandler+0x200>)
 8002afa:	4293      	cmp	r3, r2
 8002afc:	d00a      	beq.n	8002b14 <HAL_DMA_IRQHandler+0x98>
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	4a5f      	ldr	r2, [pc, #380]	; (8002c80 <HAL_DMA_IRQHandler+0x204>)
 8002b04:	4293      	cmp	r3, r2
 8002b06:	d102      	bne.n	8002b0e <HAL_DMA_IRQHandler+0x92>
 8002b08:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002b0c:	e00e      	b.n	8002b2c <HAL_DMA_IRQHandler+0xb0>
 8002b0e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8002b12:	e00b      	b.n	8002b2c <HAL_DMA_IRQHandler+0xb0>
 8002b14:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002b18:	e008      	b.n	8002b2c <HAL_DMA_IRQHandler+0xb0>
 8002b1a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002b1e:	e005      	b.n	8002b2c <HAL_DMA_IRQHandler+0xb0>
 8002b20:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002b24:	e002      	b.n	8002b2c <HAL_DMA_IRQHandler+0xb0>
 8002b26:	2340      	movs	r3, #64	; 0x40
 8002b28:	e000      	b.n	8002b2c <HAL_DMA_IRQHandler+0xb0>
 8002b2a:	2304      	movs	r3, #4
 8002b2c:	4a55      	ldr	r2, [pc, #340]	; (8002c84 <HAL_DMA_IRQHandler+0x208>)
 8002b2e:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	f000 8094 	beq.w	8002c62 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b3e:	6878      	ldr	r0, [r7, #4]
 8002b40:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8002b42:	e08e      	b.n	8002c62 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b48:	2202      	movs	r2, #2
 8002b4a:	409a      	lsls	r2, r3
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	4013      	ands	r3, r2
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d056      	beq.n	8002c02 <HAL_DMA_IRQHandler+0x186>
 8002b54:	68bb      	ldr	r3, [r7, #8]
 8002b56:	f003 0302 	and.w	r3, r3, #2
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d051      	beq.n	8002c02 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f003 0320 	and.w	r3, r3, #32
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d10b      	bne.n	8002b84 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	681a      	ldr	r2, [r3, #0]
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f022 020a 	bic.w	r2, r2, #10
 8002b7a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	2201      	movs	r2, #1
 8002b80:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	4a38      	ldr	r2, [pc, #224]	; (8002c6c <HAL_DMA_IRQHandler+0x1f0>)
 8002b8a:	4293      	cmp	r3, r2
 8002b8c:	d029      	beq.n	8002be2 <HAL_DMA_IRQHandler+0x166>
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	4a37      	ldr	r2, [pc, #220]	; (8002c70 <HAL_DMA_IRQHandler+0x1f4>)
 8002b94:	4293      	cmp	r3, r2
 8002b96:	d022      	beq.n	8002bde <HAL_DMA_IRQHandler+0x162>
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	4a35      	ldr	r2, [pc, #212]	; (8002c74 <HAL_DMA_IRQHandler+0x1f8>)
 8002b9e:	4293      	cmp	r3, r2
 8002ba0:	d01a      	beq.n	8002bd8 <HAL_DMA_IRQHandler+0x15c>
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	4a34      	ldr	r2, [pc, #208]	; (8002c78 <HAL_DMA_IRQHandler+0x1fc>)
 8002ba8:	4293      	cmp	r3, r2
 8002baa:	d012      	beq.n	8002bd2 <HAL_DMA_IRQHandler+0x156>
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	4a32      	ldr	r2, [pc, #200]	; (8002c7c <HAL_DMA_IRQHandler+0x200>)
 8002bb2:	4293      	cmp	r3, r2
 8002bb4:	d00a      	beq.n	8002bcc <HAL_DMA_IRQHandler+0x150>
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	4a31      	ldr	r2, [pc, #196]	; (8002c80 <HAL_DMA_IRQHandler+0x204>)
 8002bbc:	4293      	cmp	r3, r2
 8002bbe:	d102      	bne.n	8002bc6 <HAL_DMA_IRQHandler+0x14a>
 8002bc0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002bc4:	e00e      	b.n	8002be4 <HAL_DMA_IRQHandler+0x168>
 8002bc6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002bca:	e00b      	b.n	8002be4 <HAL_DMA_IRQHandler+0x168>
 8002bcc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002bd0:	e008      	b.n	8002be4 <HAL_DMA_IRQHandler+0x168>
 8002bd2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002bd6:	e005      	b.n	8002be4 <HAL_DMA_IRQHandler+0x168>
 8002bd8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002bdc:	e002      	b.n	8002be4 <HAL_DMA_IRQHandler+0x168>
 8002bde:	2320      	movs	r3, #32
 8002be0:	e000      	b.n	8002be4 <HAL_DMA_IRQHandler+0x168>
 8002be2:	2302      	movs	r3, #2
 8002be4:	4a27      	ldr	r2, [pc, #156]	; (8002c84 <HAL_DMA_IRQHandler+0x208>)
 8002be6:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	2200      	movs	r2, #0
 8002bec:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d034      	beq.n	8002c62 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bfc:	6878      	ldr	r0, [r7, #4]
 8002bfe:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002c00:	e02f      	b.n	8002c62 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c06:	2208      	movs	r2, #8
 8002c08:	409a      	lsls	r2, r3
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	4013      	ands	r3, r2
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d028      	beq.n	8002c64 <HAL_DMA_IRQHandler+0x1e8>
 8002c12:	68bb      	ldr	r3, [r7, #8]
 8002c14:	f003 0308 	and.w	r3, r3, #8
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d023      	beq.n	8002c64 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	681a      	ldr	r2, [r3, #0]
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f022 020e 	bic.w	r2, r2, #14
 8002c2a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c34:	2101      	movs	r1, #1
 8002c36:	fa01 f202 	lsl.w	r2, r1, r2
 8002c3a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	2201      	movs	r2, #1
 8002c40:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	2201      	movs	r2, #1
 8002c46:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	2200      	movs	r2, #0
 8002c4e:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d004      	beq.n	8002c64 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c5e:	6878      	ldr	r0, [r7, #4]
 8002c60:	4798      	blx	r3
    }
  }
  return;
 8002c62:	bf00      	nop
 8002c64:	bf00      	nop
}
 8002c66:	3710      	adds	r7, #16
 8002c68:	46bd      	mov	sp, r7
 8002c6a:	bd80      	pop	{r7, pc}
 8002c6c:	40020008 	.word	0x40020008
 8002c70:	4002001c 	.word	0x4002001c
 8002c74:	40020030 	.word	0x40020030
 8002c78:	40020044 	.word	0x40020044
 8002c7c:	40020058 	.word	0x40020058
 8002c80:	4002006c 	.word	0x4002006c
 8002c84:	40020000 	.word	0x40020000

08002c88 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002c88:	b480      	push	{r7}
 8002c8a:	b085      	sub	sp, #20
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	60f8      	str	r0, [r7, #12]
 8002c90:	60b9      	str	r1, [r7, #8]
 8002c92:	607a      	str	r2, [r7, #4]
 8002c94:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c9e:	2101      	movs	r1, #1
 8002ca0:	fa01 f202 	lsl.w	r2, r1, r2
 8002ca4:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	683a      	ldr	r2, [r7, #0]
 8002cac:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	685b      	ldr	r3, [r3, #4]
 8002cb2:	2b10      	cmp	r3, #16
 8002cb4:	d108      	bne.n	8002cc8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	687a      	ldr	r2, [r7, #4]
 8002cbc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	68ba      	ldr	r2, [r7, #8]
 8002cc4:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002cc6:	e007      	b.n	8002cd8 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	68ba      	ldr	r2, [r7, #8]
 8002cce:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	687a      	ldr	r2, [r7, #4]
 8002cd6:	60da      	str	r2, [r3, #12]
}
 8002cd8:	bf00      	nop
 8002cda:	3714      	adds	r7, #20
 8002cdc:	46bd      	mov	sp, r7
 8002cde:	bc80      	pop	{r7}
 8002ce0:	4770      	bx	lr
	...

08002ce4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002ce4:	b480      	push	{r7}
 8002ce6:	b08b      	sub	sp, #44	; 0x2c
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	6078      	str	r0, [r7, #4]
 8002cec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002cee:	2300      	movs	r3, #0
 8002cf0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002cf2:	2300      	movs	r3, #0
 8002cf4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002cf6:	e169      	b.n	8002fcc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002cf8:	2201      	movs	r2, #1
 8002cfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cfc:	fa02 f303 	lsl.w	r3, r2, r3
 8002d00:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002d02:	683b      	ldr	r3, [r7, #0]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	69fa      	ldr	r2, [r7, #28]
 8002d08:	4013      	ands	r3, r2
 8002d0a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002d0c:	69ba      	ldr	r2, [r7, #24]
 8002d0e:	69fb      	ldr	r3, [r7, #28]
 8002d10:	429a      	cmp	r2, r3
 8002d12:	f040 8158 	bne.w	8002fc6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002d16:	683b      	ldr	r3, [r7, #0]
 8002d18:	685b      	ldr	r3, [r3, #4]
 8002d1a:	4a9a      	ldr	r2, [pc, #616]	; (8002f84 <HAL_GPIO_Init+0x2a0>)
 8002d1c:	4293      	cmp	r3, r2
 8002d1e:	d05e      	beq.n	8002dde <HAL_GPIO_Init+0xfa>
 8002d20:	4a98      	ldr	r2, [pc, #608]	; (8002f84 <HAL_GPIO_Init+0x2a0>)
 8002d22:	4293      	cmp	r3, r2
 8002d24:	d875      	bhi.n	8002e12 <HAL_GPIO_Init+0x12e>
 8002d26:	4a98      	ldr	r2, [pc, #608]	; (8002f88 <HAL_GPIO_Init+0x2a4>)
 8002d28:	4293      	cmp	r3, r2
 8002d2a:	d058      	beq.n	8002dde <HAL_GPIO_Init+0xfa>
 8002d2c:	4a96      	ldr	r2, [pc, #600]	; (8002f88 <HAL_GPIO_Init+0x2a4>)
 8002d2e:	4293      	cmp	r3, r2
 8002d30:	d86f      	bhi.n	8002e12 <HAL_GPIO_Init+0x12e>
 8002d32:	4a96      	ldr	r2, [pc, #600]	; (8002f8c <HAL_GPIO_Init+0x2a8>)
 8002d34:	4293      	cmp	r3, r2
 8002d36:	d052      	beq.n	8002dde <HAL_GPIO_Init+0xfa>
 8002d38:	4a94      	ldr	r2, [pc, #592]	; (8002f8c <HAL_GPIO_Init+0x2a8>)
 8002d3a:	4293      	cmp	r3, r2
 8002d3c:	d869      	bhi.n	8002e12 <HAL_GPIO_Init+0x12e>
 8002d3e:	4a94      	ldr	r2, [pc, #592]	; (8002f90 <HAL_GPIO_Init+0x2ac>)
 8002d40:	4293      	cmp	r3, r2
 8002d42:	d04c      	beq.n	8002dde <HAL_GPIO_Init+0xfa>
 8002d44:	4a92      	ldr	r2, [pc, #584]	; (8002f90 <HAL_GPIO_Init+0x2ac>)
 8002d46:	4293      	cmp	r3, r2
 8002d48:	d863      	bhi.n	8002e12 <HAL_GPIO_Init+0x12e>
 8002d4a:	4a92      	ldr	r2, [pc, #584]	; (8002f94 <HAL_GPIO_Init+0x2b0>)
 8002d4c:	4293      	cmp	r3, r2
 8002d4e:	d046      	beq.n	8002dde <HAL_GPIO_Init+0xfa>
 8002d50:	4a90      	ldr	r2, [pc, #576]	; (8002f94 <HAL_GPIO_Init+0x2b0>)
 8002d52:	4293      	cmp	r3, r2
 8002d54:	d85d      	bhi.n	8002e12 <HAL_GPIO_Init+0x12e>
 8002d56:	2b12      	cmp	r3, #18
 8002d58:	d82a      	bhi.n	8002db0 <HAL_GPIO_Init+0xcc>
 8002d5a:	2b12      	cmp	r3, #18
 8002d5c:	d859      	bhi.n	8002e12 <HAL_GPIO_Init+0x12e>
 8002d5e:	a201      	add	r2, pc, #4	; (adr r2, 8002d64 <HAL_GPIO_Init+0x80>)
 8002d60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d64:	08002ddf 	.word	0x08002ddf
 8002d68:	08002db9 	.word	0x08002db9
 8002d6c:	08002dcb 	.word	0x08002dcb
 8002d70:	08002e0d 	.word	0x08002e0d
 8002d74:	08002e13 	.word	0x08002e13
 8002d78:	08002e13 	.word	0x08002e13
 8002d7c:	08002e13 	.word	0x08002e13
 8002d80:	08002e13 	.word	0x08002e13
 8002d84:	08002e13 	.word	0x08002e13
 8002d88:	08002e13 	.word	0x08002e13
 8002d8c:	08002e13 	.word	0x08002e13
 8002d90:	08002e13 	.word	0x08002e13
 8002d94:	08002e13 	.word	0x08002e13
 8002d98:	08002e13 	.word	0x08002e13
 8002d9c:	08002e13 	.word	0x08002e13
 8002da0:	08002e13 	.word	0x08002e13
 8002da4:	08002e13 	.word	0x08002e13
 8002da8:	08002dc1 	.word	0x08002dc1
 8002dac:	08002dd5 	.word	0x08002dd5
 8002db0:	4a79      	ldr	r2, [pc, #484]	; (8002f98 <HAL_GPIO_Init+0x2b4>)
 8002db2:	4293      	cmp	r3, r2
 8002db4:	d013      	beq.n	8002dde <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002db6:	e02c      	b.n	8002e12 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002db8:	683b      	ldr	r3, [r7, #0]
 8002dba:	68db      	ldr	r3, [r3, #12]
 8002dbc:	623b      	str	r3, [r7, #32]
          break;
 8002dbe:	e029      	b.n	8002e14 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002dc0:	683b      	ldr	r3, [r7, #0]
 8002dc2:	68db      	ldr	r3, [r3, #12]
 8002dc4:	3304      	adds	r3, #4
 8002dc6:	623b      	str	r3, [r7, #32]
          break;
 8002dc8:	e024      	b.n	8002e14 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002dca:	683b      	ldr	r3, [r7, #0]
 8002dcc:	68db      	ldr	r3, [r3, #12]
 8002dce:	3308      	adds	r3, #8
 8002dd0:	623b      	str	r3, [r7, #32]
          break;
 8002dd2:	e01f      	b.n	8002e14 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002dd4:	683b      	ldr	r3, [r7, #0]
 8002dd6:	68db      	ldr	r3, [r3, #12]
 8002dd8:	330c      	adds	r3, #12
 8002dda:	623b      	str	r3, [r7, #32]
          break;
 8002ddc:	e01a      	b.n	8002e14 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002dde:	683b      	ldr	r3, [r7, #0]
 8002de0:	689b      	ldr	r3, [r3, #8]
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d102      	bne.n	8002dec <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002de6:	2304      	movs	r3, #4
 8002de8:	623b      	str	r3, [r7, #32]
          break;
 8002dea:	e013      	b.n	8002e14 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002dec:	683b      	ldr	r3, [r7, #0]
 8002dee:	689b      	ldr	r3, [r3, #8]
 8002df0:	2b01      	cmp	r3, #1
 8002df2:	d105      	bne.n	8002e00 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002df4:	2308      	movs	r3, #8
 8002df6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	69fa      	ldr	r2, [r7, #28]
 8002dfc:	611a      	str	r2, [r3, #16]
          break;
 8002dfe:	e009      	b.n	8002e14 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002e00:	2308      	movs	r3, #8
 8002e02:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	69fa      	ldr	r2, [r7, #28]
 8002e08:	615a      	str	r2, [r3, #20]
          break;
 8002e0a:	e003      	b.n	8002e14 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002e0c:	2300      	movs	r3, #0
 8002e0e:	623b      	str	r3, [r7, #32]
          break;
 8002e10:	e000      	b.n	8002e14 <HAL_GPIO_Init+0x130>
          break;
 8002e12:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002e14:	69bb      	ldr	r3, [r7, #24]
 8002e16:	2bff      	cmp	r3, #255	; 0xff
 8002e18:	d801      	bhi.n	8002e1e <HAL_GPIO_Init+0x13a>
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	e001      	b.n	8002e22 <HAL_GPIO_Init+0x13e>
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	3304      	adds	r3, #4
 8002e22:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002e24:	69bb      	ldr	r3, [r7, #24]
 8002e26:	2bff      	cmp	r3, #255	; 0xff
 8002e28:	d802      	bhi.n	8002e30 <HAL_GPIO_Init+0x14c>
 8002e2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e2c:	009b      	lsls	r3, r3, #2
 8002e2e:	e002      	b.n	8002e36 <HAL_GPIO_Init+0x152>
 8002e30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e32:	3b08      	subs	r3, #8
 8002e34:	009b      	lsls	r3, r3, #2
 8002e36:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002e38:	697b      	ldr	r3, [r7, #20]
 8002e3a:	681a      	ldr	r2, [r3, #0]
 8002e3c:	210f      	movs	r1, #15
 8002e3e:	693b      	ldr	r3, [r7, #16]
 8002e40:	fa01 f303 	lsl.w	r3, r1, r3
 8002e44:	43db      	mvns	r3, r3
 8002e46:	401a      	ands	r2, r3
 8002e48:	6a39      	ldr	r1, [r7, #32]
 8002e4a:	693b      	ldr	r3, [r7, #16]
 8002e4c:	fa01 f303 	lsl.w	r3, r1, r3
 8002e50:	431a      	orrs	r2, r3
 8002e52:	697b      	ldr	r3, [r7, #20]
 8002e54:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002e56:	683b      	ldr	r3, [r7, #0]
 8002e58:	685b      	ldr	r3, [r3, #4]
 8002e5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	f000 80b1 	beq.w	8002fc6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002e64:	4b4d      	ldr	r3, [pc, #308]	; (8002f9c <HAL_GPIO_Init+0x2b8>)
 8002e66:	699b      	ldr	r3, [r3, #24]
 8002e68:	4a4c      	ldr	r2, [pc, #304]	; (8002f9c <HAL_GPIO_Init+0x2b8>)
 8002e6a:	f043 0301 	orr.w	r3, r3, #1
 8002e6e:	6193      	str	r3, [r2, #24]
 8002e70:	4b4a      	ldr	r3, [pc, #296]	; (8002f9c <HAL_GPIO_Init+0x2b8>)
 8002e72:	699b      	ldr	r3, [r3, #24]
 8002e74:	f003 0301 	and.w	r3, r3, #1
 8002e78:	60bb      	str	r3, [r7, #8]
 8002e7a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002e7c:	4a48      	ldr	r2, [pc, #288]	; (8002fa0 <HAL_GPIO_Init+0x2bc>)
 8002e7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e80:	089b      	lsrs	r3, r3, #2
 8002e82:	3302      	adds	r3, #2
 8002e84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e88:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002e8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e8c:	f003 0303 	and.w	r3, r3, #3
 8002e90:	009b      	lsls	r3, r3, #2
 8002e92:	220f      	movs	r2, #15
 8002e94:	fa02 f303 	lsl.w	r3, r2, r3
 8002e98:	43db      	mvns	r3, r3
 8002e9a:	68fa      	ldr	r2, [r7, #12]
 8002e9c:	4013      	ands	r3, r2
 8002e9e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	4a40      	ldr	r2, [pc, #256]	; (8002fa4 <HAL_GPIO_Init+0x2c0>)
 8002ea4:	4293      	cmp	r3, r2
 8002ea6:	d013      	beq.n	8002ed0 <HAL_GPIO_Init+0x1ec>
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	4a3f      	ldr	r2, [pc, #252]	; (8002fa8 <HAL_GPIO_Init+0x2c4>)
 8002eac:	4293      	cmp	r3, r2
 8002eae:	d00d      	beq.n	8002ecc <HAL_GPIO_Init+0x1e8>
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	4a3e      	ldr	r2, [pc, #248]	; (8002fac <HAL_GPIO_Init+0x2c8>)
 8002eb4:	4293      	cmp	r3, r2
 8002eb6:	d007      	beq.n	8002ec8 <HAL_GPIO_Init+0x1e4>
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	4a3d      	ldr	r2, [pc, #244]	; (8002fb0 <HAL_GPIO_Init+0x2cc>)
 8002ebc:	4293      	cmp	r3, r2
 8002ebe:	d101      	bne.n	8002ec4 <HAL_GPIO_Init+0x1e0>
 8002ec0:	2303      	movs	r3, #3
 8002ec2:	e006      	b.n	8002ed2 <HAL_GPIO_Init+0x1ee>
 8002ec4:	2304      	movs	r3, #4
 8002ec6:	e004      	b.n	8002ed2 <HAL_GPIO_Init+0x1ee>
 8002ec8:	2302      	movs	r3, #2
 8002eca:	e002      	b.n	8002ed2 <HAL_GPIO_Init+0x1ee>
 8002ecc:	2301      	movs	r3, #1
 8002ece:	e000      	b.n	8002ed2 <HAL_GPIO_Init+0x1ee>
 8002ed0:	2300      	movs	r3, #0
 8002ed2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ed4:	f002 0203 	and.w	r2, r2, #3
 8002ed8:	0092      	lsls	r2, r2, #2
 8002eda:	4093      	lsls	r3, r2
 8002edc:	68fa      	ldr	r2, [r7, #12]
 8002ede:	4313      	orrs	r3, r2
 8002ee0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002ee2:	492f      	ldr	r1, [pc, #188]	; (8002fa0 <HAL_GPIO_Init+0x2bc>)
 8002ee4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ee6:	089b      	lsrs	r3, r3, #2
 8002ee8:	3302      	adds	r3, #2
 8002eea:	68fa      	ldr	r2, [r7, #12]
 8002eec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002ef0:	683b      	ldr	r3, [r7, #0]
 8002ef2:	685b      	ldr	r3, [r3, #4]
 8002ef4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d006      	beq.n	8002f0a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002efc:	4b2d      	ldr	r3, [pc, #180]	; (8002fb4 <HAL_GPIO_Init+0x2d0>)
 8002efe:	681a      	ldr	r2, [r3, #0]
 8002f00:	492c      	ldr	r1, [pc, #176]	; (8002fb4 <HAL_GPIO_Init+0x2d0>)
 8002f02:	69bb      	ldr	r3, [r7, #24]
 8002f04:	4313      	orrs	r3, r2
 8002f06:	600b      	str	r3, [r1, #0]
 8002f08:	e006      	b.n	8002f18 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002f0a:	4b2a      	ldr	r3, [pc, #168]	; (8002fb4 <HAL_GPIO_Init+0x2d0>)
 8002f0c:	681a      	ldr	r2, [r3, #0]
 8002f0e:	69bb      	ldr	r3, [r7, #24]
 8002f10:	43db      	mvns	r3, r3
 8002f12:	4928      	ldr	r1, [pc, #160]	; (8002fb4 <HAL_GPIO_Init+0x2d0>)
 8002f14:	4013      	ands	r3, r2
 8002f16:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002f18:	683b      	ldr	r3, [r7, #0]
 8002f1a:	685b      	ldr	r3, [r3, #4]
 8002f1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d006      	beq.n	8002f32 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002f24:	4b23      	ldr	r3, [pc, #140]	; (8002fb4 <HAL_GPIO_Init+0x2d0>)
 8002f26:	685a      	ldr	r2, [r3, #4]
 8002f28:	4922      	ldr	r1, [pc, #136]	; (8002fb4 <HAL_GPIO_Init+0x2d0>)
 8002f2a:	69bb      	ldr	r3, [r7, #24]
 8002f2c:	4313      	orrs	r3, r2
 8002f2e:	604b      	str	r3, [r1, #4]
 8002f30:	e006      	b.n	8002f40 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002f32:	4b20      	ldr	r3, [pc, #128]	; (8002fb4 <HAL_GPIO_Init+0x2d0>)
 8002f34:	685a      	ldr	r2, [r3, #4]
 8002f36:	69bb      	ldr	r3, [r7, #24]
 8002f38:	43db      	mvns	r3, r3
 8002f3a:	491e      	ldr	r1, [pc, #120]	; (8002fb4 <HAL_GPIO_Init+0x2d0>)
 8002f3c:	4013      	ands	r3, r2
 8002f3e:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002f40:	683b      	ldr	r3, [r7, #0]
 8002f42:	685b      	ldr	r3, [r3, #4]
 8002f44:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d006      	beq.n	8002f5a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002f4c:	4b19      	ldr	r3, [pc, #100]	; (8002fb4 <HAL_GPIO_Init+0x2d0>)
 8002f4e:	689a      	ldr	r2, [r3, #8]
 8002f50:	4918      	ldr	r1, [pc, #96]	; (8002fb4 <HAL_GPIO_Init+0x2d0>)
 8002f52:	69bb      	ldr	r3, [r7, #24]
 8002f54:	4313      	orrs	r3, r2
 8002f56:	608b      	str	r3, [r1, #8]
 8002f58:	e006      	b.n	8002f68 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002f5a:	4b16      	ldr	r3, [pc, #88]	; (8002fb4 <HAL_GPIO_Init+0x2d0>)
 8002f5c:	689a      	ldr	r2, [r3, #8]
 8002f5e:	69bb      	ldr	r3, [r7, #24]
 8002f60:	43db      	mvns	r3, r3
 8002f62:	4914      	ldr	r1, [pc, #80]	; (8002fb4 <HAL_GPIO_Init+0x2d0>)
 8002f64:	4013      	ands	r3, r2
 8002f66:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002f68:	683b      	ldr	r3, [r7, #0]
 8002f6a:	685b      	ldr	r3, [r3, #4]
 8002f6c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d021      	beq.n	8002fb8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002f74:	4b0f      	ldr	r3, [pc, #60]	; (8002fb4 <HAL_GPIO_Init+0x2d0>)
 8002f76:	68da      	ldr	r2, [r3, #12]
 8002f78:	490e      	ldr	r1, [pc, #56]	; (8002fb4 <HAL_GPIO_Init+0x2d0>)
 8002f7a:	69bb      	ldr	r3, [r7, #24]
 8002f7c:	4313      	orrs	r3, r2
 8002f7e:	60cb      	str	r3, [r1, #12]
 8002f80:	e021      	b.n	8002fc6 <HAL_GPIO_Init+0x2e2>
 8002f82:	bf00      	nop
 8002f84:	10320000 	.word	0x10320000
 8002f88:	10310000 	.word	0x10310000
 8002f8c:	10220000 	.word	0x10220000
 8002f90:	10210000 	.word	0x10210000
 8002f94:	10120000 	.word	0x10120000
 8002f98:	10110000 	.word	0x10110000
 8002f9c:	40021000 	.word	0x40021000
 8002fa0:	40010000 	.word	0x40010000
 8002fa4:	40010800 	.word	0x40010800
 8002fa8:	40010c00 	.word	0x40010c00
 8002fac:	40011000 	.word	0x40011000
 8002fb0:	40011400 	.word	0x40011400
 8002fb4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002fb8:	4b0b      	ldr	r3, [pc, #44]	; (8002fe8 <HAL_GPIO_Init+0x304>)
 8002fba:	68da      	ldr	r2, [r3, #12]
 8002fbc:	69bb      	ldr	r3, [r7, #24]
 8002fbe:	43db      	mvns	r3, r3
 8002fc0:	4909      	ldr	r1, [pc, #36]	; (8002fe8 <HAL_GPIO_Init+0x304>)
 8002fc2:	4013      	ands	r3, r2
 8002fc4:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8002fc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fc8:	3301      	adds	r3, #1
 8002fca:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002fcc:	683b      	ldr	r3, [r7, #0]
 8002fce:	681a      	ldr	r2, [r3, #0]
 8002fd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fd2:	fa22 f303 	lsr.w	r3, r2, r3
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	f47f ae8e 	bne.w	8002cf8 <HAL_GPIO_Init+0x14>
  }
}
 8002fdc:	bf00      	nop
 8002fde:	bf00      	nop
 8002fe0:	372c      	adds	r7, #44	; 0x2c
 8002fe2:	46bd      	mov	sp, r7
 8002fe4:	bc80      	pop	{r7}
 8002fe6:	4770      	bx	lr
 8002fe8:	40010400 	.word	0x40010400

08002fec <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002fec:	b580      	push	{r7, lr}
 8002fee:	b084      	sub	sp, #16
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d101      	bne.n	8002ffe <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002ffa:	2301      	movs	r3, #1
 8002ffc:	e12b      	b.n	8003256 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003004:	b2db      	uxtb	r3, r3
 8003006:	2b00      	cmp	r3, #0
 8003008:	d106      	bne.n	8003018 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	2200      	movs	r2, #0
 800300e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003012:	6878      	ldr	r0, [r7, #4]
 8003014:	f7fe ffb8 	bl	8001f88 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	2224      	movs	r2, #36	; 0x24
 800301c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	681a      	ldr	r2, [r3, #0]
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f022 0201 	bic.w	r2, r2, #1
 800302e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	681a      	ldr	r2, [r3, #0]
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800303e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	681a      	ldr	r2, [r3, #0]
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800304e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003050:	f000 fffa 	bl	8004048 <HAL_RCC_GetPCLK1Freq>
 8003054:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	685b      	ldr	r3, [r3, #4]
 800305a:	4a81      	ldr	r2, [pc, #516]	; (8003260 <HAL_I2C_Init+0x274>)
 800305c:	4293      	cmp	r3, r2
 800305e:	d807      	bhi.n	8003070 <HAL_I2C_Init+0x84>
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	4a80      	ldr	r2, [pc, #512]	; (8003264 <HAL_I2C_Init+0x278>)
 8003064:	4293      	cmp	r3, r2
 8003066:	bf94      	ite	ls
 8003068:	2301      	movls	r3, #1
 800306a:	2300      	movhi	r3, #0
 800306c:	b2db      	uxtb	r3, r3
 800306e:	e006      	b.n	800307e <HAL_I2C_Init+0x92>
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	4a7d      	ldr	r2, [pc, #500]	; (8003268 <HAL_I2C_Init+0x27c>)
 8003074:	4293      	cmp	r3, r2
 8003076:	bf94      	ite	ls
 8003078:	2301      	movls	r3, #1
 800307a:	2300      	movhi	r3, #0
 800307c:	b2db      	uxtb	r3, r3
 800307e:	2b00      	cmp	r3, #0
 8003080:	d001      	beq.n	8003086 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003082:	2301      	movs	r3, #1
 8003084:	e0e7      	b.n	8003256 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	4a78      	ldr	r2, [pc, #480]	; (800326c <HAL_I2C_Init+0x280>)
 800308a:	fba2 2303 	umull	r2, r3, r2, r3
 800308e:	0c9b      	lsrs	r3, r3, #18
 8003090:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	685b      	ldr	r3, [r3, #4]
 8003098:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	68ba      	ldr	r2, [r7, #8]
 80030a2:	430a      	orrs	r2, r1
 80030a4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	6a1b      	ldr	r3, [r3, #32]
 80030ac:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	685b      	ldr	r3, [r3, #4]
 80030b4:	4a6a      	ldr	r2, [pc, #424]	; (8003260 <HAL_I2C_Init+0x274>)
 80030b6:	4293      	cmp	r3, r2
 80030b8:	d802      	bhi.n	80030c0 <HAL_I2C_Init+0xd4>
 80030ba:	68bb      	ldr	r3, [r7, #8]
 80030bc:	3301      	adds	r3, #1
 80030be:	e009      	b.n	80030d4 <HAL_I2C_Init+0xe8>
 80030c0:	68bb      	ldr	r3, [r7, #8]
 80030c2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80030c6:	fb02 f303 	mul.w	r3, r2, r3
 80030ca:	4a69      	ldr	r2, [pc, #420]	; (8003270 <HAL_I2C_Init+0x284>)
 80030cc:	fba2 2303 	umull	r2, r3, r2, r3
 80030d0:	099b      	lsrs	r3, r3, #6
 80030d2:	3301      	adds	r3, #1
 80030d4:	687a      	ldr	r2, [r7, #4]
 80030d6:	6812      	ldr	r2, [r2, #0]
 80030d8:	430b      	orrs	r3, r1
 80030da:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	69db      	ldr	r3, [r3, #28]
 80030e2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80030e6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	685b      	ldr	r3, [r3, #4]
 80030ee:	495c      	ldr	r1, [pc, #368]	; (8003260 <HAL_I2C_Init+0x274>)
 80030f0:	428b      	cmp	r3, r1
 80030f2:	d819      	bhi.n	8003128 <HAL_I2C_Init+0x13c>
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	1e59      	subs	r1, r3, #1
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	685b      	ldr	r3, [r3, #4]
 80030fc:	005b      	lsls	r3, r3, #1
 80030fe:	fbb1 f3f3 	udiv	r3, r1, r3
 8003102:	1c59      	adds	r1, r3, #1
 8003104:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003108:	400b      	ands	r3, r1
 800310a:	2b00      	cmp	r3, #0
 800310c:	d00a      	beq.n	8003124 <HAL_I2C_Init+0x138>
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	1e59      	subs	r1, r3, #1
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	685b      	ldr	r3, [r3, #4]
 8003116:	005b      	lsls	r3, r3, #1
 8003118:	fbb1 f3f3 	udiv	r3, r1, r3
 800311c:	3301      	adds	r3, #1
 800311e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003122:	e051      	b.n	80031c8 <HAL_I2C_Init+0x1dc>
 8003124:	2304      	movs	r3, #4
 8003126:	e04f      	b.n	80031c8 <HAL_I2C_Init+0x1dc>
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	689b      	ldr	r3, [r3, #8]
 800312c:	2b00      	cmp	r3, #0
 800312e:	d111      	bne.n	8003154 <HAL_I2C_Init+0x168>
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	1e58      	subs	r0, r3, #1
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	6859      	ldr	r1, [r3, #4]
 8003138:	460b      	mov	r3, r1
 800313a:	005b      	lsls	r3, r3, #1
 800313c:	440b      	add	r3, r1
 800313e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003142:	3301      	adds	r3, #1
 8003144:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003148:	2b00      	cmp	r3, #0
 800314a:	bf0c      	ite	eq
 800314c:	2301      	moveq	r3, #1
 800314e:	2300      	movne	r3, #0
 8003150:	b2db      	uxtb	r3, r3
 8003152:	e012      	b.n	800317a <HAL_I2C_Init+0x18e>
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	1e58      	subs	r0, r3, #1
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	6859      	ldr	r1, [r3, #4]
 800315c:	460b      	mov	r3, r1
 800315e:	009b      	lsls	r3, r3, #2
 8003160:	440b      	add	r3, r1
 8003162:	0099      	lsls	r1, r3, #2
 8003164:	440b      	add	r3, r1
 8003166:	fbb0 f3f3 	udiv	r3, r0, r3
 800316a:	3301      	adds	r3, #1
 800316c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003170:	2b00      	cmp	r3, #0
 8003172:	bf0c      	ite	eq
 8003174:	2301      	moveq	r3, #1
 8003176:	2300      	movne	r3, #0
 8003178:	b2db      	uxtb	r3, r3
 800317a:	2b00      	cmp	r3, #0
 800317c:	d001      	beq.n	8003182 <HAL_I2C_Init+0x196>
 800317e:	2301      	movs	r3, #1
 8003180:	e022      	b.n	80031c8 <HAL_I2C_Init+0x1dc>
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	689b      	ldr	r3, [r3, #8]
 8003186:	2b00      	cmp	r3, #0
 8003188:	d10e      	bne.n	80031a8 <HAL_I2C_Init+0x1bc>
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	1e58      	subs	r0, r3, #1
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	6859      	ldr	r1, [r3, #4]
 8003192:	460b      	mov	r3, r1
 8003194:	005b      	lsls	r3, r3, #1
 8003196:	440b      	add	r3, r1
 8003198:	fbb0 f3f3 	udiv	r3, r0, r3
 800319c:	3301      	adds	r3, #1
 800319e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80031a2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80031a6:	e00f      	b.n	80031c8 <HAL_I2C_Init+0x1dc>
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	1e58      	subs	r0, r3, #1
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	6859      	ldr	r1, [r3, #4]
 80031b0:	460b      	mov	r3, r1
 80031b2:	009b      	lsls	r3, r3, #2
 80031b4:	440b      	add	r3, r1
 80031b6:	0099      	lsls	r1, r3, #2
 80031b8:	440b      	add	r3, r1
 80031ba:	fbb0 f3f3 	udiv	r3, r0, r3
 80031be:	3301      	adds	r3, #1
 80031c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80031c4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80031c8:	6879      	ldr	r1, [r7, #4]
 80031ca:	6809      	ldr	r1, [r1, #0]
 80031cc:	4313      	orrs	r3, r2
 80031ce:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	69da      	ldr	r2, [r3, #28]
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	6a1b      	ldr	r3, [r3, #32]
 80031e2:	431a      	orrs	r2, r3
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	430a      	orrs	r2, r1
 80031ea:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	689b      	ldr	r3, [r3, #8]
 80031f2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80031f6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80031fa:	687a      	ldr	r2, [r7, #4]
 80031fc:	6911      	ldr	r1, [r2, #16]
 80031fe:	687a      	ldr	r2, [r7, #4]
 8003200:	68d2      	ldr	r2, [r2, #12]
 8003202:	4311      	orrs	r1, r2
 8003204:	687a      	ldr	r2, [r7, #4]
 8003206:	6812      	ldr	r2, [r2, #0]
 8003208:	430b      	orrs	r3, r1
 800320a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	68db      	ldr	r3, [r3, #12]
 8003212:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	695a      	ldr	r2, [r3, #20]
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	699b      	ldr	r3, [r3, #24]
 800321e:	431a      	orrs	r2, r3
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	430a      	orrs	r2, r1
 8003226:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	681a      	ldr	r2, [r3, #0]
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f042 0201 	orr.w	r2, r2, #1
 8003236:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	2200      	movs	r2, #0
 800323c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	2220      	movs	r2, #32
 8003242:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	2200      	movs	r2, #0
 800324a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	2200      	movs	r2, #0
 8003250:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003254:	2300      	movs	r3, #0
}
 8003256:	4618      	mov	r0, r3
 8003258:	3710      	adds	r7, #16
 800325a:	46bd      	mov	sp, r7
 800325c:	bd80      	pop	{r7, pc}
 800325e:	bf00      	nop
 8003260:	000186a0 	.word	0x000186a0
 8003264:	001e847f 	.word	0x001e847f
 8003268:	003d08ff 	.word	0x003d08ff
 800326c:	431bde83 	.word	0x431bde83
 8003270:	10624dd3 	.word	0x10624dd3

08003274 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003274:	b580      	push	{r7, lr}
 8003276:	b088      	sub	sp, #32
 8003278:	af02      	add	r7, sp, #8
 800327a:	60f8      	str	r0, [r7, #12]
 800327c:	4608      	mov	r0, r1
 800327e:	4611      	mov	r1, r2
 8003280:	461a      	mov	r2, r3
 8003282:	4603      	mov	r3, r0
 8003284:	817b      	strh	r3, [r7, #10]
 8003286:	460b      	mov	r3, r1
 8003288:	813b      	strh	r3, [r7, #8]
 800328a:	4613      	mov	r3, r2
 800328c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800328e:	f7ff f94f 	bl	8002530 <HAL_GetTick>
 8003292:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800329a:	b2db      	uxtb	r3, r3
 800329c:	2b20      	cmp	r3, #32
 800329e:	f040 80d9 	bne.w	8003454 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80032a2:	697b      	ldr	r3, [r7, #20]
 80032a4:	9300      	str	r3, [sp, #0]
 80032a6:	2319      	movs	r3, #25
 80032a8:	2201      	movs	r2, #1
 80032aa:	496d      	ldr	r1, [pc, #436]	; (8003460 <HAL_I2C_Mem_Write+0x1ec>)
 80032ac:	68f8      	ldr	r0, [r7, #12]
 80032ae:	f000 f971 	bl	8003594 <I2C_WaitOnFlagUntilTimeout>
 80032b2:	4603      	mov	r3, r0
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d001      	beq.n	80032bc <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80032b8:	2302      	movs	r3, #2
 80032ba:	e0cc      	b.n	8003456 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80032c2:	2b01      	cmp	r3, #1
 80032c4:	d101      	bne.n	80032ca <HAL_I2C_Mem_Write+0x56>
 80032c6:	2302      	movs	r3, #2
 80032c8:	e0c5      	b.n	8003456 <HAL_I2C_Mem_Write+0x1e2>
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	2201      	movs	r2, #1
 80032ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f003 0301 	and.w	r3, r3, #1
 80032dc:	2b01      	cmp	r3, #1
 80032de:	d007      	beq.n	80032f0 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	681a      	ldr	r2, [r3, #0]
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f042 0201 	orr.w	r2, r2, #1
 80032ee:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	681a      	ldr	r2, [r3, #0]
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80032fe:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	2221      	movs	r2, #33	; 0x21
 8003304:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	2240      	movs	r2, #64	; 0x40
 800330c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	2200      	movs	r2, #0
 8003314:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	6a3a      	ldr	r2, [r7, #32]
 800331a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003320:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003326:	b29a      	uxth	r2, r3
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	4a4d      	ldr	r2, [pc, #308]	; (8003464 <HAL_I2C_Mem_Write+0x1f0>)
 8003330:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003332:	88f8      	ldrh	r0, [r7, #6]
 8003334:	893a      	ldrh	r2, [r7, #8]
 8003336:	8979      	ldrh	r1, [r7, #10]
 8003338:	697b      	ldr	r3, [r7, #20]
 800333a:	9301      	str	r3, [sp, #4]
 800333c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800333e:	9300      	str	r3, [sp, #0]
 8003340:	4603      	mov	r3, r0
 8003342:	68f8      	ldr	r0, [r7, #12]
 8003344:	f000 f890 	bl	8003468 <I2C_RequestMemoryWrite>
 8003348:	4603      	mov	r3, r0
 800334a:	2b00      	cmp	r3, #0
 800334c:	d052      	beq.n	80033f4 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800334e:	2301      	movs	r3, #1
 8003350:	e081      	b.n	8003456 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003352:	697a      	ldr	r2, [r7, #20]
 8003354:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003356:	68f8      	ldr	r0, [r7, #12]
 8003358:	f000 f9f2 	bl	8003740 <I2C_WaitOnTXEFlagUntilTimeout>
 800335c:	4603      	mov	r3, r0
 800335e:	2b00      	cmp	r3, #0
 8003360:	d00d      	beq.n	800337e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003366:	2b04      	cmp	r3, #4
 8003368:	d107      	bne.n	800337a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	681a      	ldr	r2, [r3, #0]
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003378:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800337a:	2301      	movs	r3, #1
 800337c:	e06b      	b.n	8003456 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003382:	781a      	ldrb	r2, [r3, #0]
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800338e:	1c5a      	adds	r2, r3, #1
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003398:	3b01      	subs	r3, #1
 800339a:	b29a      	uxth	r2, r3
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033a4:	b29b      	uxth	r3, r3
 80033a6:	3b01      	subs	r3, #1
 80033a8:	b29a      	uxth	r2, r3
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	695b      	ldr	r3, [r3, #20]
 80033b4:	f003 0304 	and.w	r3, r3, #4
 80033b8:	2b04      	cmp	r3, #4
 80033ba:	d11b      	bne.n	80033f4 <HAL_I2C_Mem_Write+0x180>
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d017      	beq.n	80033f4 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033c8:	781a      	ldrb	r2, [r3, #0]
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033d4:	1c5a      	adds	r2, r3, #1
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033de:	3b01      	subs	r3, #1
 80033e0:	b29a      	uxth	r2, r3
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033ea:	b29b      	uxth	r3, r3
 80033ec:	3b01      	subs	r3, #1
 80033ee:	b29a      	uxth	r2, r3
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d1aa      	bne.n	8003352 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80033fc:	697a      	ldr	r2, [r7, #20]
 80033fe:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003400:	68f8      	ldr	r0, [r7, #12]
 8003402:	f000 f9de 	bl	80037c2 <I2C_WaitOnBTFFlagUntilTimeout>
 8003406:	4603      	mov	r3, r0
 8003408:	2b00      	cmp	r3, #0
 800340a:	d00d      	beq.n	8003428 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003410:	2b04      	cmp	r3, #4
 8003412:	d107      	bne.n	8003424 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	681a      	ldr	r2, [r3, #0]
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003422:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003424:	2301      	movs	r3, #1
 8003426:	e016      	b.n	8003456 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	681a      	ldr	r2, [r3, #0]
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003436:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	2220      	movs	r2, #32
 800343c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	2200      	movs	r2, #0
 8003444:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	2200      	movs	r2, #0
 800344c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003450:	2300      	movs	r3, #0
 8003452:	e000      	b.n	8003456 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003454:	2302      	movs	r3, #2
  }
}
 8003456:	4618      	mov	r0, r3
 8003458:	3718      	adds	r7, #24
 800345a:	46bd      	mov	sp, r7
 800345c:	bd80      	pop	{r7, pc}
 800345e:	bf00      	nop
 8003460:	00100002 	.word	0x00100002
 8003464:	ffff0000 	.word	0xffff0000

08003468 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003468:	b580      	push	{r7, lr}
 800346a:	b088      	sub	sp, #32
 800346c:	af02      	add	r7, sp, #8
 800346e:	60f8      	str	r0, [r7, #12]
 8003470:	4608      	mov	r0, r1
 8003472:	4611      	mov	r1, r2
 8003474:	461a      	mov	r2, r3
 8003476:	4603      	mov	r3, r0
 8003478:	817b      	strh	r3, [r7, #10]
 800347a:	460b      	mov	r3, r1
 800347c:	813b      	strh	r3, [r7, #8]
 800347e:	4613      	mov	r3, r2
 8003480:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	681a      	ldr	r2, [r3, #0]
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003490:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003492:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003494:	9300      	str	r3, [sp, #0]
 8003496:	6a3b      	ldr	r3, [r7, #32]
 8003498:	2200      	movs	r2, #0
 800349a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800349e:	68f8      	ldr	r0, [r7, #12]
 80034a0:	f000 f878 	bl	8003594 <I2C_WaitOnFlagUntilTimeout>
 80034a4:	4603      	mov	r3, r0
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d00d      	beq.n	80034c6 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034b4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80034b8:	d103      	bne.n	80034c2 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80034c0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80034c2:	2303      	movs	r3, #3
 80034c4:	e05f      	b.n	8003586 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80034c6:	897b      	ldrh	r3, [r7, #10]
 80034c8:	b2db      	uxtb	r3, r3
 80034ca:	461a      	mov	r2, r3
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80034d4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80034d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034d8:	6a3a      	ldr	r2, [r7, #32]
 80034da:	492d      	ldr	r1, [pc, #180]	; (8003590 <I2C_RequestMemoryWrite+0x128>)
 80034dc:	68f8      	ldr	r0, [r7, #12]
 80034de:	f000 f8b0 	bl	8003642 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80034e2:	4603      	mov	r3, r0
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d001      	beq.n	80034ec <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80034e8:	2301      	movs	r3, #1
 80034ea:	e04c      	b.n	8003586 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80034ec:	2300      	movs	r3, #0
 80034ee:	617b      	str	r3, [r7, #20]
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	695b      	ldr	r3, [r3, #20]
 80034f6:	617b      	str	r3, [r7, #20]
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	699b      	ldr	r3, [r3, #24]
 80034fe:	617b      	str	r3, [r7, #20]
 8003500:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003502:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003504:	6a39      	ldr	r1, [r7, #32]
 8003506:	68f8      	ldr	r0, [r7, #12]
 8003508:	f000 f91a 	bl	8003740 <I2C_WaitOnTXEFlagUntilTimeout>
 800350c:	4603      	mov	r3, r0
 800350e:	2b00      	cmp	r3, #0
 8003510:	d00d      	beq.n	800352e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003516:	2b04      	cmp	r3, #4
 8003518:	d107      	bne.n	800352a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	681a      	ldr	r2, [r3, #0]
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003528:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800352a:	2301      	movs	r3, #1
 800352c:	e02b      	b.n	8003586 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800352e:	88fb      	ldrh	r3, [r7, #6]
 8003530:	2b01      	cmp	r3, #1
 8003532:	d105      	bne.n	8003540 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003534:	893b      	ldrh	r3, [r7, #8]
 8003536:	b2da      	uxtb	r2, r3
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	611a      	str	r2, [r3, #16]
 800353e:	e021      	b.n	8003584 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003540:	893b      	ldrh	r3, [r7, #8]
 8003542:	0a1b      	lsrs	r3, r3, #8
 8003544:	b29b      	uxth	r3, r3
 8003546:	b2da      	uxtb	r2, r3
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800354e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003550:	6a39      	ldr	r1, [r7, #32]
 8003552:	68f8      	ldr	r0, [r7, #12]
 8003554:	f000 f8f4 	bl	8003740 <I2C_WaitOnTXEFlagUntilTimeout>
 8003558:	4603      	mov	r3, r0
 800355a:	2b00      	cmp	r3, #0
 800355c:	d00d      	beq.n	800357a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003562:	2b04      	cmp	r3, #4
 8003564:	d107      	bne.n	8003576 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	681a      	ldr	r2, [r3, #0]
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003574:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003576:	2301      	movs	r3, #1
 8003578:	e005      	b.n	8003586 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800357a:	893b      	ldrh	r3, [r7, #8]
 800357c:	b2da      	uxtb	r2, r3
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003584:	2300      	movs	r3, #0
}
 8003586:	4618      	mov	r0, r3
 8003588:	3718      	adds	r7, #24
 800358a:	46bd      	mov	sp, r7
 800358c:	bd80      	pop	{r7, pc}
 800358e:	bf00      	nop
 8003590:	00010002 	.word	0x00010002

08003594 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003594:	b580      	push	{r7, lr}
 8003596:	b084      	sub	sp, #16
 8003598:	af00      	add	r7, sp, #0
 800359a:	60f8      	str	r0, [r7, #12]
 800359c:	60b9      	str	r1, [r7, #8]
 800359e:	603b      	str	r3, [r7, #0]
 80035a0:	4613      	mov	r3, r2
 80035a2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80035a4:	e025      	b.n	80035f2 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80035a6:	683b      	ldr	r3, [r7, #0]
 80035a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035ac:	d021      	beq.n	80035f2 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80035ae:	f7fe ffbf 	bl	8002530 <HAL_GetTick>
 80035b2:	4602      	mov	r2, r0
 80035b4:	69bb      	ldr	r3, [r7, #24]
 80035b6:	1ad3      	subs	r3, r2, r3
 80035b8:	683a      	ldr	r2, [r7, #0]
 80035ba:	429a      	cmp	r2, r3
 80035bc:	d302      	bcc.n	80035c4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80035be:	683b      	ldr	r3, [r7, #0]
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d116      	bne.n	80035f2 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	2200      	movs	r2, #0
 80035c8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	2220      	movs	r2, #32
 80035ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	2200      	movs	r2, #0
 80035d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035de:	f043 0220 	orr.w	r2, r3, #32
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	2200      	movs	r2, #0
 80035ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80035ee:	2301      	movs	r3, #1
 80035f0:	e023      	b.n	800363a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80035f2:	68bb      	ldr	r3, [r7, #8]
 80035f4:	0c1b      	lsrs	r3, r3, #16
 80035f6:	b2db      	uxtb	r3, r3
 80035f8:	2b01      	cmp	r3, #1
 80035fa:	d10d      	bne.n	8003618 <I2C_WaitOnFlagUntilTimeout+0x84>
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	695b      	ldr	r3, [r3, #20]
 8003602:	43da      	mvns	r2, r3
 8003604:	68bb      	ldr	r3, [r7, #8]
 8003606:	4013      	ands	r3, r2
 8003608:	b29b      	uxth	r3, r3
 800360a:	2b00      	cmp	r3, #0
 800360c:	bf0c      	ite	eq
 800360e:	2301      	moveq	r3, #1
 8003610:	2300      	movne	r3, #0
 8003612:	b2db      	uxtb	r3, r3
 8003614:	461a      	mov	r2, r3
 8003616:	e00c      	b.n	8003632 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	699b      	ldr	r3, [r3, #24]
 800361e:	43da      	mvns	r2, r3
 8003620:	68bb      	ldr	r3, [r7, #8]
 8003622:	4013      	ands	r3, r2
 8003624:	b29b      	uxth	r3, r3
 8003626:	2b00      	cmp	r3, #0
 8003628:	bf0c      	ite	eq
 800362a:	2301      	moveq	r3, #1
 800362c:	2300      	movne	r3, #0
 800362e:	b2db      	uxtb	r3, r3
 8003630:	461a      	mov	r2, r3
 8003632:	79fb      	ldrb	r3, [r7, #7]
 8003634:	429a      	cmp	r2, r3
 8003636:	d0b6      	beq.n	80035a6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003638:	2300      	movs	r3, #0
}
 800363a:	4618      	mov	r0, r3
 800363c:	3710      	adds	r7, #16
 800363e:	46bd      	mov	sp, r7
 8003640:	bd80      	pop	{r7, pc}

08003642 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003642:	b580      	push	{r7, lr}
 8003644:	b084      	sub	sp, #16
 8003646:	af00      	add	r7, sp, #0
 8003648:	60f8      	str	r0, [r7, #12]
 800364a:	60b9      	str	r1, [r7, #8]
 800364c:	607a      	str	r2, [r7, #4]
 800364e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003650:	e051      	b.n	80036f6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	695b      	ldr	r3, [r3, #20]
 8003658:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800365c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003660:	d123      	bne.n	80036aa <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	681a      	ldr	r2, [r3, #0]
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003670:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800367a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	2200      	movs	r2, #0
 8003680:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	2220      	movs	r2, #32
 8003686:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	2200      	movs	r2, #0
 800368e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003696:	f043 0204 	orr.w	r2, r3, #4
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	2200      	movs	r2, #0
 80036a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80036a6:	2301      	movs	r3, #1
 80036a8:	e046      	b.n	8003738 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036b0:	d021      	beq.n	80036f6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80036b2:	f7fe ff3d 	bl	8002530 <HAL_GetTick>
 80036b6:	4602      	mov	r2, r0
 80036b8:	683b      	ldr	r3, [r7, #0]
 80036ba:	1ad3      	subs	r3, r2, r3
 80036bc:	687a      	ldr	r2, [r7, #4]
 80036be:	429a      	cmp	r2, r3
 80036c0:	d302      	bcc.n	80036c8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d116      	bne.n	80036f6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	2200      	movs	r2, #0
 80036cc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	2220      	movs	r2, #32
 80036d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	2200      	movs	r2, #0
 80036da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036e2:	f043 0220 	orr.w	r2, r3, #32
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	2200      	movs	r2, #0
 80036ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80036f2:	2301      	movs	r3, #1
 80036f4:	e020      	b.n	8003738 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80036f6:	68bb      	ldr	r3, [r7, #8]
 80036f8:	0c1b      	lsrs	r3, r3, #16
 80036fa:	b2db      	uxtb	r3, r3
 80036fc:	2b01      	cmp	r3, #1
 80036fe:	d10c      	bne.n	800371a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	695b      	ldr	r3, [r3, #20]
 8003706:	43da      	mvns	r2, r3
 8003708:	68bb      	ldr	r3, [r7, #8]
 800370a:	4013      	ands	r3, r2
 800370c:	b29b      	uxth	r3, r3
 800370e:	2b00      	cmp	r3, #0
 8003710:	bf14      	ite	ne
 8003712:	2301      	movne	r3, #1
 8003714:	2300      	moveq	r3, #0
 8003716:	b2db      	uxtb	r3, r3
 8003718:	e00b      	b.n	8003732 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	699b      	ldr	r3, [r3, #24]
 8003720:	43da      	mvns	r2, r3
 8003722:	68bb      	ldr	r3, [r7, #8]
 8003724:	4013      	ands	r3, r2
 8003726:	b29b      	uxth	r3, r3
 8003728:	2b00      	cmp	r3, #0
 800372a:	bf14      	ite	ne
 800372c:	2301      	movne	r3, #1
 800372e:	2300      	moveq	r3, #0
 8003730:	b2db      	uxtb	r3, r3
 8003732:	2b00      	cmp	r3, #0
 8003734:	d18d      	bne.n	8003652 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003736:	2300      	movs	r3, #0
}
 8003738:	4618      	mov	r0, r3
 800373a:	3710      	adds	r7, #16
 800373c:	46bd      	mov	sp, r7
 800373e:	bd80      	pop	{r7, pc}

08003740 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003740:	b580      	push	{r7, lr}
 8003742:	b084      	sub	sp, #16
 8003744:	af00      	add	r7, sp, #0
 8003746:	60f8      	str	r0, [r7, #12]
 8003748:	60b9      	str	r1, [r7, #8]
 800374a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800374c:	e02d      	b.n	80037aa <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800374e:	68f8      	ldr	r0, [r7, #12]
 8003750:	f000 f878 	bl	8003844 <I2C_IsAcknowledgeFailed>
 8003754:	4603      	mov	r3, r0
 8003756:	2b00      	cmp	r3, #0
 8003758:	d001      	beq.n	800375e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800375a:	2301      	movs	r3, #1
 800375c:	e02d      	b.n	80037ba <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800375e:	68bb      	ldr	r3, [r7, #8]
 8003760:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003764:	d021      	beq.n	80037aa <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003766:	f7fe fee3 	bl	8002530 <HAL_GetTick>
 800376a:	4602      	mov	r2, r0
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	1ad3      	subs	r3, r2, r3
 8003770:	68ba      	ldr	r2, [r7, #8]
 8003772:	429a      	cmp	r2, r3
 8003774:	d302      	bcc.n	800377c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003776:	68bb      	ldr	r3, [r7, #8]
 8003778:	2b00      	cmp	r3, #0
 800377a:	d116      	bne.n	80037aa <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	2200      	movs	r2, #0
 8003780:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	2220      	movs	r2, #32
 8003786:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	2200      	movs	r2, #0
 800378e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003796:	f043 0220 	orr.w	r2, r3, #32
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	2200      	movs	r2, #0
 80037a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80037a6:	2301      	movs	r3, #1
 80037a8:	e007      	b.n	80037ba <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	695b      	ldr	r3, [r3, #20]
 80037b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037b4:	2b80      	cmp	r3, #128	; 0x80
 80037b6:	d1ca      	bne.n	800374e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80037b8:	2300      	movs	r3, #0
}
 80037ba:	4618      	mov	r0, r3
 80037bc:	3710      	adds	r7, #16
 80037be:	46bd      	mov	sp, r7
 80037c0:	bd80      	pop	{r7, pc}

080037c2 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80037c2:	b580      	push	{r7, lr}
 80037c4:	b084      	sub	sp, #16
 80037c6:	af00      	add	r7, sp, #0
 80037c8:	60f8      	str	r0, [r7, #12]
 80037ca:	60b9      	str	r1, [r7, #8]
 80037cc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80037ce:	e02d      	b.n	800382c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80037d0:	68f8      	ldr	r0, [r7, #12]
 80037d2:	f000 f837 	bl	8003844 <I2C_IsAcknowledgeFailed>
 80037d6:	4603      	mov	r3, r0
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d001      	beq.n	80037e0 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80037dc:	2301      	movs	r3, #1
 80037de:	e02d      	b.n	800383c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80037e0:	68bb      	ldr	r3, [r7, #8]
 80037e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037e6:	d021      	beq.n	800382c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80037e8:	f7fe fea2 	bl	8002530 <HAL_GetTick>
 80037ec:	4602      	mov	r2, r0
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	1ad3      	subs	r3, r2, r3
 80037f2:	68ba      	ldr	r2, [r7, #8]
 80037f4:	429a      	cmp	r2, r3
 80037f6:	d302      	bcc.n	80037fe <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80037f8:	68bb      	ldr	r3, [r7, #8]
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d116      	bne.n	800382c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	2200      	movs	r2, #0
 8003802:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	2220      	movs	r2, #32
 8003808:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	2200      	movs	r2, #0
 8003810:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003818:	f043 0220 	orr.w	r2, r3, #32
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	2200      	movs	r2, #0
 8003824:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003828:	2301      	movs	r3, #1
 800382a:	e007      	b.n	800383c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	695b      	ldr	r3, [r3, #20]
 8003832:	f003 0304 	and.w	r3, r3, #4
 8003836:	2b04      	cmp	r3, #4
 8003838:	d1ca      	bne.n	80037d0 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800383a:	2300      	movs	r3, #0
}
 800383c:	4618      	mov	r0, r3
 800383e:	3710      	adds	r7, #16
 8003840:	46bd      	mov	sp, r7
 8003842:	bd80      	pop	{r7, pc}

08003844 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003844:	b480      	push	{r7}
 8003846:	b083      	sub	sp, #12
 8003848:	af00      	add	r7, sp, #0
 800384a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	695b      	ldr	r3, [r3, #20]
 8003852:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003856:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800385a:	d11b      	bne.n	8003894 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003864:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	2200      	movs	r2, #0
 800386a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	2220      	movs	r2, #32
 8003870:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	2200      	movs	r2, #0
 8003878:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003880:	f043 0204 	orr.w	r2, r3, #4
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	2200      	movs	r2, #0
 800388c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003890:	2301      	movs	r3, #1
 8003892:	e000      	b.n	8003896 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003894:	2300      	movs	r3, #0
}
 8003896:	4618      	mov	r0, r3
 8003898:	370c      	adds	r7, #12
 800389a:	46bd      	mov	sp, r7
 800389c:	bc80      	pop	{r7}
 800389e:	4770      	bx	lr

080038a0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80038a0:	b580      	push	{r7, lr}
 80038a2:	b086      	sub	sp, #24
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d101      	bne.n	80038b2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80038ae:	2301      	movs	r3, #1
 80038b0:	e272      	b.n	8003d98 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f003 0301 	and.w	r3, r3, #1
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	f000 8087 	beq.w	80039ce <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80038c0:	4b92      	ldr	r3, [pc, #584]	; (8003b0c <HAL_RCC_OscConfig+0x26c>)
 80038c2:	685b      	ldr	r3, [r3, #4]
 80038c4:	f003 030c 	and.w	r3, r3, #12
 80038c8:	2b04      	cmp	r3, #4
 80038ca:	d00c      	beq.n	80038e6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80038cc:	4b8f      	ldr	r3, [pc, #572]	; (8003b0c <HAL_RCC_OscConfig+0x26c>)
 80038ce:	685b      	ldr	r3, [r3, #4]
 80038d0:	f003 030c 	and.w	r3, r3, #12
 80038d4:	2b08      	cmp	r3, #8
 80038d6:	d112      	bne.n	80038fe <HAL_RCC_OscConfig+0x5e>
 80038d8:	4b8c      	ldr	r3, [pc, #560]	; (8003b0c <HAL_RCC_OscConfig+0x26c>)
 80038da:	685b      	ldr	r3, [r3, #4]
 80038dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80038e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80038e4:	d10b      	bne.n	80038fe <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80038e6:	4b89      	ldr	r3, [pc, #548]	; (8003b0c <HAL_RCC_OscConfig+0x26c>)
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d06c      	beq.n	80039cc <HAL_RCC_OscConfig+0x12c>
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	685b      	ldr	r3, [r3, #4]
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d168      	bne.n	80039cc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80038fa:	2301      	movs	r3, #1
 80038fc:	e24c      	b.n	8003d98 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	685b      	ldr	r3, [r3, #4]
 8003902:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003906:	d106      	bne.n	8003916 <HAL_RCC_OscConfig+0x76>
 8003908:	4b80      	ldr	r3, [pc, #512]	; (8003b0c <HAL_RCC_OscConfig+0x26c>)
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	4a7f      	ldr	r2, [pc, #508]	; (8003b0c <HAL_RCC_OscConfig+0x26c>)
 800390e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003912:	6013      	str	r3, [r2, #0]
 8003914:	e02e      	b.n	8003974 <HAL_RCC_OscConfig+0xd4>
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	685b      	ldr	r3, [r3, #4]
 800391a:	2b00      	cmp	r3, #0
 800391c:	d10c      	bne.n	8003938 <HAL_RCC_OscConfig+0x98>
 800391e:	4b7b      	ldr	r3, [pc, #492]	; (8003b0c <HAL_RCC_OscConfig+0x26c>)
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	4a7a      	ldr	r2, [pc, #488]	; (8003b0c <HAL_RCC_OscConfig+0x26c>)
 8003924:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003928:	6013      	str	r3, [r2, #0]
 800392a:	4b78      	ldr	r3, [pc, #480]	; (8003b0c <HAL_RCC_OscConfig+0x26c>)
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	4a77      	ldr	r2, [pc, #476]	; (8003b0c <HAL_RCC_OscConfig+0x26c>)
 8003930:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003934:	6013      	str	r3, [r2, #0]
 8003936:	e01d      	b.n	8003974 <HAL_RCC_OscConfig+0xd4>
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	685b      	ldr	r3, [r3, #4]
 800393c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003940:	d10c      	bne.n	800395c <HAL_RCC_OscConfig+0xbc>
 8003942:	4b72      	ldr	r3, [pc, #456]	; (8003b0c <HAL_RCC_OscConfig+0x26c>)
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	4a71      	ldr	r2, [pc, #452]	; (8003b0c <HAL_RCC_OscConfig+0x26c>)
 8003948:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800394c:	6013      	str	r3, [r2, #0]
 800394e:	4b6f      	ldr	r3, [pc, #444]	; (8003b0c <HAL_RCC_OscConfig+0x26c>)
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	4a6e      	ldr	r2, [pc, #440]	; (8003b0c <HAL_RCC_OscConfig+0x26c>)
 8003954:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003958:	6013      	str	r3, [r2, #0]
 800395a:	e00b      	b.n	8003974 <HAL_RCC_OscConfig+0xd4>
 800395c:	4b6b      	ldr	r3, [pc, #428]	; (8003b0c <HAL_RCC_OscConfig+0x26c>)
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	4a6a      	ldr	r2, [pc, #424]	; (8003b0c <HAL_RCC_OscConfig+0x26c>)
 8003962:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003966:	6013      	str	r3, [r2, #0]
 8003968:	4b68      	ldr	r3, [pc, #416]	; (8003b0c <HAL_RCC_OscConfig+0x26c>)
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	4a67      	ldr	r2, [pc, #412]	; (8003b0c <HAL_RCC_OscConfig+0x26c>)
 800396e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003972:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	685b      	ldr	r3, [r3, #4]
 8003978:	2b00      	cmp	r3, #0
 800397a:	d013      	beq.n	80039a4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800397c:	f7fe fdd8 	bl	8002530 <HAL_GetTick>
 8003980:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003982:	e008      	b.n	8003996 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003984:	f7fe fdd4 	bl	8002530 <HAL_GetTick>
 8003988:	4602      	mov	r2, r0
 800398a:	693b      	ldr	r3, [r7, #16]
 800398c:	1ad3      	subs	r3, r2, r3
 800398e:	2b64      	cmp	r3, #100	; 0x64
 8003990:	d901      	bls.n	8003996 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003992:	2303      	movs	r3, #3
 8003994:	e200      	b.n	8003d98 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003996:	4b5d      	ldr	r3, [pc, #372]	; (8003b0c <HAL_RCC_OscConfig+0x26c>)
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d0f0      	beq.n	8003984 <HAL_RCC_OscConfig+0xe4>
 80039a2:	e014      	b.n	80039ce <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039a4:	f7fe fdc4 	bl	8002530 <HAL_GetTick>
 80039a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80039aa:	e008      	b.n	80039be <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80039ac:	f7fe fdc0 	bl	8002530 <HAL_GetTick>
 80039b0:	4602      	mov	r2, r0
 80039b2:	693b      	ldr	r3, [r7, #16]
 80039b4:	1ad3      	subs	r3, r2, r3
 80039b6:	2b64      	cmp	r3, #100	; 0x64
 80039b8:	d901      	bls.n	80039be <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80039ba:	2303      	movs	r3, #3
 80039bc:	e1ec      	b.n	8003d98 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80039be:	4b53      	ldr	r3, [pc, #332]	; (8003b0c <HAL_RCC_OscConfig+0x26c>)
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d1f0      	bne.n	80039ac <HAL_RCC_OscConfig+0x10c>
 80039ca:	e000      	b.n	80039ce <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80039cc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f003 0302 	and.w	r3, r3, #2
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d063      	beq.n	8003aa2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80039da:	4b4c      	ldr	r3, [pc, #304]	; (8003b0c <HAL_RCC_OscConfig+0x26c>)
 80039dc:	685b      	ldr	r3, [r3, #4]
 80039de:	f003 030c 	and.w	r3, r3, #12
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d00b      	beq.n	80039fe <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80039e6:	4b49      	ldr	r3, [pc, #292]	; (8003b0c <HAL_RCC_OscConfig+0x26c>)
 80039e8:	685b      	ldr	r3, [r3, #4]
 80039ea:	f003 030c 	and.w	r3, r3, #12
 80039ee:	2b08      	cmp	r3, #8
 80039f0:	d11c      	bne.n	8003a2c <HAL_RCC_OscConfig+0x18c>
 80039f2:	4b46      	ldr	r3, [pc, #280]	; (8003b0c <HAL_RCC_OscConfig+0x26c>)
 80039f4:	685b      	ldr	r3, [r3, #4]
 80039f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d116      	bne.n	8003a2c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80039fe:	4b43      	ldr	r3, [pc, #268]	; (8003b0c <HAL_RCC_OscConfig+0x26c>)
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f003 0302 	and.w	r3, r3, #2
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d005      	beq.n	8003a16 <HAL_RCC_OscConfig+0x176>
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	691b      	ldr	r3, [r3, #16]
 8003a0e:	2b01      	cmp	r3, #1
 8003a10:	d001      	beq.n	8003a16 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003a12:	2301      	movs	r3, #1
 8003a14:	e1c0      	b.n	8003d98 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a16:	4b3d      	ldr	r3, [pc, #244]	; (8003b0c <HAL_RCC_OscConfig+0x26c>)
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	695b      	ldr	r3, [r3, #20]
 8003a22:	00db      	lsls	r3, r3, #3
 8003a24:	4939      	ldr	r1, [pc, #228]	; (8003b0c <HAL_RCC_OscConfig+0x26c>)
 8003a26:	4313      	orrs	r3, r2
 8003a28:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a2a:	e03a      	b.n	8003aa2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	691b      	ldr	r3, [r3, #16]
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d020      	beq.n	8003a76 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003a34:	4b36      	ldr	r3, [pc, #216]	; (8003b10 <HAL_RCC_OscConfig+0x270>)
 8003a36:	2201      	movs	r2, #1
 8003a38:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a3a:	f7fe fd79 	bl	8002530 <HAL_GetTick>
 8003a3e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a40:	e008      	b.n	8003a54 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003a42:	f7fe fd75 	bl	8002530 <HAL_GetTick>
 8003a46:	4602      	mov	r2, r0
 8003a48:	693b      	ldr	r3, [r7, #16]
 8003a4a:	1ad3      	subs	r3, r2, r3
 8003a4c:	2b02      	cmp	r3, #2
 8003a4e:	d901      	bls.n	8003a54 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003a50:	2303      	movs	r3, #3
 8003a52:	e1a1      	b.n	8003d98 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a54:	4b2d      	ldr	r3, [pc, #180]	; (8003b0c <HAL_RCC_OscConfig+0x26c>)
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	f003 0302 	and.w	r3, r3, #2
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d0f0      	beq.n	8003a42 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a60:	4b2a      	ldr	r3, [pc, #168]	; (8003b0c <HAL_RCC_OscConfig+0x26c>)
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	695b      	ldr	r3, [r3, #20]
 8003a6c:	00db      	lsls	r3, r3, #3
 8003a6e:	4927      	ldr	r1, [pc, #156]	; (8003b0c <HAL_RCC_OscConfig+0x26c>)
 8003a70:	4313      	orrs	r3, r2
 8003a72:	600b      	str	r3, [r1, #0]
 8003a74:	e015      	b.n	8003aa2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003a76:	4b26      	ldr	r3, [pc, #152]	; (8003b10 <HAL_RCC_OscConfig+0x270>)
 8003a78:	2200      	movs	r2, #0
 8003a7a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a7c:	f7fe fd58 	bl	8002530 <HAL_GetTick>
 8003a80:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a82:	e008      	b.n	8003a96 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003a84:	f7fe fd54 	bl	8002530 <HAL_GetTick>
 8003a88:	4602      	mov	r2, r0
 8003a8a:	693b      	ldr	r3, [r7, #16]
 8003a8c:	1ad3      	subs	r3, r2, r3
 8003a8e:	2b02      	cmp	r3, #2
 8003a90:	d901      	bls.n	8003a96 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003a92:	2303      	movs	r3, #3
 8003a94:	e180      	b.n	8003d98 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a96:	4b1d      	ldr	r3, [pc, #116]	; (8003b0c <HAL_RCC_OscConfig+0x26c>)
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f003 0302 	and.w	r3, r3, #2
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d1f0      	bne.n	8003a84 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f003 0308 	and.w	r3, r3, #8
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d03a      	beq.n	8003b24 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	699b      	ldr	r3, [r3, #24]
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d019      	beq.n	8003aea <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003ab6:	4b17      	ldr	r3, [pc, #92]	; (8003b14 <HAL_RCC_OscConfig+0x274>)
 8003ab8:	2201      	movs	r2, #1
 8003aba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003abc:	f7fe fd38 	bl	8002530 <HAL_GetTick>
 8003ac0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003ac2:	e008      	b.n	8003ad6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003ac4:	f7fe fd34 	bl	8002530 <HAL_GetTick>
 8003ac8:	4602      	mov	r2, r0
 8003aca:	693b      	ldr	r3, [r7, #16]
 8003acc:	1ad3      	subs	r3, r2, r3
 8003ace:	2b02      	cmp	r3, #2
 8003ad0:	d901      	bls.n	8003ad6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003ad2:	2303      	movs	r3, #3
 8003ad4:	e160      	b.n	8003d98 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003ad6:	4b0d      	ldr	r3, [pc, #52]	; (8003b0c <HAL_RCC_OscConfig+0x26c>)
 8003ad8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ada:	f003 0302 	and.w	r3, r3, #2
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d0f0      	beq.n	8003ac4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003ae2:	2001      	movs	r0, #1
 8003ae4:	f000 fad8 	bl	8004098 <RCC_Delay>
 8003ae8:	e01c      	b.n	8003b24 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003aea:	4b0a      	ldr	r3, [pc, #40]	; (8003b14 <HAL_RCC_OscConfig+0x274>)
 8003aec:	2200      	movs	r2, #0
 8003aee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003af0:	f7fe fd1e 	bl	8002530 <HAL_GetTick>
 8003af4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003af6:	e00f      	b.n	8003b18 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003af8:	f7fe fd1a 	bl	8002530 <HAL_GetTick>
 8003afc:	4602      	mov	r2, r0
 8003afe:	693b      	ldr	r3, [r7, #16]
 8003b00:	1ad3      	subs	r3, r2, r3
 8003b02:	2b02      	cmp	r3, #2
 8003b04:	d908      	bls.n	8003b18 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003b06:	2303      	movs	r3, #3
 8003b08:	e146      	b.n	8003d98 <HAL_RCC_OscConfig+0x4f8>
 8003b0a:	bf00      	nop
 8003b0c:	40021000 	.word	0x40021000
 8003b10:	42420000 	.word	0x42420000
 8003b14:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b18:	4b92      	ldr	r3, [pc, #584]	; (8003d64 <HAL_RCC_OscConfig+0x4c4>)
 8003b1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b1c:	f003 0302 	and.w	r3, r3, #2
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d1e9      	bne.n	8003af8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	f003 0304 	and.w	r3, r3, #4
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	f000 80a6 	beq.w	8003c7e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003b32:	2300      	movs	r3, #0
 8003b34:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003b36:	4b8b      	ldr	r3, [pc, #556]	; (8003d64 <HAL_RCC_OscConfig+0x4c4>)
 8003b38:	69db      	ldr	r3, [r3, #28]
 8003b3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d10d      	bne.n	8003b5e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b42:	4b88      	ldr	r3, [pc, #544]	; (8003d64 <HAL_RCC_OscConfig+0x4c4>)
 8003b44:	69db      	ldr	r3, [r3, #28]
 8003b46:	4a87      	ldr	r2, [pc, #540]	; (8003d64 <HAL_RCC_OscConfig+0x4c4>)
 8003b48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b4c:	61d3      	str	r3, [r2, #28]
 8003b4e:	4b85      	ldr	r3, [pc, #532]	; (8003d64 <HAL_RCC_OscConfig+0x4c4>)
 8003b50:	69db      	ldr	r3, [r3, #28]
 8003b52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b56:	60bb      	str	r3, [r7, #8]
 8003b58:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003b5a:	2301      	movs	r3, #1
 8003b5c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b5e:	4b82      	ldr	r3, [pc, #520]	; (8003d68 <HAL_RCC_OscConfig+0x4c8>)
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d118      	bne.n	8003b9c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003b6a:	4b7f      	ldr	r3, [pc, #508]	; (8003d68 <HAL_RCC_OscConfig+0x4c8>)
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	4a7e      	ldr	r2, [pc, #504]	; (8003d68 <HAL_RCC_OscConfig+0x4c8>)
 8003b70:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b74:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003b76:	f7fe fcdb 	bl	8002530 <HAL_GetTick>
 8003b7a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b7c:	e008      	b.n	8003b90 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b7e:	f7fe fcd7 	bl	8002530 <HAL_GetTick>
 8003b82:	4602      	mov	r2, r0
 8003b84:	693b      	ldr	r3, [r7, #16]
 8003b86:	1ad3      	subs	r3, r2, r3
 8003b88:	2b64      	cmp	r3, #100	; 0x64
 8003b8a:	d901      	bls.n	8003b90 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003b8c:	2303      	movs	r3, #3
 8003b8e:	e103      	b.n	8003d98 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b90:	4b75      	ldr	r3, [pc, #468]	; (8003d68 <HAL_RCC_OscConfig+0x4c8>)
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d0f0      	beq.n	8003b7e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	68db      	ldr	r3, [r3, #12]
 8003ba0:	2b01      	cmp	r3, #1
 8003ba2:	d106      	bne.n	8003bb2 <HAL_RCC_OscConfig+0x312>
 8003ba4:	4b6f      	ldr	r3, [pc, #444]	; (8003d64 <HAL_RCC_OscConfig+0x4c4>)
 8003ba6:	6a1b      	ldr	r3, [r3, #32]
 8003ba8:	4a6e      	ldr	r2, [pc, #440]	; (8003d64 <HAL_RCC_OscConfig+0x4c4>)
 8003baa:	f043 0301 	orr.w	r3, r3, #1
 8003bae:	6213      	str	r3, [r2, #32]
 8003bb0:	e02d      	b.n	8003c0e <HAL_RCC_OscConfig+0x36e>
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	68db      	ldr	r3, [r3, #12]
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d10c      	bne.n	8003bd4 <HAL_RCC_OscConfig+0x334>
 8003bba:	4b6a      	ldr	r3, [pc, #424]	; (8003d64 <HAL_RCC_OscConfig+0x4c4>)
 8003bbc:	6a1b      	ldr	r3, [r3, #32]
 8003bbe:	4a69      	ldr	r2, [pc, #420]	; (8003d64 <HAL_RCC_OscConfig+0x4c4>)
 8003bc0:	f023 0301 	bic.w	r3, r3, #1
 8003bc4:	6213      	str	r3, [r2, #32]
 8003bc6:	4b67      	ldr	r3, [pc, #412]	; (8003d64 <HAL_RCC_OscConfig+0x4c4>)
 8003bc8:	6a1b      	ldr	r3, [r3, #32]
 8003bca:	4a66      	ldr	r2, [pc, #408]	; (8003d64 <HAL_RCC_OscConfig+0x4c4>)
 8003bcc:	f023 0304 	bic.w	r3, r3, #4
 8003bd0:	6213      	str	r3, [r2, #32]
 8003bd2:	e01c      	b.n	8003c0e <HAL_RCC_OscConfig+0x36e>
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	68db      	ldr	r3, [r3, #12]
 8003bd8:	2b05      	cmp	r3, #5
 8003bda:	d10c      	bne.n	8003bf6 <HAL_RCC_OscConfig+0x356>
 8003bdc:	4b61      	ldr	r3, [pc, #388]	; (8003d64 <HAL_RCC_OscConfig+0x4c4>)
 8003bde:	6a1b      	ldr	r3, [r3, #32]
 8003be0:	4a60      	ldr	r2, [pc, #384]	; (8003d64 <HAL_RCC_OscConfig+0x4c4>)
 8003be2:	f043 0304 	orr.w	r3, r3, #4
 8003be6:	6213      	str	r3, [r2, #32]
 8003be8:	4b5e      	ldr	r3, [pc, #376]	; (8003d64 <HAL_RCC_OscConfig+0x4c4>)
 8003bea:	6a1b      	ldr	r3, [r3, #32]
 8003bec:	4a5d      	ldr	r2, [pc, #372]	; (8003d64 <HAL_RCC_OscConfig+0x4c4>)
 8003bee:	f043 0301 	orr.w	r3, r3, #1
 8003bf2:	6213      	str	r3, [r2, #32]
 8003bf4:	e00b      	b.n	8003c0e <HAL_RCC_OscConfig+0x36e>
 8003bf6:	4b5b      	ldr	r3, [pc, #364]	; (8003d64 <HAL_RCC_OscConfig+0x4c4>)
 8003bf8:	6a1b      	ldr	r3, [r3, #32]
 8003bfa:	4a5a      	ldr	r2, [pc, #360]	; (8003d64 <HAL_RCC_OscConfig+0x4c4>)
 8003bfc:	f023 0301 	bic.w	r3, r3, #1
 8003c00:	6213      	str	r3, [r2, #32]
 8003c02:	4b58      	ldr	r3, [pc, #352]	; (8003d64 <HAL_RCC_OscConfig+0x4c4>)
 8003c04:	6a1b      	ldr	r3, [r3, #32]
 8003c06:	4a57      	ldr	r2, [pc, #348]	; (8003d64 <HAL_RCC_OscConfig+0x4c4>)
 8003c08:	f023 0304 	bic.w	r3, r3, #4
 8003c0c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	68db      	ldr	r3, [r3, #12]
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d015      	beq.n	8003c42 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c16:	f7fe fc8b 	bl	8002530 <HAL_GetTick>
 8003c1a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c1c:	e00a      	b.n	8003c34 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c1e:	f7fe fc87 	bl	8002530 <HAL_GetTick>
 8003c22:	4602      	mov	r2, r0
 8003c24:	693b      	ldr	r3, [r7, #16]
 8003c26:	1ad3      	subs	r3, r2, r3
 8003c28:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c2c:	4293      	cmp	r3, r2
 8003c2e:	d901      	bls.n	8003c34 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003c30:	2303      	movs	r3, #3
 8003c32:	e0b1      	b.n	8003d98 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c34:	4b4b      	ldr	r3, [pc, #300]	; (8003d64 <HAL_RCC_OscConfig+0x4c4>)
 8003c36:	6a1b      	ldr	r3, [r3, #32]
 8003c38:	f003 0302 	and.w	r3, r3, #2
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d0ee      	beq.n	8003c1e <HAL_RCC_OscConfig+0x37e>
 8003c40:	e014      	b.n	8003c6c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c42:	f7fe fc75 	bl	8002530 <HAL_GetTick>
 8003c46:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c48:	e00a      	b.n	8003c60 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c4a:	f7fe fc71 	bl	8002530 <HAL_GetTick>
 8003c4e:	4602      	mov	r2, r0
 8003c50:	693b      	ldr	r3, [r7, #16]
 8003c52:	1ad3      	subs	r3, r2, r3
 8003c54:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c58:	4293      	cmp	r3, r2
 8003c5a:	d901      	bls.n	8003c60 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003c5c:	2303      	movs	r3, #3
 8003c5e:	e09b      	b.n	8003d98 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c60:	4b40      	ldr	r3, [pc, #256]	; (8003d64 <HAL_RCC_OscConfig+0x4c4>)
 8003c62:	6a1b      	ldr	r3, [r3, #32]
 8003c64:	f003 0302 	and.w	r3, r3, #2
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d1ee      	bne.n	8003c4a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003c6c:	7dfb      	ldrb	r3, [r7, #23]
 8003c6e:	2b01      	cmp	r3, #1
 8003c70:	d105      	bne.n	8003c7e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c72:	4b3c      	ldr	r3, [pc, #240]	; (8003d64 <HAL_RCC_OscConfig+0x4c4>)
 8003c74:	69db      	ldr	r3, [r3, #28]
 8003c76:	4a3b      	ldr	r2, [pc, #236]	; (8003d64 <HAL_RCC_OscConfig+0x4c4>)
 8003c78:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003c7c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	69db      	ldr	r3, [r3, #28]
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	f000 8087 	beq.w	8003d96 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003c88:	4b36      	ldr	r3, [pc, #216]	; (8003d64 <HAL_RCC_OscConfig+0x4c4>)
 8003c8a:	685b      	ldr	r3, [r3, #4]
 8003c8c:	f003 030c 	and.w	r3, r3, #12
 8003c90:	2b08      	cmp	r3, #8
 8003c92:	d061      	beq.n	8003d58 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	69db      	ldr	r3, [r3, #28]
 8003c98:	2b02      	cmp	r3, #2
 8003c9a:	d146      	bne.n	8003d2a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c9c:	4b33      	ldr	r3, [pc, #204]	; (8003d6c <HAL_RCC_OscConfig+0x4cc>)
 8003c9e:	2200      	movs	r2, #0
 8003ca0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ca2:	f7fe fc45 	bl	8002530 <HAL_GetTick>
 8003ca6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003ca8:	e008      	b.n	8003cbc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003caa:	f7fe fc41 	bl	8002530 <HAL_GetTick>
 8003cae:	4602      	mov	r2, r0
 8003cb0:	693b      	ldr	r3, [r7, #16]
 8003cb2:	1ad3      	subs	r3, r2, r3
 8003cb4:	2b02      	cmp	r3, #2
 8003cb6:	d901      	bls.n	8003cbc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003cb8:	2303      	movs	r3, #3
 8003cba:	e06d      	b.n	8003d98 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003cbc:	4b29      	ldr	r3, [pc, #164]	; (8003d64 <HAL_RCC_OscConfig+0x4c4>)
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d1f0      	bne.n	8003caa <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	6a1b      	ldr	r3, [r3, #32]
 8003ccc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003cd0:	d108      	bne.n	8003ce4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003cd2:	4b24      	ldr	r3, [pc, #144]	; (8003d64 <HAL_RCC_OscConfig+0x4c4>)
 8003cd4:	685b      	ldr	r3, [r3, #4]
 8003cd6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	689b      	ldr	r3, [r3, #8]
 8003cde:	4921      	ldr	r1, [pc, #132]	; (8003d64 <HAL_RCC_OscConfig+0x4c4>)
 8003ce0:	4313      	orrs	r3, r2
 8003ce2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003ce4:	4b1f      	ldr	r3, [pc, #124]	; (8003d64 <HAL_RCC_OscConfig+0x4c4>)
 8003ce6:	685b      	ldr	r3, [r3, #4]
 8003ce8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	6a19      	ldr	r1, [r3, #32]
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cf4:	430b      	orrs	r3, r1
 8003cf6:	491b      	ldr	r1, [pc, #108]	; (8003d64 <HAL_RCC_OscConfig+0x4c4>)
 8003cf8:	4313      	orrs	r3, r2
 8003cfa:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003cfc:	4b1b      	ldr	r3, [pc, #108]	; (8003d6c <HAL_RCC_OscConfig+0x4cc>)
 8003cfe:	2201      	movs	r2, #1
 8003d00:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d02:	f7fe fc15 	bl	8002530 <HAL_GetTick>
 8003d06:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003d08:	e008      	b.n	8003d1c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d0a:	f7fe fc11 	bl	8002530 <HAL_GetTick>
 8003d0e:	4602      	mov	r2, r0
 8003d10:	693b      	ldr	r3, [r7, #16]
 8003d12:	1ad3      	subs	r3, r2, r3
 8003d14:	2b02      	cmp	r3, #2
 8003d16:	d901      	bls.n	8003d1c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003d18:	2303      	movs	r3, #3
 8003d1a:	e03d      	b.n	8003d98 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003d1c:	4b11      	ldr	r3, [pc, #68]	; (8003d64 <HAL_RCC_OscConfig+0x4c4>)
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d0f0      	beq.n	8003d0a <HAL_RCC_OscConfig+0x46a>
 8003d28:	e035      	b.n	8003d96 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d2a:	4b10      	ldr	r3, [pc, #64]	; (8003d6c <HAL_RCC_OscConfig+0x4cc>)
 8003d2c:	2200      	movs	r2, #0
 8003d2e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d30:	f7fe fbfe 	bl	8002530 <HAL_GetTick>
 8003d34:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003d36:	e008      	b.n	8003d4a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d38:	f7fe fbfa 	bl	8002530 <HAL_GetTick>
 8003d3c:	4602      	mov	r2, r0
 8003d3e:	693b      	ldr	r3, [r7, #16]
 8003d40:	1ad3      	subs	r3, r2, r3
 8003d42:	2b02      	cmp	r3, #2
 8003d44:	d901      	bls.n	8003d4a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003d46:	2303      	movs	r3, #3
 8003d48:	e026      	b.n	8003d98 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003d4a:	4b06      	ldr	r3, [pc, #24]	; (8003d64 <HAL_RCC_OscConfig+0x4c4>)
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d1f0      	bne.n	8003d38 <HAL_RCC_OscConfig+0x498>
 8003d56:	e01e      	b.n	8003d96 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	69db      	ldr	r3, [r3, #28]
 8003d5c:	2b01      	cmp	r3, #1
 8003d5e:	d107      	bne.n	8003d70 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003d60:	2301      	movs	r3, #1
 8003d62:	e019      	b.n	8003d98 <HAL_RCC_OscConfig+0x4f8>
 8003d64:	40021000 	.word	0x40021000
 8003d68:	40007000 	.word	0x40007000
 8003d6c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003d70:	4b0b      	ldr	r3, [pc, #44]	; (8003da0 <HAL_RCC_OscConfig+0x500>)
 8003d72:	685b      	ldr	r3, [r3, #4]
 8003d74:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	6a1b      	ldr	r3, [r3, #32]
 8003d80:	429a      	cmp	r2, r3
 8003d82:	d106      	bne.n	8003d92 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d8e:	429a      	cmp	r2, r3
 8003d90:	d001      	beq.n	8003d96 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003d92:	2301      	movs	r3, #1
 8003d94:	e000      	b.n	8003d98 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003d96:	2300      	movs	r3, #0
}
 8003d98:	4618      	mov	r0, r3
 8003d9a:	3718      	adds	r7, #24
 8003d9c:	46bd      	mov	sp, r7
 8003d9e:	bd80      	pop	{r7, pc}
 8003da0:	40021000 	.word	0x40021000

08003da4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003da4:	b580      	push	{r7, lr}
 8003da6:	b084      	sub	sp, #16
 8003da8:	af00      	add	r7, sp, #0
 8003daa:	6078      	str	r0, [r7, #4]
 8003dac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d101      	bne.n	8003db8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003db4:	2301      	movs	r3, #1
 8003db6:	e0d0      	b.n	8003f5a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003db8:	4b6a      	ldr	r3, [pc, #424]	; (8003f64 <HAL_RCC_ClockConfig+0x1c0>)
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f003 0307 	and.w	r3, r3, #7
 8003dc0:	683a      	ldr	r2, [r7, #0]
 8003dc2:	429a      	cmp	r2, r3
 8003dc4:	d910      	bls.n	8003de8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003dc6:	4b67      	ldr	r3, [pc, #412]	; (8003f64 <HAL_RCC_ClockConfig+0x1c0>)
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	f023 0207 	bic.w	r2, r3, #7
 8003dce:	4965      	ldr	r1, [pc, #404]	; (8003f64 <HAL_RCC_ClockConfig+0x1c0>)
 8003dd0:	683b      	ldr	r3, [r7, #0]
 8003dd2:	4313      	orrs	r3, r2
 8003dd4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003dd6:	4b63      	ldr	r3, [pc, #396]	; (8003f64 <HAL_RCC_ClockConfig+0x1c0>)
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	f003 0307 	and.w	r3, r3, #7
 8003dde:	683a      	ldr	r2, [r7, #0]
 8003de0:	429a      	cmp	r2, r3
 8003de2:	d001      	beq.n	8003de8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003de4:	2301      	movs	r3, #1
 8003de6:	e0b8      	b.n	8003f5a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	f003 0302 	and.w	r3, r3, #2
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d020      	beq.n	8003e36 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	f003 0304 	and.w	r3, r3, #4
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d005      	beq.n	8003e0c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003e00:	4b59      	ldr	r3, [pc, #356]	; (8003f68 <HAL_RCC_ClockConfig+0x1c4>)
 8003e02:	685b      	ldr	r3, [r3, #4]
 8003e04:	4a58      	ldr	r2, [pc, #352]	; (8003f68 <HAL_RCC_ClockConfig+0x1c4>)
 8003e06:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003e0a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	f003 0308 	and.w	r3, r3, #8
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d005      	beq.n	8003e24 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003e18:	4b53      	ldr	r3, [pc, #332]	; (8003f68 <HAL_RCC_ClockConfig+0x1c4>)
 8003e1a:	685b      	ldr	r3, [r3, #4]
 8003e1c:	4a52      	ldr	r2, [pc, #328]	; (8003f68 <HAL_RCC_ClockConfig+0x1c4>)
 8003e1e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003e22:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003e24:	4b50      	ldr	r3, [pc, #320]	; (8003f68 <HAL_RCC_ClockConfig+0x1c4>)
 8003e26:	685b      	ldr	r3, [r3, #4]
 8003e28:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	689b      	ldr	r3, [r3, #8]
 8003e30:	494d      	ldr	r1, [pc, #308]	; (8003f68 <HAL_RCC_ClockConfig+0x1c4>)
 8003e32:	4313      	orrs	r3, r2
 8003e34:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	f003 0301 	and.w	r3, r3, #1
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d040      	beq.n	8003ec4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	685b      	ldr	r3, [r3, #4]
 8003e46:	2b01      	cmp	r3, #1
 8003e48:	d107      	bne.n	8003e5a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e4a:	4b47      	ldr	r3, [pc, #284]	; (8003f68 <HAL_RCC_ClockConfig+0x1c4>)
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d115      	bne.n	8003e82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e56:	2301      	movs	r3, #1
 8003e58:	e07f      	b.n	8003f5a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	685b      	ldr	r3, [r3, #4]
 8003e5e:	2b02      	cmp	r3, #2
 8003e60:	d107      	bne.n	8003e72 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e62:	4b41      	ldr	r3, [pc, #260]	; (8003f68 <HAL_RCC_ClockConfig+0x1c4>)
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d109      	bne.n	8003e82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e6e:	2301      	movs	r3, #1
 8003e70:	e073      	b.n	8003f5a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e72:	4b3d      	ldr	r3, [pc, #244]	; (8003f68 <HAL_RCC_ClockConfig+0x1c4>)
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	f003 0302 	and.w	r3, r3, #2
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d101      	bne.n	8003e82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e7e:	2301      	movs	r3, #1
 8003e80:	e06b      	b.n	8003f5a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003e82:	4b39      	ldr	r3, [pc, #228]	; (8003f68 <HAL_RCC_ClockConfig+0x1c4>)
 8003e84:	685b      	ldr	r3, [r3, #4]
 8003e86:	f023 0203 	bic.w	r2, r3, #3
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	685b      	ldr	r3, [r3, #4]
 8003e8e:	4936      	ldr	r1, [pc, #216]	; (8003f68 <HAL_RCC_ClockConfig+0x1c4>)
 8003e90:	4313      	orrs	r3, r2
 8003e92:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003e94:	f7fe fb4c 	bl	8002530 <HAL_GetTick>
 8003e98:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e9a:	e00a      	b.n	8003eb2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003e9c:	f7fe fb48 	bl	8002530 <HAL_GetTick>
 8003ea0:	4602      	mov	r2, r0
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	1ad3      	subs	r3, r2, r3
 8003ea6:	f241 3288 	movw	r2, #5000	; 0x1388
 8003eaa:	4293      	cmp	r3, r2
 8003eac:	d901      	bls.n	8003eb2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003eae:	2303      	movs	r3, #3
 8003eb0:	e053      	b.n	8003f5a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003eb2:	4b2d      	ldr	r3, [pc, #180]	; (8003f68 <HAL_RCC_ClockConfig+0x1c4>)
 8003eb4:	685b      	ldr	r3, [r3, #4]
 8003eb6:	f003 020c 	and.w	r2, r3, #12
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	685b      	ldr	r3, [r3, #4]
 8003ebe:	009b      	lsls	r3, r3, #2
 8003ec0:	429a      	cmp	r2, r3
 8003ec2:	d1eb      	bne.n	8003e9c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003ec4:	4b27      	ldr	r3, [pc, #156]	; (8003f64 <HAL_RCC_ClockConfig+0x1c0>)
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	f003 0307 	and.w	r3, r3, #7
 8003ecc:	683a      	ldr	r2, [r7, #0]
 8003ece:	429a      	cmp	r2, r3
 8003ed0:	d210      	bcs.n	8003ef4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ed2:	4b24      	ldr	r3, [pc, #144]	; (8003f64 <HAL_RCC_ClockConfig+0x1c0>)
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	f023 0207 	bic.w	r2, r3, #7
 8003eda:	4922      	ldr	r1, [pc, #136]	; (8003f64 <HAL_RCC_ClockConfig+0x1c0>)
 8003edc:	683b      	ldr	r3, [r7, #0]
 8003ede:	4313      	orrs	r3, r2
 8003ee0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ee2:	4b20      	ldr	r3, [pc, #128]	; (8003f64 <HAL_RCC_ClockConfig+0x1c0>)
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	f003 0307 	and.w	r3, r3, #7
 8003eea:	683a      	ldr	r2, [r7, #0]
 8003eec:	429a      	cmp	r2, r3
 8003eee:	d001      	beq.n	8003ef4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003ef0:	2301      	movs	r3, #1
 8003ef2:	e032      	b.n	8003f5a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	f003 0304 	and.w	r3, r3, #4
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d008      	beq.n	8003f12 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003f00:	4b19      	ldr	r3, [pc, #100]	; (8003f68 <HAL_RCC_ClockConfig+0x1c4>)
 8003f02:	685b      	ldr	r3, [r3, #4]
 8003f04:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	68db      	ldr	r3, [r3, #12]
 8003f0c:	4916      	ldr	r1, [pc, #88]	; (8003f68 <HAL_RCC_ClockConfig+0x1c4>)
 8003f0e:	4313      	orrs	r3, r2
 8003f10:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	f003 0308 	and.w	r3, r3, #8
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d009      	beq.n	8003f32 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003f1e:	4b12      	ldr	r3, [pc, #72]	; (8003f68 <HAL_RCC_ClockConfig+0x1c4>)
 8003f20:	685b      	ldr	r3, [r3, #4]
 8003f22:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	691b      	ldr	r3, [r3, #16]
 8003f2a:	00db      	lsls	r3, r3, #3
 8003f2c:	490e      	ldr	r1, [pc, #56]	; (8003f68 <HAL_RCC_ClockConfig+0x1c4>)
 8003f2e:	4313      	orrs	r3, r2
 8003f30:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003f32:	f000 f821 	bl	8003f78 <HAL_RCC_GetSysClockFreq>
 8003f36:	4602      	mov	r2, r0
 8003f38:	4b0b      	ldr	r3, [pc, #44]	; (8003f68 <HAL_RCC_ClockConfig+0x1c4>)
 8003f3a:	685b      	ldr	r3, [r3, #4]
 8003f3c:	091b      	lsrs	r3, r3, #4
 8003f3e:	f003 030f 	and.w	r3, r3, #15
 8003f42:	490a      	ldr	r1, [pc, #40]	; (8003f6c <HAL_RCC_ClockConfig+0x1c8>)
 8003f44:	5ccb      	ldrb	r3, [r1, r3]
 8003f46:	fa22 f303 	lsr.w	r3, r2, r3
 8003f4a:	4a09      	ldr	r2, [pc, #36]	; (8003f70 <HAL_RCC_ClockConfig+0x1cc>)
 8003f4c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003f4e:	4b09      	ldr	r3, [pc, #36]	; (8003f74 <HAL_RCC_ClockConfig+0x1d0>)
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	4618      	mov	r0, r3
 8003f54:	f7fe faaa 	bl	80024ac <HAL_InitTick>

  return HAL_OK;
 8003f58:	2300      	movs	r3, #0
}
 8003f5a:	4618      	mov	r0, r3
 8003f5c:	3710      	adds	r7, #16
 8003f5e:	46bd      	mov	sp, r7
 8003f60:	bd80      	pop	{r7, pc}
 8003f62:	bf00      	nop
 8003f64:	40022000 	.word	0x40022000
 8003f68:	40021000 	.word	0x40021000
 8003f6c:	08008c4c 	.word	0x08008c4c
 8003f70:	2000000c 	.word	0x2000000c
 8003f74:	20000010 	.word	0x20000010

08003f78 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003f78:	b490      	push	{r4, r7}
 8003f7a:	b08a      	sub	sp, #40	; 0x28
 8003f7c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003f7e:	4b29      	ldr	r3, [pc, #164]	; (8004024 <HAL_RCC_GetSysClockFreq+0xac>)
 8003f80:	1d3c      	adds	r4, r7, #4
 8003f82:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003f84:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003f88:	f240 2301 	movw	r3, #513	; 0x201
 8003f8c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003f8e:	2300      	movs	r3, #0
 8003f90:	61fb      	str	r3, [r7, #28]
 8003f92:	2300      	movs	r3, #0
 8003f94:	61bb      	str	r3, [r7, #24]
 8003f96:	2300      	movs	r3, #0
 8003f98:	627b      	str	r3, [r7, #36]	; 0x24
 8003f9a:	2300      	movs	r3, #0
 8003f9c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003f9e:	2300      	movs	r3, #0
 8003fa0:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003fa2:	4b21      	ldr	r3, [pc, #132]	; (8004028 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003fa4:	685b      	ldr	r3, [r3, #4]
 8003fa6:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003fa8:	69fb      	ldr	r3, [r7, #28]
 8003faa:	f003 030c 	and.w	r3, r3, #12
 8003fae:	2b04      	cmp	r3, #4
 8003fb0:	d002      	beq.n	8003fb8 <HAL_RCC_GetSysClockFreq+0x40>
 8003fb2:	2b08      	cmp	r3, #8
 8003fb4:	d003      	beq.n	8003fbe <HAL_RCC_GetSysClockFreq+0x46>
 8003fb6:	e02b      	b.n	8004010 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003fb8:	4b1c      	ldr	r3, [pc, #112]	; (800402c <HAL_RCC_GetSysClockFreq+0xb4>)
 8003fba:	623b      	str	r3, [r7, #32]
      break;
 8003fbc:	e02b      	b.n	8004016 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003fbe:	69fb      	ldr	r3, [r7, #28]
 8003fc0:	0c9b      	lsrs	r3, r3, #18
 8003fc2:	f003 030f 	and.w	r3, r3, #15
 8003fc6:	3328      	adds	r3, #40	; 0x28
 8003fc8:	443b      	add	r3, r7
 8003fca:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003fce:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003fd0:	69fb      	ldr	r3, [r7, #28]
 8003fd2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d012      	beq.n	8004000 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003fda:	4b13      	ldr	r3, [pc, #76]	; (8004028 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003fdc:	685b      	ldr	r3, [r3, #4]
 8003fde:	0c5b      	lsrs	r3, r3, #17
 8003fe0:	f003 0301 	and.w	r3, r3, #1
 8003fe4:	3328      	adds	r3, #40	; 0x28
 8003fe6:	443b      	add	r3, r7
 8003fe8:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003fec:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003fee:	697b      	ldr	r3, [r7, #20]
 8003ff0:	4a0e      	ldr	r2, [pc, #56]	; (800402c <HAL_RCC_GetSysClockFreq+0xb4>)
 8003ff2:	fb03 f202 	mul.w	r2, r3, r2
 8003ff6:	69bb      	ldr	r3, [r7, #24]
 8003ff8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ffc:	627b      	str	r3, [r7, #36]	; 0x24
 8003ffe:	e004      	b.n	800400a <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004000:	697b      	ldr	r3, [r7, #20]
 8004002:	4a0b      	ldr	r2, [pc, #44]	; (8004030 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004004:	fb02 f303 	mul.w	r3, r2, r3
 8004008:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800400a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800400c:	623b      	str	r3, [r7, #32]
      break;
 800400e:	e002      	b.n	8004016 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004010:	4b06      	ldr	r3, [pc, #24]	; (800402c <HAL_RCC_GetSysClockFreq+0xb4>)
 8004012:	623b      	str	r3, [r7, #32]
      break;
 8004014:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004016:	6a3b      	ldr	r3, [r7, #32]
}
 8004018:	4618      	mov	r0, r3
 800401a:	3728      	adds	r7, #40	; 0x28
 800401c:	46bd      	mov	sp, r7
 800401e:	bc90      	pop	{r4, r7}
 8004020:	4770      	bx	lr
 8004022:	bf00      	nop
 8004024:	080084d0 	.word	0x080084d0
 8004028:	40021000 	.word	0x40021000
 800402c:	007a1200 	.word	0x007a1200
 8004030:	003d0900 	.word	0x003d0900

08004034 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004034:	b480      	push	{r7}
 8004036:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004038:	4b02      	ldr	r3, [pc, #8]	; (8004044 <HAL_RCC_GetHCLKFreq+0x10>)
 800403a:	681b      	ldr	r3, [r3, #0]
}
 800403c:	4618      	mov	r0, r3
 800403e:	46bd      	mov	sp, r7
 8004040:	bc80      	pop	{r7}
 8004042:	4770      	bx	lr
 8004044:	2000000c 	.word	0x2000000c

08004048 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004048:	b580      	push	{r7, lr}
 800404a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800404c:	f7ff fff2 	bl	8004034 <HAL_RCC_GetHCLKFreq>
 8004050:	4602      	mov	r2, r0
 8004052:	4b05      	ldr	r3, [pc, #20]	; (8004068 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004054:	685b      	ldr	r3, [r3, #4]
 8004056:	0a1b      	lsrs	r3, r3, #8
 8004058:	f003 0307 	and.w	r3, r3, #7
 800405c:	4903      	ldr	r1, [pc, #12]	; (800406c <HAL_RCC_GetPCLK1Freq+0x24>)
 800405e:	5ccb      	ldrb	r3, [r1, r3]
 8004060:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004064:	4618      	mov	r0, r3
 8004066:	bd80      	pop	{r7, pc}
 8004068:	40021000 	.word	0x40021000
 800406c:	08008c5c 	.word	0x08008c5c

08004070 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004070:	b580      	push	{r7, lr}
 8004072:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004074:	f7ff ffde 	bl	8004034 <HAL_RCC_GetHCLKFreq>
 8004078:	4602      	mov	r2, r0
 800407a:	4b05      	ldr	r3, [pc, #20]	; (8004090 <HAL_RCC_GetPCLK2Freq+0x20>)
 800407c:	685b      	ldr	r3, [r3, #4]
 800407e:	0adb      	lsrs	r3, r3, #11
 8004080:	f003 0307 	and.w	r3, r3, #7
 8004084:	4903      	ldr	r1, [pc, #12]	; (8004094 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004086:	5ccb      	ldrb	r3, [r1, r3]
 8004088:	fa22 f303 	lsr.w	r3, r2, r3
}
 800408c:	4618      	mov	r0, r3
 800408e:	bd80      	pop	{r7, pc}
 8004090:	40021000 	.word	0x40021000
 8004094:	08008c5c 	.word	0x08008c5c

08004098 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004098:	b480      	push	{r7}
 800409a:	b085      	sub	sp, #20
 800409c:	af00      	add	r7, sp, #0
 800409e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80040a0:	4b0a      	ldr	r3, [pc, #40]	; (80040cc <RCC_Delay+0x34>)
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	4a0a      	ldr	r2, [pc, #40]	; (80040d0 <RCC_Delay+0x38>)
 80040a6:	fba2 2303 	umull	r2, r3, r2, r3
 80040aa:	0a5b      	lsrs	r3, r3, #9
 80040ac:	687a      	ldr	r2, [r7, #4]
 80040ae:	fb02 f303 	mul.w	r3, r2, r3
 80040b2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80040b4:	bf00      	nop
  }
  while (Delay --);
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	1e5a      	subs	r2, r3, #1
 80040ba:	60fa      	str	r2, [r7, #12]
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d1f9      	bne.n	80040b4 <RCC_Delay+0x1c>
}
 80040c0:	bf00      	nop
 80040c2:	bf00      	nop
 80040c4:	3714      	adds	r7, #20
 80040c6:	46bd      	mov	sp, r7
 80040c8:	bc80      	pop	{r7}
 80040ca:	4770      	bx	lr
 80040cc:	2000000c 	.word	0x2000000c
 80040d0:	10624dd3 	.word	0x10624dd3

080040d4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80040d4:	b580      	push	{r7, lr}
 80040d6:	b082      	sub	sp, #8
 80040d8:	af00      	add	r7, sp, #0
 80040da:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d101      	bne.n	80040e6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80040e2:	2301      	movs	r3, #1
 80040e4:	e041      	b.n	800416a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80040ec:	b2db      	uxtb	r3, r3
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d106      	bne.n	8004100 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	2200      	movs	r2, #0
 80040f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80040fa:	6878      	ldr	r0, [r7, #4]
 80040fc:	f7fd ff82 	bl	8002004 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	2202      	movs	r2, #2
 8004104:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681a      	ldr	r2, [r3, #0]
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	3304      	adds	r3, #4
 8004110:	4619      	mov	r1, r3
 8004112:	4610      	mov	r0, r2
 8004114:	f000 fabc 	bl	8004690 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	2201      	movs	r2, #1
 800411c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	2201      	movs	r2, #1
 8004124:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	2201      	movs	r2, #1
 800412c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	2201      	movs	r2, #1
 8004134:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	2201      	movs	r2, #1
 800413c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	2201      	movs	r2, #1
 8004144:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	2201      	movs	r2, #1
 800414c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	2201      	movs	r2, #1
 8004154:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	2201      	movs	r2, #1
 800415c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	2201      	movs	r2, #1
 8004164:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004168:	2300      	movs	r3, #0
}
 800416a:	4618      	mov	r0, r3
 800416c:	3708      	adds	r7, #8
 800416e:	46bd      	mov	sp, r7
 8004170:	bd80      	pop	{r7, pc}
	...

08004174 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004174:	b480      	push	{r7}
 8004176:	b085      	sub	sp, #20
 8004178:	af00      	add	r7, sp, #0
 800417a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004182:	b2db      	uxtb	r3, r3
 8004184:	2b01      	cmp	r3, #1
 8004186:	d001      	beq.n	800418c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004188:	2301      	movs	r3, #1
 800418a:	e03a      	b.n	8004202 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	2202      	movs	r2, #2
 8004190:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	68da      	ldr	r2, [r3, #12]
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	f042 0201 	orr.w	r2, r2, #1
 80041a2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	4a18      	ldr	r2, [pc, #96]	; (800420c <HAL_TIM_Base_Start_IT+0x98>)
 80041aa:	4293      	cmp	r3, r2
 80041ac:	d00e      	beq.n	80041cc <HAL_TIM_Base_Start_IT+0x58>
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80041b6:	d009      	beq.n	80041cc <HAL_TIM_Base_Start_IT+0x58>
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	4a14      	ldr	r2, [pc, #80]	; (8004210 <HAL_TIM_Base_Start_IT+0x9c>)
 80041be:	4293      	cmp	r3, r2
 80041c0:	d004      	beq.n	80041cc <HAL_TIM_Base_Start_IT+0x58>
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	4a13      	ldr	r2, [pc, #76]	; (8004214 <HAL_TIM_Base_Start_IT+0xa0>)
 80041c8:	4293      	cmp	r3, r2
 80041ca:	d111      	bne.n	80041f0 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	689b      	ldr	r3, [r3, #8]
 80041d2:	f003 0307 	and.w	r3, r3, #7
 80041d6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	2b06      	cmp	r3, #6
 80041dc:	d010      	beq.n	8004200 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	681a      	ldr	r2, [r3, #0]
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	f042 0201 	orr.w	r2, r2, #1
 80041ec:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80041ee:	e007      	b.n	8004200 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	681a      	ldr	r2, [r3, #0]
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	f042 0201 	orr.w	r2, r2, #1
 80041fe:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004200:	2300      	movs	r3, #0
}
 8004202:	4618      	mov	r0, r3
 8004204:	3714      	adds	r7, #20
 8004206:	46bd      	mov	sp, r7
 8004208:	bc80      	pop	{r7}
 800420a:	4770      	bx	lr
 800420c:	40012c00 	.word	0x40012c00
 8004210:	40000400 	.word	0x40000400
 8004214:	40000800 	.word	0x40000800

08004218 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004218:	b580      	push	{r7, lr}
 800421a:	b082      	sub	sp, #8
 800421c:	af00      	add	r7, sp, #0
 800421e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	691b      	ldr	r3, [r3, #16]
 8004226:	f003 0302 	and.w	r3, r3, #2
 800422a:	2b02      	cmp	r3, #2
 800422c:	d122      	bne.n	8004274 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	68db      	ldr	r3, [r3, #12]
 8004234:	f003 0302 	and.w	r3, r3, #2
 8004238:	2b02      	cmp	r3, #2
 800423a:	d11b      	bne.n	8004274 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	f06f 0202 	mvn.w	r2, #2
 8004244:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	2201      	movs	r2, #1
 800424a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	699b      	ldr	r3, [r3, #24]
 8004252:	f003 0303 	and.w	r3, r3, #3
 8004256:	2b00      	cmp	r3, #0
 8004258:	d003      	beq.n	8004262 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800425a:	6878      	ldr	r0, [r7, #4]
 800425c:	f000 f9fc 	bl	8004658 <HAL_TIM_IC_CaptureCallback>
 8004260:	e005      	b.n	800426e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004262:	6878      	ldr	r0, [r7, #4]
 8004264:	f000 f9ef 	bl	8004646 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004268:	6878      	ldr	r0, [r7, #4]
 800426a:	f000 f9fe 	bl	800466a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	2200      	movs	r2, #0
 8004272:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	691b      	ldr	r3, [r3, #16]
 800427a:	f003 0304 	and.w	r3, r3, #4
 800427e:	2b04      	cmp	r3, #4
 8004280:	d122      	bne.n	80042c8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	68db      	ldr	r3, [r3, #12]
 8004288:	f003 0304 	and.w	r3, r3, #4
 800428c:	2b04      	cmp	r3, #4
 800428e:	d11b      	bne.n	80042c8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	f06f 0204 	mvn.w	r2, #4
 8004298:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	2202      	movs	r2, #2
 800429e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	699b      	ldr	r3, [r3, #24]
 80042a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d003      	beq.n	80042b6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80042ae:	6878      	ldr	r0, [r7, #4]
 80042b0:	f000 f9d2 	bl	8004658 <HAL_TIM_IC_CaptureCallback>
 80042b4:	e005      	b.n	80042c2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80042b6:	6878      	ldr	r0, [r7, #4]
 80042b8:	f000 f9c5 	bl	8004646 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80042bc:	6878      	ldr	r0, [r7, #4]
 80042be:	f000 f9d4 	bl	800466a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	2200      	movs	r2, #0
 80042c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	691b      	ldr	r3, [r3, #16]
 80042ce:	f003 0308 	and.w	r3, r3, #8
 80042d2:	2b08      	cmp	r3, #8
 80042d4:	d122      	bne.n	800431c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	68db      	ldr	r3, [r3, #12]
 80042dc:	f003 0308 	and.w	r3, r3, #8
 80042e0:	2b08      	cmp	r3, #8
 80042e2:	d11b      	bne.n	800431c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	f06f 0208 	mvn.w	r2, #8
 80042ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	2204      	movs	r2, #4
 80042f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	69db      	ldr	r3, [r3, #28]
 80042fa:	f003 0303 	and.w	r3, r3, #3
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d003      	beq.n	800430a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004302:	6878      	ldr	r0, [r7, #4]
 8004304:	f000 f9a8 	bl	8004658 <HAL_TIM_IC_CaptureCallback>
 8004308:	e005      	b.n	8004316 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800430a:	6878      	ldr	r0, [r7, #4]
 800430c:	f000 f99b 	bl	8004646 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004310:	6878      	ldr	r0, [r7, #4]
 8004312:	f000 f9aa 	bl	800466a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	2200      	movs	r2, #0
 800431a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	691b      	ldr	r3, [r3, #16]
 8004322:	f003 0310 	and.w	r3, r3, #16
 8004326:	2b10      	cmp	r3, #16
 8004328:	d122      	bne.n	8004370 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	68db      	ldr	r3, [r3, #12]
 8004330:	f003 0310 	and.w	r3, r3, #16
 8004334:	2b10      	cmp	r3, #16
 8004336:	d11b      	bne.n	8004370 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	f06f 0210 	mvn.w	r2, #16
 8004340:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	2208      	movs	r2, #8
 8004346:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	69db      	ldr	r3, [r3, #28]
 800434e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004352:	2b00      	cmp	r3, #0
 8004354:	d003      	beq.n	800435e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004356:	6878      	ldr	r0, [r7, #4]
 8004358:	f000 f97e 	bl	8004658 <HAL_TIM_IC_CaptureCallback>
 800435c:	e005      	b.n	800436a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800435e:	6878      	ldr	r0, [r7, #4]
 8004360:	f000 f971 	bl	8004646 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004364:	6878      	ldr	r0, [r7, #4]
 8004366:	f000 f980 	bl	800466a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	2200      	movs	r2, #0
 800436e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	691b      	ldr	r3, [r3, #16]
 8004376:	f003 0301 	and.w	r3, r3, #1
 800437a:	2b01      	cmp	r3, #1
 800437c:	d10e      	bne.n	800439c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	68db      	ldr	r3, [r3, #12]
 8004384:	f003 0301 	and.w	r3, r3, #1
 8004388:	2b01      	cmp	r3, #1
 800438a:	d107      	bne.n	800439c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	f06f 0201 	mvn.w	r2, #1
 8004394:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004396:	6878      	ldr	r0, [r7, #4]
 8004398:	f000 f94c 	bl	8004634 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	691b      	ldr	r3, [r3, #16]
 80043a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043a6:	2b80      	cmp	r3, #128	; 0x80
 80043a8:	d10e      	bne.n	80043c8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	68db      	ldr	r3, [r3, #12]
 80043b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043b4:	2b80      	cmp	r3, #128	; 0x80
 80043b6:	d107      	bne.n	80043c8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80043c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80043c2:	6878      	ldr	r0, [r7, #4]
 80043c4:	f000 fb51 	bl	8004a6a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	691b      	ldr	r3, [r3, #16]
 80043ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043d2:	2b40      	cmp	r3, #64	; 0x40
 80043d4:	d10e      	bne.n	80043f4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	68db      	ldr	r3, [r3, #12]
 80043dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043e0:	2b40      	cmp	r3, #64	; 0x40
 80043e2:	d107      	bne.n	80043f4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80043ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80043ee:	6878      	ldr	r0, [r7, #4]
 80043f0:	f000 f944 	bl	800467c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	691b      	ldr	r3, [r3, #16]
 80043fa:	f003 0320 	and.w	r3, r3, #32
 80043fe:	2b20      	cmp	r3, #32
 8004400:	d10e      	bne.n	8004420 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	68db      	ldr	r3, [r3, #12]
 8004408:	f003 0320 	and.w	r3, r3, #32
 800440c:	2b20      	cmp	r3, #32
 800440e:	d107      	bne.n	8004420 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	f06f 0220 	mvn.w	r2, #32
 8004418:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800441a:	6878      	ldr	r0, [r7, #4]
 800441c:	f000 fb1c 	bl	8004a58 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004420:	bf00      	nop
 8004422:	3708      	adds	r7, #8
 8004424:	46bd      	mov	sp, r7
 8004426:	bd80      	pop	{r7, pc}

08004428 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004428:	b580      	push	{r7, lr}
 800442a:	b084      	sub	sp, #16
 800442c:	af00      	add	r7, sp, #0
 800442e:	6078      	str	r0, [r7, #4]
 8004430:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004438:	2b01      	cmp	r3, #1
 800443a:	d101      	bne.n	8004440 <HAL_TIM_ConfigClockSource+0x18>
 800443c:	2302      	movs	r3, #2
 800443e:	e0b3      	b.n	80045a8 <HAL_TIM_ConfigClockSource+0x180>
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	2201      	movs	r2, #1
 8004444:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	2202      	movs	r2, #2
 800444c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	689b      	ldr	r3, [r3, #8]
 8004456:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800445e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004466:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	68fa      	ldr	r2, [r7, #12]
 800446e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004470:	683b      	ldr	r3, [r7, #0]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004478:	d03e      	beq.n	80044f8 <HAL_TIM_ConfigClockSource+0xd0>
 800447a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800447e:	f200 8087 	bhi.w	8004590 <HAL_TIM_ConfigClockSource+0x168>
 8004482:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004486:	f000 8085 	beq.w	8004594 <HAL_TIM_ConfigClockSource+0x16c>
 800448a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800448e:	d87f      	bhi.n	8004590 <HAL_TIM_ConfigClockSource+0x168>
 8004490:	2b70      	cmp	r3, #112	; 0x70
 8004492:	d01a      	beq.n	80044ca <HAL_TIM_ConfigClockSource+0xa2>
 8004494:	2b70      	cmp	r3, #112	; 0x70
 8004496:	d87b      	bhi.n	8004590 <HAL_TIM_ConfigClockSource+0x168>
 8004498:	2b60      	cmp	r3, #96	; 0x60
 800449a:	d050      	beq.n	800453e <HAL_TIM_ConfigClockSource+0x116>
 800449c:	2b60      	cmp	r3, #96	; 0x60
 800449e:	d877      	bhi.n	8004590 <HAL_TIM_ConfigClockSource+0x168>
 80044a0:	2b50      	cmp	r3, #80	; 0x50
 80044a2:	d03c      	beq.n	800451e <HAL_TIM_ConfigClockSource+0xf6>
 80044a4:	2b50      	cmp	r3, #80	; 0x50
 80044a6:	d873      	bhi.n	8004590 <HAL_TIM_ConfigClockSource+0x168>
 80044a8:	2b40      	cmp	r3, #64	; 0x40
 80044aa:	d058      	beq.n	800455e <HAL_TIM_ConfigClockSource+0x136>
 80044ac:	2b40      	cmp	r3, #64	; 0x40
 80044ae:	d86f      	bhi.n	8004590 <HAL_TIM_ConfigClockSource+0x168>
 80044b0:	2b30      	cmp	r3, #48	; 0x30
 80044b2:	d064      	beq.n	800457e <HAL_TIM_ConfigClockSource+0x156>
 80044b4:	2b30      	cmp	r3, #48	; 0x30
 80044b6:	d86b      	bhi.n	8004590 <HAL_TIM_ConfigClockSource+0x168>
 80044b8:	2b20      	cmp	r3, #32
 80044ba:	d060      	beq.n	800457e <HAL_TIM_ConfigClockSource+0x156>
 80044bc:	2b20      	cmp	r3, #32
 80044be:	d867      	bhi.n	8004590 <HAL_TIM_ConfigClockSource+0x168>
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d05c      	beq.n	800457e <HAL_TIM_ConfigClockSource+0x156>
 80044c4:	2b10      	cmp	r3, #16
 80044c6:	d05a      	beq.n	800457e <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80044c8:	e062      	b.n	8004590 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	6818      	ldr	r0, [r3, #0]
 80044ce:	683b      	ldr	r3, [r7, #0]
 80044d0:	6899      	ldr	r1, [r3, #8]
 80044d2:	683b      	ldr	r3, [r7, #0]
 80044d4:	685a      	ldr	r2, [r3, #4]
 80044d6:	683b      	ldr	r3, [r7, #0]
 80044d8:	68db      	ldr	r3, [r3, #12]
 80044da:	f000 fa40 	bl	800495e <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	689b      	ldr	r3, [r3, #8]
 80044e4:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80044ec:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	68fa      	ldr	r2, [r7, #12]
 80044f4:	609a      	str	r2, [r3, #8]
      break;
 80044f6:	e04e      	b.n	8004596 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	6818      	ldr	r0, [r3, #0]
 80044fc:	683b      	ldr	r3, [r7, #0]
 80044fe:	6899      	ldr	r1, [r3, #8]
 8004500:	683b      	ldr	r3, [r7, #0]
 8004502:	685a      	ldr	r2, [r3, #4]
 8004504:	683b      	ldr	r3, [r7, #0]
 8004506:	68db      	ldr	r3, [r3, #12]
 8004508:	f000 fa29 	bl	800495e <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	689a      	ldr	r2, [r3, #8]
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800451a:	609a      	str	r2, [r3, #8]
      break;
 800451c:	e03b      	b.n	8004596 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	6818      	ldr	r0, [r3, #0]
 8004522:	683b      	ldr	r3, [r7, #0]
 8004524:	6859      	ldr	r1, [r3, #4]
 8004526:	683b      	ldr	r3, [r7, #0]
 8004528:	68db      	ldr	r3, [r3, #12]
 800452a:	461a      	mov	r2, r3
 800452c:	f000 f9a0 	bl	8004870 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	2150      	movs	r1, #80	; 0x50
 8004536:	4618      	mov	r0, r3
 8004538:	f000 f9f7 	bl	800492a <TIM_ITRx_SetConfig>
      break;
 800453c:	e02b      	b.n	8004596 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	6818      	ldr	r0, [r3, #0]
 8004542:	683b      	ldr	r3, [r7, #0]
 8004544:	6859      	ldr	r1, [r3, #4]
 8004546:	683b      	ldr	r3, [r7, #0]
 8004548:	68db      	ldr	r3, [r3, #12]
 800454a:	461a      	mov	r2, r3
 800454c:	f000 f9be 	bl	80048cc <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	2160      	movs	r1, #96	; 0x60
 8004556:	4618      	mov	r0, r3
 8004558:	f000 f9e7 	bl	800492a <TIM_ITRx_SetConfig>
      break;
 800455c:	e01b      	b.n	8004596 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	6818      	ldr	r0, [r3, #0]
 8004562:	683b      	ldr	r3, [r7, #0]
 8004564:	6859      	ldr	r1, [r3, #4]
 8004566:	683b      	ldr	r3, [r7, #0]
 8004568:	68db      	ldr	r3, [r3, #12]
 800456a:	461a      	mov	r2, r3
 800456c:	f000 f980 	bl	8004870 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	2140      	movs	r1, #64	; 0x40
 8004576:	4618      	mov	r0, r3
 8004578:	f000 f9d7 	bl	800492a <TIM_ITRx_SetConfig>
      break;
 800457c:	e00b      	b.n	8004596 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681a      	ldr	r2, [r3, #0]
 8004582:	683b      	ldr	r3, [r7, #0]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	4619      	mov	r1, r3
 8004588:	4610      	mov	r0, r2
 800458a:	f000 f9ce 	bl	800492a <TIM_ITRx_SetConfig>
        break;
 800458e:	e002      	b.n	8004596 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8004590:	bf00      	nop
 8004592:	e000      	b.n	8004596 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8004594:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	2201      	movs	r2, #1
 800459a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	2200      	movs	r2, #0
 80045a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80045a6:	2300      	movs	r3, #0
}
 80045a8:	4618      	mov	r0, r3
 80045aa:	3710      	adds	r7, #16
 80045ac:	46bd      	mov	sp, r7
 80045ae:	bd80      	pop	{r7, pc}

080045b0 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80045b0:	b580      	push	{r7, lr}
 80045b2:	b082      	sub	sp, #8
 80045b4:	af00      	add	r7, sp, #0
 80045b6:	6078      	str	r0, [r7, #4]
 80045b8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80045c0:	2b01      	cmp	r3, #1
 80045c2:	d101      	bne.n	80045c8 <HAL_TIM_SlaveConfigSynchro+0x18>
 80045c4:	2302      	movs	r3, #2
 80045c6:	e031      	b.n	800462c <HAL_TIM_SlaveConfigSynchro+0x7c>
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	2201      	movs	r2, #1
 80045cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	2202      	movs	r2, #2
 80045d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 80045d8:	6839      	ldr	r1, [r7, #0]
 80045da:	6878      	ldr	r0, [r7, #4]
 80045dc:	f000 f8ba 	bl	8004754 <TIM_SlaveTimer_SetConfig>
 80045e0:	4603      	mov	r3, r0
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d009      	beq.n	80045fa <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	2201      	movs	r2, #1
 80045ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	2200      	movs	r2, #0
 80045f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 80045f6:	2301      	movs	r3, #1
 80045f8:	e018      	b.n	800462c <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	68da      	ldr	r2, [r3, #12]
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004608:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	68da      	ldr	r2, [r3, #12]
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004618:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	2201      	movs	r2, #1
 800461e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	2200      	movs	r2, #0
 8004626:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800462a:	2300      	movs	r3, #0
}
 800462c:	4618      	mov	r0, r3
 800462e:	3708      	adds	r7, #8
 8004630:	46bd      	mov	sp, r7
 8004632:	bd80      	pop	{r7, pc}

08004634 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004634:	b480      	push	{r7}
 8004636:	b083      	sub	sp, #12
 8004638:	af00      	add	r7, sp, #0
 800463a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800463c:	bf00      	nop
 800463e:	370c      	adds	r7, #12
 8004640:	46bd      	mov	sp, r7
 8004642:	bc80      	pop	{r7}
 8004644:	4770      	bx	lr

08004646 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004646:	b480      	push	{r7}
 8004648:	b083      	sub	sp, #12
 800464a:	af00      	add	r7, sp, #0
 800464c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800464e:	bf00      	nop
 8004650:	370c      	adds	r7, #12
 8004652:	46bd      	mov	sp, r7
 8004654:	bc80      	pop	{r7}
 8004656:	4770      	bx	lr

08004658 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004658:	b480      	push	{r7}
 800465a:	b083      	sub	sp, #12
 800465c:	af00      	add	r7, sp, #0
 800465e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004660:	bf00      	nop
 8004662:	370c      	adds	r7, #12
 8004664:	46bd      	mov	sp, r7
 8004666:	bc80      	pop	{r7}
 8004668:	4770      	bx	lr

0800466a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800466a:	b480      	push	{r7}
 800466c:	b083      	sub	sp, #12
 800466e:	af00      	add	r7, sp, #0
 8004670:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004672:	bf00      	nop
 8004674:	370c      	adds	r7, #12
 8004676:	46bd      	mov	sp, r7
 8004678:	bc80      	pop	{r7}
 800467a:	4770      	bx	lr

0800467c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800467c:	b480      	push	{r7}
 800467e:	b083      	sub	sp, #12
 8004680:	af00      	add	r7, sp, #0
 8004682:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004684:	bf00      	nop
 8004686:	370c      	adds	r7, #12
 8004688:	46bd      	mov	sp, r7
 800468a:	bc80      	pop	{r7}
 800468c:	4770      	bx	lr
	...

08004690 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004690:	b480      	push	{r7}
 8004692:	b085      	sub	sp, #20
 8004694:	af00      	add	r7, sp, #0
 8004696:	6078      	str	r0, [r7, #4]
 8004698:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	4a29      	ldr	r2, [pc, #164]	; (8004748 <TIM_Base_SetConfig+0xb8>)
 80046a4:	4293      	cmp	r3, r2
 80046a6:	d00b      	beq.n	80046c0 <TIM_Base_SetConfig+0x30>
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80046ae:	d007      	beq.n	80046c0 <TIM_Base_SetConfig+0x30>
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	4a26      	ldr	r2, [pc, #152]	; (800474c <TIM_Base_SetConfig+0xbc>)
 80046b4:	4293      	cmp	r3, r2
 80046b6:	d003      	beq.n	80046c0 <TIM_Base_SetConfig+0x30>
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	4a25      	ldr	r2, [pc, #148]	; (8004750 <TIM_Base_SetConfig+0xc0>)
 80046bc:	4293      	cmp	r3, r2
 80046be:	d108      	bne.n	80046d2 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046c6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80046c8:	683b      	ldr	r3, [r7, #0]
 80046ca:	685b      	ldr	r3, [r3, #4]
 80046cc:	68fa      	ldr	r2, [r7, #12]
 80046ce:	4313      	orrs	r3, r2
 80046d0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	4a1c      	ldr	r2, [pc, #112]	; (8004748 <TIM_Base_SetConfig+0xb8>)
 80046d6:	4293      	cmp	r3, r2
 80046d8:	d00b      	beq.n	80046f2 <TIM_Base_SetConfig+0x62>
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80046e0:	d007      	beq.n	80046f2 <TIM_Base_SetConfig+0x62>
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	4a19      	ldr	r2, [pc, #100]	; (800474c <TIM_Base_SetConfig+0xbc>)
 80046e6:	4293      	cmp	r3, r2
 80046e8:	d003      	beq.n	80046f2 <TIM_Base_SetConfig+0x62>
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	4a18      	ldr	r2, [pc, #96]	; (8004750 <TIM_Base_SetConfig+0xc0>)
 80046ee:	4293      	cmp	r3, r2
 80046f0:	d108      	bne.n	8004704 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80046f8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80046fa:	683b      	ldr	r3, [r7, #0]
 80046fc:	68db      	ldr	r3, [r3, #12]
 80046fe:	68fa      	ldr	r2, [r7, #12]
 8004700:	4313      	orrs	r3, r2
 8004702:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800470a:	683b      	ldr	r3, [r7, #0]
 800470c:	695b      	ldr	r3, [r3, #20]
 800470e:	4313      	orrs	r3, r2
 8004710:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	68fa      	ldr	r2, [r7, #12]
 8004716:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004718:	683b      	ldr	r3, [r7, #0]
 800471a:	689a      	ldr	r2, [r3, #8]
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004720:	683b      	ldr	r3, [r7, #0]
 8004722:	681a      	ldr	r2, [r3, #0]
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	4a07      	ldr	r2, [pc, #28]	; (8004748 <TIM_Base_SetConfig+0xb8>)
 800472c:	4293      	cmp	r3, r2
 800472e:	d103      	bne.n	8004738 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004730:	683b      	ldr	r3, [r7, #0]
 8004732:	691a      	ldr	r2, [r3, #16]
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	2201      	movs	r2, #1
 800473c:	615a      	str	r2, [r3, #20]
}
 800473e:	bf00      	nop
 8004740:	3714      	adds	r7, #20
 8004742:	46bd      	mov	sp, r7
 8004744:	bc80      	pop	{r7}
 8004746:	4770      	bx	lr
 8004748:	40012c00 	.word	0x40012c00
 800474c:	40000400 	.word	0x40000400
 8004750:	40000800 	.word	0x40000800

08004754 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8004754:	b580      	push	{r7, lr}
 8004756:	b086      	sub	sp, #24
 8004758:	af00      	add	r7, sp, #0
 800475a:	6078      	str	r0, [r7, #4]
 800475c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	689b      	ldr	r3, [r3, #8]
 8004764:	617b      	str	r3, [r7, #20]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004766:	697b      	ldr	r3, [r7, #20]
 8004768:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800476c:	617b      	str	r3, [r7, #20]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 800476e:	683b      	ldr	r3, [r7, #0]
 8004770:	685b      	ldr	r3, [r3, #4]
 8004772:	697a      	ldr	r2, [r7, #20]
 8004774:	4313      	orrs	r3, r2
 8004776:	617b      	str	r3, [r7, #20]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8004778:	697b      	ldr	r3, [r7, #20]
 800477a:	f023 0307 	bic.w	r3, r3, #7
 800477e:	617b      	str	r3, [r7, #20]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8004780:	683b      	ldr	r3, [r7, #0]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	697a      	ldr	r2, [r7, #20]
 8004786:	4313      	orrs	r3, r2
 8004788:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	697a      	ldr	r2, [r7, #20]
 8004790:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8004792:	683b      	ldr	r3, [r7, #0]
 8004794:	685b      	ldr	r3, [r3, #4]
 8004796:	2b70      	cmp	r3, #112	; 0x70
 8004798:	d01a      	beq.n	80047d0 <TIM_SlaveTimer_SetConfig+0x7c>
 800479a:	2b70      	cmp	r3, #112	; 0x70
 800479c:	d860      	bhi.n	8004860 <TIM_SlaveTimer_SetConfig+0x10c>
 800479e:	2b60      	cmp	r3, #96	; 0x60
 80047a0:	d054      	beq.n	800484c <TIM_SlaveTimer_SetConfig+0xf8>
 80047a2:	2b60      	cmp	r3, #96	; 0x60
 80047a4:	d85c      	bhi.n	8004860 <TIM_SlaveTimer_SetConfig+0x10c>
 80047a6:	2b50      	cmp	r3, #80	; 0x50
 80047a8:	d046      	beq.n	8004838 <TIM_SlaveTimer_SetConfig+0xe4>
 80047aa:	2b50      	cmp	r3, #80	; 0x50
 80047ac:	d858      	bhi.n	8004860 <TIM_SlaveTimer_SetConfig+0x10c>
 80047ae:	2b40      	cmp	r3, #64	; 0x40
 80047b0:	d019      	beq.n	80047e6 <TIM_SlaveTimer_SetConfig+0x92>
 80047b2:	2b40      	cmp	r3, #64	; 0x40
 80047b4:	d854      	bhi.n	8004860 <TIM_SlaveTimer_SetConfig+0x10c>
 80047b6:	2b30      	cmp	r3, #48	; 0x30
 80047b8:	d054      	beq.n	8004864 <TIM_SlaveTimer_SetConfig+0x110>
 80047ba:	2b30      	cmp	r3, #48	; 0x30
 80047bc:	d850      	bhi.n	8004860 <TIM_SlaveTimer_SetConfig+0x10c>
 80047be:	2b20      	cmp	r3, #32
 80047c0:	d050      	beq.n	8004864 <TIM_SlaveTimer_SetConfig+0x110>
 80047c2:	2b20      	cmp	r3, #32
 80047c4:	d84c      	bhi.n	8004860 <TIM_SlaveTimer_SetConfig+0x10c>
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d04c      	beq.n	8004864 <TIM_SlaveTimer_SetConfig+0x110>
 80047ca:	2b10      	cmp	r3, #16
 80047cc:	d04a      	beq.n	8004864 <TIM_SlaveTimer_SetConfig+0x110>
        assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
        break;
      }

    default:
      break;
 80047ce:	e047      	b.n	8004860 <TIM_SlaveTimer_SetConfig+0x10c>
      TIM_ETR_SetConfig(htim->Instance,
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	6818      	ldr	r0, [r3, #0]
 80047d4:	683b      	ldr	r3, [r7, #0]
 80047d6:	68d9      	ldr	r1, [r3, #12]
 80047d8:	683b      	ldr	r3, [r7, #0]
 80047da:	689a      	ldr	r2, [r3, #8]
 80047dc:	683b      	ldr	r3, [r7, #0]
 80047de:	691b      	ldr	r3, [r3, #16]
 80047e0:	f000 f8bd 	bl	800495e <TIM_ETR_SetConfig>
      break;
 80047e4:	e03f      	b.n	8004866 <TIM_SlaveTimer_SetConfig+0x112>
      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 80047e6:	683b      	ldr	r3, [r7, #0]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	2b05      	cmp	r3, #5
 80047ec:	d101      	bne.n	80047f2 <TIM_SlaveTimer_SetConfig+0x9e>
        return HAL_ERROR;
 80047ee:	2301      	movs	r3, #1
 80047f0:	e03a      	b.n	8004868 <TIM_SlaveTimer_SetConfig+0x114>
      tmpccer = htim->Instance->CCER;
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	6a1b      	ldr	r3, [r3, #32]
 80047f8:	613b      	str	r3, [r7, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	6a1a      	ldr	r2, [r3, #32]
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	f022 0201 	bic.w	r2, r2, #1
 8004808:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	699b      	ldr	r3, [r3, #24]
 8004810:	60fb      	str	r3, [r7, #12]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004818:	60fb      	str	r3, [r7, #12]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 800481a:	683b      	ldr	r3, [r7, #0]
 800481c:	691b      	ldr	r3, [r3, #16]
 800481e:	011b      	lsls	r3, r3, #4
 8004820:	68fa      	ldr	r2, [r7, #12]
 8004822:	4313      	orrs	r3, r2
 8004824:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCMR1 = tmpccmr1;
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	68fa      	ldr	r2, [r7, #12]
 800482c:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	693a      	ldr	r2, [r7, #16]
 8004834:	621a      	str	r2, [r3, #32]
      break;
 8004836:	e016      	b.n	8004866 <TIM_SlaveTimer_SetConfig+0x112>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	6818      	ldr	r0, [r3, #0]
 800483c:	683b      	ldr	r3, [r7, #0]
 800483e:	6899      	ldr	r1, [r3, #8]
 8004840:	683b      	ldr	r3, [r7, #0]
 8004842:	691b      	ldr	r3, [r3, #16]
 8004844:	461a      	mov	r2, r3
 8004846:	f000 f813 	bl	8004870 <TIM_TI1_ConfigInputStage>
      break;
 800484a:	e00c      	b.n	8004866 <TIM_SlaveTimer_SetConfig+0x112>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	6818      	ldr	r0, [r3, #0]
 8004850:	683b      	ldr	r3, [r7, #0]
 8004852:	6899      	ldr	r1, [r3, #8]
 8004854:	683b      	ldr	r3, [r7, #0]
 8004856:	691b      	ldr	r3, [r3, #16]
 8004858:	461a      	mov	r2, r3
 800485a:	f000 f837 	bl	80048cc <TIM_TI2_ConfigInputStage>
      break;
 800485e:	e002      	b.n	8004866 <TIM_SlaveTimer_SetConfig+0x112>
      break;
 8004860:	bf00      	nop
 8004862:	e000      	b.n	8004866 <TIM_SlaveTimer_SetConfig+0x112>
        break;
 8004864:	bf00      	nop
  }
  return HAL_OK;
 8004866:	2300      	movs	r3, #0
}
 8004868:	4618      	mov	r0, r3
 800486a:	3718      	adds	r7, #24
 800486c:	46bd      	mov	sp, r7
 800486e:	bd80      	pop	{r7, pc}

08004870 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004870:	b480      	push	{r7}
 8004872:	b087      	sub	sp, #28
 8004874:	af00      	add	r7, sp, #0
 8004876:	60f8      	str	r0, [r7, #12]
 8004878:	60b9      	str	r1, [r7, #8]
 800487a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	6a1b      	ldr	r3, [r3, #32]
 8004880:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	6a1b      	ldr	r3, [r3, #32]
 8004886:	f023 0201 	bic.w	r2, r3, #1
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	699b      	ldr	r3, [r3, #24]
 8004892:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004894:	693b      	ldr	r3, [r7, #16]
 8004896:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800489a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	011b      	lsls	r3, r3, #4
 80048a0:	693a      	ldr	r2, [r7, #16]
 80048a2:	4313      	orrs	r3, r2
 80048a4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80048a6:	697b      	ldr	r3, [r7, #20]
 80048a8:	f023 030a 	bic.w	r3, r3, #10
 80048ac:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80048ae:	697a      	ldr	r2, [r7, #20]
 80048b0:	68bb      	ldr	r3, [r7, #8]
 80048b2:	4313      	orrs	r3, r2
 80048b4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	693a      	ldr	r2, [r7, #16]
 80048ba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	697a      	ldr	r2, [r7, #20]
 80048c0:	621a      	str	r2, [r3, #32]
}
 80048c2:	bf00      	nop
 80048c4:	371c      	adds	r7, #28
 80048c6:	46bd      	mov	sp, r7
 80048c8:	bc80      	pop	{r7}
 80048ca:	4770      	bx	lr

080048cc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80048cc:	b480      	push	{r7}
 80048ce:	b087      	sub	sp, #28
 80048d0:	af00      	add	r7, sp, #0
 80048d2:	60f8      	str	r0, [r7, #12]
 80048d4:	60b9      	str	r1, [r7, #8]
 80048d6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	6a1b      	ldr	r3, [r3, #32]
 80048dc:	f023 0210 	bic.w	r2, r3, #16
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	699b      	ldr	r3, [r3, #24]
 80048e8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	6a1b      	ldr	r3, [r3, #32]
 80048ee:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80048f0:	697b      	ldr	r3, [r7, #20]
 80048f2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80048f6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	031b      	lsls	r3, r3, #12
 80048fc:	697a      	ldr	r2, [r7, #20]
 80048fe:	4313      	orrs	r3, r2
 8004900:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004902:	693b      	ldr	r3, [r7, #16]
 8004904:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004908:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800490a:	68bb      	ldr	r3, [r7, #8]
 800490c:	011b      	lsls	r3, r3, #4
 800490e:	693a      	ldr	r2, [r7, #16]
 8004910:	4313      	orrs	r3, r2
 8004912:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	697a      	ldr	r2, [r7, #20]
 8004918:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	693a      	ldr	r2, [r7, #16]
 800491e:	621a      	str	r2, [r3, #32]
}
 8004920:	bf00      	nop
 8004922:	371c      	adds	r7, #28
 8004924:	46bd      	mov	sp, r7
 8004926:	bc80      	pop	{r7}
 8004928:	4770      	bx	lr

0800492a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800492a:	b480      	push	{r7}
 800492c:	b085      	sub	sp, #20
 800492e:	af00      	add	r7, sp, #0
 8004930:	6078      	str	r0, [r7, #4]
 8004932:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	689b      	ldr	r3, [r3, #8]
 8004938:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004940:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004942:	683a      	ldr	r2, [r7, #0]
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	4313      	orrs	r3, r2
 8004948:	f043 0307 	orr.w	r3, r3, #7
 800494c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	68fa      	ldr	r2, [r7, #12]
 8004952:	609a      	str	r2, [r3, #8]
}
 8004954:	bf00      	nop
 8004956:	3714      	adds	r7, #20
 8004958:	46bd      	mov	sp, r7
 800495a:	bc80      	pop	{r7}
 800495c:	4770      	bx	lr

0800495e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800495e:	b480      	push	{r7}
 8004960:	b087      	sub	sp, #28
 8004962:	af00      	add	r7, sp, #0
 8004964:	60f8      	str	r0, [r7, #12]
 8004966:	60b9      	str	r1, [r7, #8]
 8004968:	607a      	str	r2, [r7, #4]
 800496a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	689b      	ldr	r3, [r3, #8]
 8004970:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004972:	697b      	ldr	r3, [r7, #20]
 8004974:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004978:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800497a:	683b      	ldr	r3, [r7, #0]
 800497c:	021a      	lsls	r2, r3, #8
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	431a      	orrs	r2, r3
 8004982:	68bb      	ldr	r3, [r7, #8]
 8004984:	4313      	orrs	r3, r2
 8004986:	697a      	ldr	r2, [r7, #20]
 8004988:	4313      	orrs	r3, r2
 800498a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	697a      	ldr	r2, [r7, #20]
 8004990:	609a      	str	r2, [r3, #8]
}
 8004992:	bf00      	nop
 8004994:	371c      	adds	r7, #28
 8004996:	46bd      	mov	sp, r7
 8004998:	bc80      	pop	{r7}
 800499a:	4770      	bx	lr

0800499c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800499c:	b480      	push	{r7}
 800499e:	b085      	sub	sp, #20
 80049a0:	af00      	add	r7, sp, #0
 80049a2:	6078      	str	r0, [r7, #4]
 80049a4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80049ac:	2b01      	cmp	r3, #1
 80049ae:	d101      	bne.n	80049b4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80049b0:	2302      	movs	r3, #2
 80049b2:	e046      	b.n	8004a42 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	2201      	movs	r2, #1
 80049b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	2202      	movs	r2, #2
 80049c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	685b      	ldr	r3, [r3, #4]
 80049ca:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	689b      	ldr	r3, [r3, #8]
 80049d2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049da:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80049dc:	683b      	ldr	r3, [r7, #0]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	68fa      	ldr	r2, [r7, #12]
 80049e2:	4313      	orrs	r3, r2
 80049e4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	68fa      	ldr	r2, [r7, #12]
 80049ec:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	4a16      	ldr	r2, [pc, #88]	; (8004a4c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80049f4:	4293      	cmp	r3, r2
 80049f6:	d00e      	beq.n	8004a16 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a00:	d009      	beq.n	8004a16 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	4a12      	ldr	r2, [pc, #72]	; (8004a50 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004a08:	4293      	cmp	r3, r2
 8004a0a:	d004      	beq.n	8004a16 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	4a10      	ldr	r2, [pc, #64]	; (8004a54 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004a12:	4293      	cmp	r3, r2
 8004a14:	d10c      	bne.n	8004a30 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004a16:	68bb      	ldr	r3, [r7, #8]
 8004a18:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004a1c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004a1e:	683b      	ldr	r3, [r7, #0]
 8004a20:	685b      	ldr	r3, [r3, #4]
 8004a22:	68ba      	ldr	r2, [r7, #8]
 8004a24:	4313      	orrs	r3, r2
 8004a26:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	68ba      	ldr	r2, [r7, #8]
 8004a2e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	2201      	movs	r2, #1
 8004a34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	2200      	movs	r2, #0
 8004a3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004a40:	2300      	movs	r3, #0
}
 8004a42:	4618      	mov	r0, r3
 8004a44:	3714      	adds	r7, #20
 8004a46:	46bd      	mov	sp, r7
 8004a48:	bc80      	pop	{r7}
 8004a4a:	4770      	bx	lr
 8004a4c:	40012c00 	.word	0x40012c00
 8004a50:	40000400 	.word	0x40000400
 8004a54:	40000800 	.word	0x40000800

08004a58 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004a58:	b480      	push	{r7}
 8004a5a:	b083      	sub	sp, #12
 8004a5c:	af00      	add	r7, sp, #0
 8004a5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004a60:	bf00      	nop
 8004a62:	370c      	adds	r7, #12
 8004a64:	46bd      	mov	sp, r7
 8004a66:	bc80      	pop	{r7}
 8004a68:	4770      	bx	lr

08004a6a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004a6a:	b480      	push	{r7}
 8004a6c:	b083      	sub	sp, #12
 8004a6e:	af00      	add	r7, sp, #0
 8004a70:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004a72:	bf00      	nop
 8004a74:	370c      	adds	r7, #12
 8004a76:	46bd      	mov	sp, r7
 8004a78:	bc80      	pop	{r7}
 8004a7a:	4770      	bx	lr

08004a7c <HAL_HalfDuplex_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 8004a7c:	b580      	push	{r7, lr}
 8004a7e:	b082      	sub	sp, #8
 8004a80:	af00      	add	r7, sp, #0
 8004a82:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d101      	bne.n	8004a8e <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 8004a8a:	2301      	movs	r3, #1
 8004a8c:	e047      	b.n	8004b1e <HAL_HalfDuplex_Init+0xa2>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a94:	b2db      	uxtb	r3, r3
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d106      	bne.n	8004aa8 <HAL_HalfDuplex_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	2200      	movs	r2, #0
 8004a9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004aa2:	6878      	ldr	r0, [r7, #4]
 8004aa4:	f7fd fad2 	bl	800204c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	2224      	movs	r2, #36	; 0x24
 8004aac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	68da      	ldr	r2, [r3, #12]
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004abe:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004ac0:	6878      	ldr	r0, [r7, #4]
 8004ac2:	f000 fd4f 	bl	8005564 <UART_SetConfig>

  /* In half-duplex mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	691a      	ldr	r2, [r3, #16]
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004ad4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	695a      	ldr	r2, [r3, #20]
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	f022 0222 	bic.w	r2, r2, #34	; 0x22
 8004ae4:	615a      	str	r2, [r3, #20]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	695a      	ldr	r2, [r3, #20]
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	f042 0208 	orr.w	r2, r2, #8
 8004af4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	68da      	ldr	r2, [r3, #12]
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004b04:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state*/
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	2200      	movs	r2, #0
 8004b0a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	2220      	movs	r2, #32
 8004b10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	2220      	movs	r2, #32
 8004b18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004b1c:	2300      	movs	r3, #0
}
 8004b1e:	4618      	mov	r0, r3
 8004b20:	3708      	adds	r7, #8
 8004b22:	46bd      	mov	sp, r7
 8004b24:	bd80      	pop	{r7, pc}
	...

08004b28 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004b28:	b580      	push	{r7, lr}
 8004b2a:	b086      	sub	sp, #24
 8004b2c:	af00      	add	r7, sp, #0
 8004b2e:	60f8      	str	r0, [r7, #12]
 8004b30:	60b9      	str	r1, [r7, #8]
 8004b32:	4613      	mov	r3, r2
 8004b34:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b3c:	b2db      	uxtb	r3, r3
 8004b3e:	2b20      	cmp	r3, #32
 8004b40:	d153      	bne.n	8004bea <HAL_UART_Transmit_DMA+0xc2>
  {
    if ((pData == NULL) || (Size == 0U))
 8004b42:	68bb      	ldr	r3, [r7, #8]
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d002      	beq.n	8004b4e <HAL_UART_Transmit_DMA+0x26>
 8004b48:	88fb      	ldrh	r3, [r7, #6]
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d101      	bne.n	8004b52 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8004b4e:	2301      	movs	r3, #1
 8004b50:	e04c      	b.n	8004bec <HAL_UART_Transmit_DMA+0xc4>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004b58:	2b01      	cmp	r3, #1
 8004b5a:	d101      	bne.n	8004b60 <HAL_UART_Transmit_DMA+0x38>
 8004b5c:	2302      	movs	r3, #2
 8004b5e:	e045      	b.n	8004bec <HAL_UART_Transmit_DMA+0xc4>
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	2201      	movs	r2, #1
 8004b64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8004b68:	68ba      	ldr	r2, [r7, #8]
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	88fa      	ldrh	r2, [r7, #6]
 8004b72:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	88fa      	ldrh	r2, [r7, #6]
 8004b78:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	2200      	movs	r2, #0
 8004b7e:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	2221      	movs	r2, #33	; 0x21
 8004b84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b8c:	4a19      	ldr	r2, [pc, #100]	; (8004bf4 <HAL_UART_Transmit_DMA+0xcc>)
 8004b8e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b94:	4a18      	ldr	r2, [pc, #96]	; (8004bf8 <HAL_UART_Transmit_DMA+0xd0>)
 8004b96:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b9c:	4a17      	ldr	r2, [pc, #92]	; (8004bfc <HAL_UART_Transmit_DMA+0xd4>)
 8004b9e:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ba4:	2200      	movs	r2, #0
 8004ba6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the UART transmit DMA channel */
    tmp = (uint32_t *)&pData;
 8004ba8:	f107 0308 	add.w	r3, r7, #8
 8004bac:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8004bb2:	697b      	ldr	r3, [r7, #20]
 8004bb4:	6819      	ldr	r1, [r3, #0]
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	3304      	adds	r3, #4
 8004bbc:	461a      	mov	r2, r3
 8004bbe:	88fb      	ldrh	r3, [r7, #6]
 8004bc0:	f7fd fe4c 	bl	800285c <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004bcc:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	2200      	movs	r2, #0
 8004bd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	695a      	ldr	r2, [r3, #20]
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004be4:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 8004be6:	2300      	movs	r3, #0
 8004be8:	e000      	b.n	8004bec <HAL_UART_Transmit_DMA+0xc4>
  }
  else
  {
    return HAL_BUSY;
 8004bea:	2302      	movs	r3, #2
  }
}
 8004bec:	4618      	mov	r0, r3
 8004bee:	3718      	adds	r7, #24
 8004bf0:	46bd      	mov	sp, r7
 8004bf2:	bd80      	pop	{r7, pc}
 8004bf4:	08005001 	.word	0x08005001
 8004bf8:	08005053 	.word	0x08005053
 8004bfc:	0800513b 	.word	0x0800513b

08004c00 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004c00:	b580      	push	{r7, lr}
 8004c02:	b084      	sub	sp, #16
 8004c04:	af00      	add	r7, sp, #0
 8004c06:	60f8      	str	r0, [r7, #12]
 8004c08:	60b9      	str	r1, [r7, #8]
 8004c0a:	4613      	mov	r3, r2
 8004c0c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004c14:	b2db      	uxtb	r3, r3
 8004c16:	2b20      	cmp	r3, #32
 8004c18:	d11d      	bne.n	8004c56 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8004c1a:	68bb      	ldr	r3, [r7, #8]
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d002      	beq.n	8004c26 <HAL_UART_Receive_DMA+0x26>
 8004c20:	88fb      	ldrh	r3, [r7, #6]
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d101      	bne.n	8004c2a <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8004c26:	2301      	movs	r3, #1
 8004c28:	e016      	b.n	8004c58 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004c30:	2b01      	cmp	r3, #1
 8004c32:	d101      	bne.n	8004c38 <HAL_UART_Receive_DMA+0x38>
 8004c34:	2302      	movs	r3, #2
 8004c36:	e00f      	b.n	8004c58 <HAL_UART_Receive_DMA+0x58>
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	2201      	movs	r2, #1
 8004c3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	2200      	movs	r2, #0
 8004c44:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_DMA(huart, pData, Size));
 8004c46:	88fb      	ldrh	r3, [r7, #6]
 8004c48:	461a      	mov	r2, r3
 8004c4a:	68b9      	ldr	r1, [r7, #8]
 8004c4c:	68f8      	ldr	r0, [r7, #12]
 8004c4e:	f000 fabf 	bl	80051d0 <UART_Start_Receive_DMA>
 8004c52:	4603      	mov	r3, r0
 8004c54:	e000      	b.n	8004c58 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 8004c56:	2302      	movs	r3, #2
  }
}
 8004c58:	4618      	mov	r0, r3
 8004c5a:	3710      	adds	r7, #16
 8004c5c:	46bd      	mov	sp, r7
 8004c5e:	bd80      	pop	{r7, pc}

08004c60 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004c60:	b580      	push	{r7, lr}
 8004c62:	b08a      	sub	sp, #40	; 0x28
 8004c64:	af00      	add	r7, sp, #0
 8004c66:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	68db      	ldr	r3, [r3, #12]
 8004c76:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	695b      	ldr	r3, [r3, #20]
 8004c7e:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8004c80:	2300      	movs	r3, #0
 8004c82:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8004c84:	2300      	movs	r3, #0
 8004c86:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004c88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c8a:	f003 030f 	and.w	r3, r3, #15
 8004c8e:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8004c90:	69bb      	ldr	r3, [r7, #24]
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d10d      	bne.n	8004cb2 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004c96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c98:	f003 0320 	and.w	r3, r3, #32
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d008      	beq.n	8004cb2 <HAL_UART_IRQHandler+0x52>
 8004ca0:	6a3b      	ldr	r3, [r7, #32]
 8004ca2:	f003 0320 	and.w	r3, r3, #32
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d003      	beq.n	8004cb2 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8004caa:	6878      	ldr	r0, [r7, #4]
 8004cac:	f000 fbb0 	bl	8005410 <UART_Receive_IT>
      return;
 8004cb0:	e17b      	b.n	8004faa <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004cb2:	69bb      	ldr	r3, [r7, #24]
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	f000 80b1 	beq.w	8004e1c <HAL_UART_IRQHandler+0x1bc>
 8004cba:	69fb      	ldr	r3, [r7, #28]
 8004cbc:	f003 0301 	and.w	r3, r3, #1
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d105      	bne.n	8004cd0 <HAL_UART_IRQHandler+0x70>
 8004cc4:	6a3b      	ldr	r3, [r7, #32]
 8004cc6:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	f000 80a6 	beq.w	8004e1c <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004cd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cd2:	f003 0301 	and.w	r3, r3, #1
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d00a      	beq.n	8004cf0 <HAL_UART_IRQHandler+0x90>
 8004cda:	6a3b      	ldr	r3, [r7, #32]
 8004cdc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d005      	beq.n	8004cf0 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ce8:	f043 0201 	orr.w	r2, r3, #1
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004cf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cf2:	f003 0304 	and.w	r3, r3, #4
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d00a      	beq.n	8004d10 <HAL_UART_IRQHandler+0xb0>
 8004cfa:	69fb      	ldr	r3, [r7, #28]
 8004cfc:	f003 0301 	and.w	r3, r3, #1
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d005      	beq.n	8004d10 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d08:	f043 0202 	orr.w	r2, r3, #2
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004d10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d12:	f003 0302 	and.w	r3, r3, #2
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d00a      	beq.n	8004d30 <HAL_UART_IRQHandler+0xd0>
 8004d1a:	69fb      	ldr	r3, [r7, #28]
 8004d1c:	f003 0301 	and.w	r3, r3, #1
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d005      	beq.n	8004d30 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d28:	f043 0204 	orr.w	r2, r3, #4
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8004d30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d32:	f003 0308 	and.w	r3, r3, #8
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d00f      	beq.n	8004d5a <HAL_UART_IRQHandler+0xfa>
 8004d3a:	6a3b      	ldr	r3, [r7, #32]
 8004d3c:	f003 0320 	and.w	r3, r3, #32
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d104      	bne.n	8004d4e <HAL_UART_IRQHandler+0xee>
 8004d44:	69fb      	ldr	r3, [r7, #28]
 8004d46:	f003 0301 	and.w	r3, r3, #1
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d005      	beq.n	8004d5a <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d52:	f043 0208 	orr.w	r2, r3, #8
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	f000 811e 	beq.w	8004fa0 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004d64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d66:	f003 0320 	and.w	r3, r3, #32
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d007      	beq.n	8004d7e <HAL_UART_IRQHandler+0x11e>
 8004d6e:	6a3b      	ldr	r3, [r7, #32]
 8004d70:	f003 0320 	and.w	r3, r3, #32
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d002      	beq.n	8004d7e <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8004d78:	6878      	ldr	r0, [r7, #4]
 8004d7a:	f000 fb49 	bl	8005410 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	695b      	ldr	r3, [r3, #20]
 8004d84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	bf14      	ite	ne
 8004d8c:	2301      	movne	r3, #1
 8004d8e:	2300      	moveq	r3, #0
 8004d90:	b2db      	uxtb	r3, r3
 8004d92:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d98:	f003 0308 	and.w	r3, r3, #8
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d102      	bne.n	8004da6 <HAL_UART_IRQHandler+0x146>
 8004da0:	697b      	ldr	r3, [r7, #20]
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d031      	beq.n	8004e0a <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004da6:	6878      	ldr	r0, [r7, #4]
 8004da8:	f000 fa8b 	bl	80052c2 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	695b      	ldr	r3, [r3, #20]
 8004db2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d023      	beq.n	8004e02 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	695a      	ldr	r2, [r3, #20]
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004dc8:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d013      	beq.n	8004dfa <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dd6:	4a76      	ldr	r2, [pc, #472]	; (8004fb0 <HAL_UART_IRQHandler+0x350>)
 8004dd8:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dde:	4618      	mov	r0, r3
 8004de0:	f7fd fdd6 	bl	8002990 <HAL_DMA_Abort_IT>
 8004de4:	4603      	mov	r3, r0
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d016      	beq.n	8004e18 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004df0:	687a      	ldr	r2, [r7, #4]
 8004df2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004df4:	4610      	mov	r0, r2
 8004df6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004df8:	e00e      	b.n	8004e18 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004dfa:	6878      	ldr	r0, [r7, #4]
 8004dfc:	f000 f8ec 	bl	8004fd8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e00:	e00a      	b.n	8004e18 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004e02:	6878      	ldr	r0, [r7, #4]
 8004e04:	f000 f8e8 	bl	8004fd8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e08:	e006      	b.n	8004e18 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004e0a:	6878      	ldr	r0, [r7, #4]
 8004e0c:	f000 f8e4 	bl	8004fd8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	2200      	movs	r2, #0
 8004e14:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8004e16:	e0c3      	b.n	8004fa0 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e18:	bf00      	nop
    return;
 8004e1a:	e0c1      	b.n	8004fa0 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e20:	2b01      	cmp	r3, #1
 8004e22:	f040 80a1 	bne.w	8004f68 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8004e26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e28:	f003 0310 	and.w	r3, r3, #16
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	f000 809b 	beq.w	8004f68 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8004e32:	6a3b      	ldr	r3, [r7, #32]
 8004e34:	f003 0310 	and.w	r3, r3, #16
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	f000 8095 	beq.w	8004f68 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004e3e:	2300      	movs	r3, #0
 8004e40:	60fb      	str	r3, [r7, #12]
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	60fb      	str	r3, [r7, #12]
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	685b      	ldr	r3, [r3, #4]
 8004e50:	60fb      	str	r3, [r7, #12]
 8004e52:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	695b      	ldr	r3, [r3, #20]
 8004e5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d04e      	beq.n	8004f00 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	685b      	ldr	r3, [r3, #4]
 8004e6a:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8004e6c:	8a3b      	ldrh	r3, [r7, #16]
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	f000 8098 	beq.w	8004fa4 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004e78:	8a3a      	ldrh	r2, [r7, #16]
 8004e7a:	429a      	cmp	r2, r3
 8004e7c:	f080 8092 	bcs.w	8004fa4 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	8a3a      	ldrh	r2, [r7, #16]
 8004e84:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e8a:	699b      	ldr	r3, [r3, #24]
 8004e8c:	2b20      	cmp	r3, #32
 8004e8e:	d02b      	beq.n	8004ee8 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	68da      	ldr	r2, [r3, #12]
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004e9e:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	695a      	ldr	r2, [r3, #20]
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	f022 0201 	bic.w	r2, r2, #1
 8004eae:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	695a      	ldr	r2, [r3, #20]
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004ebe:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	2220      	movs	r2, #32
 8004ec4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	2200      	movs	r2, #0
 8004ecc:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	68da      	ldr	r2, [r3, #12]
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	f022 0210 	bic.w	r2, r2, #16
 8004edc:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ee2:	4618      	mov	r0, r3
 8004ee4:	f7fd fd19 	bl	800291a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004ef0:	b29b      	uxth	r3, r3
 8004ef2:	1ad3      	subs	r3, r2, r3
 8004ef4:	b29b      	uxth	r3, r3
 8004ef6:	4619      	mov	r1, r3
 8004ef8:	6878      	ldr	r0, [r7, #4]
 8004efa:	f000 f876 	bl	8004fea <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8004efe:	e051      	b.n	8004fa4 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004f08:	b29b      	uxth	r3, r3
 8004f0a:	1ad3      	subs	r3, r2, r3
 8004f0c:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004f12:	b29b      	uxth	r3, r3
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d047      	beq.n	8004fa8 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8004f18:	8a7b      	ldrh	r3, [r7, #18]
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d044      	beq.n	8004fa8 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	68da      	ldr	r2, [r3, #12]
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004f2c:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	695a      	ldr	r2, [r3, #20]
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	f022 0201 	bic.w	r2, r2, #1
 8004f3c:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	2220      	movs	r2, #32
 8004f42:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	2200      	movs	r2, #0
 8004f4a:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	68da      	ldr	r2, [r3, #12]
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	f022 0210 	bic.w	r2, r2, #16
 8004f5a:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004f5c:	8a7b      	ldrh	r3, [r7, #18]
 8004f5e:	4619      	mov	r1, r3
 8004f60:	6878      	ldr	r0, [r7, #4]
 8004f62:	f000 f842 	bl	8004fea <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8004f66:	e01f      	b.n	8004fa8 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004f68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d008      	beq.n	8004f84 <HAL_UART_IRQHandler+0x324>
 8004f72:	6a3b      	ldr	r3, [r7, #32]
 8004f74:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d003      	beq.n	8004f84 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8004f7c:	6878      	ldr	r0, [r7, #4]
 8004f7e:	f000 f9e0 	bl	8005342 <UART_Transmit_IT>
    return;
 8004f82:	e012      	b.n	8004faa <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004f84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d00d      	beq.n	8004faa <HAL_UART_IRQHandler+0x34a>
 8004f8e:	6a3b      	ldr	r3, [r7, #32]
 8004f90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d008      	beq.n	8004faa <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8004f98:	6878      	ldr	r0, [r7, #4]
 8004f9a:	f000 fa21 	bl	80053e0 <UART_EndTransmit_IT>
    return;
 8004f9e:	e004      	b.n	8004faa <HAL_UART_IRQHandler+0x34a>
    return;
 8004fa0:	bf00      	nop
 8004fa2:	e002      	b.n	8004faa <HAL_UART_IRQHandler+0x34a>
      return;
 8004fa4:	bf00      	nop
 8004fa6:	e000      	b.n	8004faa <HAL_UART_IRQHandler+0x34a>
      return;
 8004fa8:	bf00      	nop
  }
}
 8004faa:	3728      	adds	r7, #40	; 0x28
 8004fac:	46bd      	mov	sp, r7
 8004fae:	bd80      	pop	{r7, pc}
 8004fb0:	0800531b 	.word	0x0800531b

08004fb4 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004fb4:	b480      	push	{r7}
 8004fb6:	b083      	sub	sp, #12
 8004fb8:	af00      	add	r7, sp, #0
 8004fba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8004fbc:	bf00      	nop
 8004fbe:	370c      	adds	r7, #12
 8004fc0:	46bd      	mov	sp, r7
 8004fc2:	bc80      	pop	{r7}
 8004fc4:	4770      	bx	lr

08004fc6 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004fc6:	b480      	push	{r7}
 8004fc8:	b083      	sub	sp, #12
 8004fca:	af00      	add	r7, sp, #0
 8004fcc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8004fce:	bf00      	nop
 8004fd0:	370c      	adds	r7, #12
 8004fd2:	46bd      	mov	sp, r7
 8004fd4:	bc80      	pop	{r7}
 8004fd6:	4770      	bx	lr

08004fd8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004fd8:	b480      	push	{r7}
 8004fda:	b083      	sub	sp, #12
 8004fdc:	af00      	add	r7, sp, #0
 8004fde:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004fe0:	bf00      	nop
 8004fe2:	370c      	adds	r7, #12
 8004fe4:	46bd      	mov	sp, r7
 8004fe6:	bc80      	pop	{r7}
 8004fe8:	4770      	bx	lr

08004fea <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004fea:	b480      	push	{r7}
 8004fec:	b083      	sub	sp, #12
 8004fee:	af00      	add	r7, sp, #0
 8004ff0:	6078      	str	r0, [r7, #4]
 8004ff2:	460b      	mov	r3, r1
 8004ff4:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004ff6:	bf00      	nop
 8004ff8:	370c      	adds	r7, #12
 8004ffa:	46bd      	mov	sp, r7
 8004ffc:	bc80      	pop	{r7}
 8004ffe:	4770      	bx	lr

08005000 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8005000:	b580      	push	{r7, lr}
 8005002:	b084      	sub	sp, #16
 8005004:	af00      	add	r7, sp, #0
 8005006:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800500c:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	f003 0320 	and.w	r3, r3, #32
 8005018:	2b00      	cmp	r3, #0
 800501a:	d113      	bne.n	8005044 <UART_DMATransmitCplt+0x44>
  {
    huart->TxXferCount = 0x00U;
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	2200      	movs	r2, #0
 8005020:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	695a      	ldr	r2, [r3, #20]
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005030:	615a      	str	r2, [r3, #20]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	68da      	ldr	r2, [r3, #12]
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005040:	60da      	str	r2, [r3, #12]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005042:	e002      	b.n	800504a <UART_DMATransmitCplt+0x4a>
    HAL_UART_TxCpltCallback(huart);
 8005044:	68f8      	ldr	r0, [r7, #12]
 8005046:	f7fc fb3b 	bl	80016c0 <HAL_UART_TxCpltCallback>
}
 800504a:	bf00      	nop
 800504c:	3710      	adds	r7, #16
 800504e:	46bd      	mov	sp, r7
 8005050:	bd80      	pop	{r7, pc}

08005052 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005052:	b580      	push	{r7, lr}
 8005054:	b084      	sub	sp, #16
 8005056:	af00      	add	r7, sp, #0
 8005058:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800505e:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8005060:	68f8      	ldr	r0, [r7, #12]
 8005062:	f7ff ffa7 	bl	8004fb4 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005066:	bf00      	nop
 8005068:	3710      	adds	r7, #16
 800506a:	46bd      	mov	sp, r7
 800506c:	bd80      	pop	{r7, pc}

0800506e <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800506e:	b580      	push	{r7, lr}
 8005070:	b084      	sub	sp, #16
 8005072:	af00      	add	r7, sp, #0
 8005074:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800507a:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	f003 0320 	and.w	r3, r3, #32
 8005086:	2b00      	cmp	r3, #0
 8005088:	d12a      	bne.n	80050e0 <UART_DMAReceiveCplt+0x72>
  {
    huart->RxXferCount = 0U;
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	2200      	movs	r2, #0
 800508e:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	68da      	ldr	r2, [r3, #12]
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800509e:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	695a      	ldr	r2, [r3, #20]
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	f022 0201 	bic.w	r2, r2, #1
 80050ae:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	695a      	ldr	r2, [r3, #20]
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80050be:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	2220      	movs	r2, #32
 80050c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050cc:	2b01      	cmp	r3, #1
 80050ce:	d107      	bne.n	80050e0 <UART_DMAReceiveCplt+0x72>
    {
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	68da      	ldr	r2, [r3, #12]
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	f022 0210 	bic.w	r2, r2, #16
 80050de:	60da      	str	r2, [r3, #12]
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050e4:	2b01      	cmp	r3, #1
 80050e6:	d106      	bne.n	80050f6 <UART_DMAReceiveCplt+0x88>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80050ec:	4619      	mov	r1, r3
 80050ee:	68f8      	ldr	r0, [r7, #12]
 80050f0:	f7ff ff7b 	bl	8004fea <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80050f4:	e002      	b.n	80050fc <UART_DMAReceiveCplt+0x8e>
    HAL_UART_RxCpltCallback(huart);
 80050f6:	68f8      	ldr	r0, [r7, #12]
 80050f8:	f7fc faf4 	bl	80016e4 <HAL_UART_RxCpltCallback>
}
 80050fc:	bf00      	nop
 80050fe:	3710      	adds	r7, #16
 8005100:	46bd      	mov	sp, r7
 8005102:	bd80      	pop	{r7, pc}

08005104 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005104:	b580      	push	{r7, lr}
 8005106:	b084      	sub	sp, #16
 8005108:	af00      	add	r7, sp, #0
 800510a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005110:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005116:	2b01      	cmp	r3, #1
 8005118:	d108      	bne.n	800512c <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize/2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize/2U);
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800511e:	085b      	lsrs	r3, r3, #1
 8005120:	b29b      	uxth	r3, r3
 8005122:	4619      	mov	r1, r3
 8005124:	68f8      	ldr	r0, [r7, #12]
 8005126:	f7ff ff60 	bl	8004fea <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800512a:	e002      	b.n	8005132 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 800512c:	68f8      	ldr	r0, [r7, #12]
 800512e:	f7ff ff4a 	bl	8004fc6 <HAL_UART_RxHalfCpltCallback>
}
 8005132:	bf00      	nop
 8005134:	3710      	adds	r7, #16
 8005136:	46bd      	mov	sp, r7
 8005138:	bd80      	pop	{r7, pc}

0800513a <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800513a:	b580      	push	{r7, lr}
 800513c:	b084      	sub	sp, #16
 800513e:	af00      	add	r7, sp, #0
 8005140:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8005142:	2300      	movs	r3, #0
 8005144:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800514a:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800514c:	68bb      	ldr	r3, [r7, #8]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	695b      	ldr	r3, [r3, #20]
 8005152:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005156:	2b00      	cmp	r3, #0
 8005158:	bf14      	ite	ne
 800515a:	2301      	movne	r3, #1
 800515c:	2300      	moveq	r3, #0
 800515e:	b2db      	uxtb	r3, r3
 8005160:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8005162:	68bb      	ldr	r3, [r7, #8]
 8005164:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005168:	b2db      	uxtb	r3, r3
 800516a:	2b21      	cmp	r3, #33	; 0x21
 800516c:	d108      	bne.n	8005180 <UART_DMAError+0x46>
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	2b00      	cmp	r3, #0
 8005172:	d005      	beq.n	8005180 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8005174:	68bb      	ldr	r3, [r7, #8]
 8005176:	2200      	movs	r2, #0
 8005178:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800517a:	68b8      	ldr	r0, [r7, #8]
 800517c:	f000 f88c 	bl	8005298 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005180:	68bb      	ldr	r3, [r7, #8]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	695b      	ldr	r3, [r3, #20]
 8005186:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800518a:	2b00      	cmp	r3, #0
 800518c:	bf14      	ite	ne
 800518e:	2301      	movne	r3, #1
 8005190:	2300      	moveq	r3, #0
 8005192:	b2db      	uxtb	r3, r3
 8005194:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8005196:	68bb      	ldr	r3, [r7, #8]
 8005198:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800519c:	b2db      	uxtb	r3, r3
 800519e:	2b22      	cmp	r3, #34	; 0x22
 80051a0:	d108      	bne.n	80051b4 <UART_DMAError+0x7a>
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d005      	beq.n	80051b4 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80051a8:	68bb      	ldr	r3, [r7, #8]
 80051aa:	2200      	movs	r2, #0
 80051ac:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 80051ae:	68b8      	ldr	r0, [r7, #8]
 80051b0:	f000 f887 	bl	80052c2 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80051b4:	68bb      	ldr	r3, [r7, #8]
 80051b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051b8:	f043 0210 	orr.w	r2, r3, #16
 80051bc:	68bb      	ldr	r3, [r7, #8]
 80051be:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80051c0:	68b8      	ldr	r0, [r7, #8]
 80051c2:	f7ff ff09 	bl	8004fd8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80051c6:	bf00      	nop
 80051c8:	3710      	adds	r7, #16
 80051ca:	46bd      	mov	sp, r7
 80051cc:	bd80      	pop	{r7, pc}
	...

080051d0 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80051d0:	b580      	push	{r7, lr}
 80051d2:	b086      	sub	sp, #24
 80051d4:	af00      	add	r7, sp, #0
 80051d6:	60f8      	str	r0, [r7, #12]
 80051d8:	60b9      	str	r1, [r7, #8]
 80051da:	4613      	mov	r3, r2
 80051dc:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 80051de:	68ba      	ldr	r2, [r7, #8]
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	88fa      	ldrh	r2, [r7, #6]
 80051e8:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	2200      	movs	r2, #0
 80051ee:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	2222      	movs	r2, #34	; 0x22
 80051f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051fc:	4a23      	ldr	r2, [pc, #140]	; (800528c <UART_Start_Receive_DMA+0xbc>)
 80051fe:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005204:	4a22      	ldr	r2, [pc, #136]	; (8005290 <UART_Start_Receive_DMA+0xc0>)
 8005206:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800520c:	4a21      	ldr	r2, [pc, #132]	; (8005294 <UART_Start_Receive_DMA+0xc4>)
 800520e:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005214:	2200      	movs	r2, #0
 8005216:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8005218:	f107 0308 	add.w	r3, r7, #8
 800521c:	617b      	str	r3, [r7, #20]
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	3304      	adds	r3, #4
 8005228:	4619      	mov	r1, r3
 800522a:	697b      	ldr	r3, [r7, #20]
 800522c:	681a      	ldr	r2, [r3, #0]
 800522e:	88fb      	ldrh	r3, [r7, #6]
 8005230:	f7fd fb14 	bl	800285c <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8005234:	2300      	movs	r3, #0
 8005236:	613b      	str	r3, [r7, #16]
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	613b      	str	r3, [r7, #16]
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	685b      	ldr	r3, [r3, #4]
 8005246:	613b      	str	r3, [r7, #16]
 8005248:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	2200      	movs	r2, #0
 800524e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	68da      	ldr	r2, [r3, #12]
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005260:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	695a      	ldr	r2, [r3, #20]
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	f042 0201 	orr.w	r2, r2, #1
 8005270:	615a      	str	r2, [r3, #20]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	695a      	ldr	r2, [r3, #20]
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005280:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 8005282:	2300      	movs	r3, #0
}
 8005284:	4618      	mov	r0, r3
 8005286:	3718      	adds	r7, #24
 8005288:	46bd      	mov	sp, r7
 800528a:	bd80      	pop	{r7, pc}
 800528c:	0800506f 	.word	0x0800506f
 8005290:	08005105 	.word	0x08005105
 8005294:	0800513b 	.word	0x0800513b

08005298 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8005298:	b480      	push	{r7}
 800529a:	b083      	sub	sp, #12
 800529c:	af00      	add	r7, sp, #0
 800529e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	68da      	ldr	r2, [r3, #12]
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 80052ae:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	2220      	movs	r2, #32
 80052b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 80052b8:	bf00      	nop
 80052ba:	370c      	adds	r7, #12
 80052bc:	46bd      	mov	sp, r7
 80052be:	bc80      	pop	{r7}
 80052c0:	4770      	bx	lr

080052c2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80052c2:	b480      	push	{r7}
 80052c4:	b083      	sub	sp, #12
 80052c6:	af00      	add	r7, sp, #0
 80052c8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	68da      	ldr	r2, [r3, #12]
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80052d8:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	695a      	ldr	r2, [r3, #20]
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	f022 0201 	bic.w	r2, r2, #1
 80052e8:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052ee:	2b01      	cmp	r3, #1
 80052f0:	d107      	bne.n	8005302 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	68da      	ldr	r2, [r3, #12]
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	f022 0210 	bic.w	r2, r2, #16
 8005300:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	2220      	movs	r2, #32
 8005306:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	2200      	movs	r2, #0
 800530e:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005310:	bf00      	nop
 8005312:	370c      	adds	r7, #12
 8005314:	46bd      	mov	sp, r7
 8005316:	bc80      	pop	{r7}
 8005318:	4770      	bx	lr

0800531a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800531a:	b580      	push	{r7, lr}
 800531c:	b084      	sub	sp, #16
 800531e:	af00      	add	r7, sp, #0
 8005320:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005326:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	2200      	movs	r2, #0
 800532c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	2200      	movs	r2, #0
 8005332:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005334:	68f8      	ldr	r0, [r7, #12]
 8005336:	f7ff fe4f 	bl	8004fd8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800533a:	bf00      	nop
 800533c:	3710      	adds	r7, #16
 800533e:	46bd      	mov	sp, r7
 8005340:	bd80      	pop	{r7, pc}

08005342 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005342:	b480      	push	{r7}
 8005344:	b085      	sub	sp, #20
 8005346:	af00      	add	r7, sp, #0
 8005348:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005350:	b2db      	uxtb	r3, r3
 8005352:	2b21      	cmp	r3, #33	; 0x21
 8005354:	d13e      	bne.n	80053d4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	689b      	ldr	r3, [r3, #8]
 800535a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800535e:	d114      	bne.n	800538a <UART_Transmit_IT+0x48>
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	691b      	ldr	r3, [r3, #16]
 8005364:	2b00      	cmp	r3, #0
 8005366:	d110      	bne.n	800538a <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	6a1b      	ldr	r3, [r3, #32]
 800536c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	881b      	ldrh	r3, [r3, #0]
 8005372:	461a      	mov	r2, r3
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800537c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	6a1b      	ldr	r3, [r3, #32]
 8005382:	1c9a      	adds	r2, r3, #2
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	621a      	str	r2, [r3, #32]
 8005388:	e008      	b.n	800539c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	6a1b      	ldr	r3, [r3, #32]
 800538e:	1c59      	adds	r1, r3, #1
 8005390:	687a      	ldr	r2, [r7, #4]
 8005392:	6211      	str	r1, [r2, #32]
 8005394:	781a      	ldrb	r2, [r3, #0]
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80053a0:	b29b      	uxth	r3, r3
 80053a2:	3b01      	subs	r3, #1
 80053a4:	b29b      	uxth	r3, r3
 80053a6:	687a      	ldr	r2, [r7, #4]
 80053a8:	4619      	mov	r1, r3
 80053aa:	84d1      	strh	r1, [r2, #38]	; 0x26
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d10f      	bne.n	80053d0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	68da      	ldr	r2, [r3, #12]
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80053be:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	68da      	ldr	r2, [r3, #12]
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80053ce:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80053d0:	2300      	movs	r3, #0
 80053d2:	e000      	b.n	80053d6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80053d4:	2302      	movs	r3, #2
  }
}
 80053d6:	4618      	mov	r0, r3
 80053d8:	3714      	adds	r7, #20
 80053da:	46bd      	mov	sp, r7
 80053dc:	bc80      	pop	{r7}
 80053de:	4770      	bx	lr

080053e0 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80053e0:	b580      	push	{r7, lr}
 80053e2:	b082      	sub	sp, #8
 80053e4:	af00      	add	r7, sp, #0
 80053e6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	68da      	ldr	r2, [r3, #12]
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80053f6:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	2220      	movs	r2, #32
 80053fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005400:	6878      	ldr	r0, [r7, #4]
 8005402:	f7fc f95d 	bl	80016c0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005406:	2300      	movs	r3, #0
}
 8005408:	4618      	mov	r0, r3
 800540a:	3708      	adds	r7, #8
 800540c:	46bd      	mov	sp, r7
 800540e:	bd80      	pop	{r7, pc}

08005410 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005410:	b580      	push	{r7, lr}
 8005412:	b086      	sub	sp, #24
 8005414:	af00      	add	r7, sp, #0
 8005416:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800541e:	b2db      	uxtb	r3, r3
 8005420:	2b22      	cmp	r3, #34	; 0x22
 8005422:	f040 8099 	bne.w	8005558 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	689b      	ldr	r3, [r3, #8]
 800542a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800542e:	d117      	bne.n	8005460 <UART_Receive_IT+0x50>
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	691b      	ldr	r3, [r3, #16]
 8005434:	2b00      	cmp	r3, #0
 8005436:	d113      	bne.n	8005460 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005438:	2300      	movs	r3, #0
 800543a:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005440:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	685b      	ldr	r3, [r3, #4]
 8005448:	b29b      	uxth	r3, r3
 800544a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800544e:	b29a      	uxth	r2, r3
 8005450:	693b      	ldr	r3, [r7, #16]
 8005452:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005458:	1c9a      	adds	r2, r3, #2
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	629a      	str	r2, [r3, #40]	; 0x28
 800545e:	e026      	b.n	80054ae <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005464:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8005466:	2300      	movs	r3, #0
 8005468:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	689b      	ldr	r3, [r3, #8]
 800546e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005472:	d007      	beq.n	8005484 <UART_Receive_IT+0x74>
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	689b      	ldr	r3, [r3, #8]
 8005478:	2b00      	cmp	r3, #0
 800547a:	d10a      	bne.n	8005492 <UART_Receive_IT+0x82>
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	691b      	ldr	r3, [r3, #16]
 8005480:	2b00      	cmp	r3, #0
 8005482:	d106      	bne.n	8005492 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	685b      	ldr	r3, [r3, #4]
 800548a:	b2da      	uxtb	r2, r3
 800548c:	697b      	ldr	r3, [r7, #20]
 800548e:	701a      	strb	r2, [r3, #0]
 8005490:	e008      	b.n	80054a4 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	685b      	ldr	r3, [r3, #4]
 8005498:	b2db      	uxtb	r3, r3
 800549a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800549e:	b2da      	uxtb	r2, r3
 80054a0:	697b      	ldr	r3, [r7, #20]
 80054a2:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054a8:	1c5a      	adds	r2, r3, #1
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80054b2:	b29b      	uxth	r3, r3
 80054b4:	3b01      	subs	r3, #1
 80054b6:	b29b      	uxth	r3, r3
 80054b8:	687a      	ldr	r2, [r7, #4]
 80054ba:	4619      	mov	r1, r3
 80054bc:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d148      	bne.n	8005554 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	68da      	ldr	r2, [r3, #12]
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	f022 0220 	bic.w	r2, r2, #32
 80054d0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	68da      	ldr	r2, [r3, #12]
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80054e0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	695a      	ldr	r2, [r3, #20]
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	f022 0201 	bic.w	r2, r2, #1
 80054f0:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	2220      	movs	r2, #32
 80054f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054fe:	2b01      	cmp	r3, #1
 8005500:	d123      	bne.n	800554a <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	2200      	movs	r2, #0
 8005506:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	68da      	ldr	r2, [r3, #12]
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	f022 0210 	bic.w	r2, r2, #16
 8005516:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	f003 0310 	and.w	r3, r3, #16
 8005522:	2b10      	cmp	r3, #16
 8005524:	d10a      	bne.n	800553c <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005526:	2300      	movs	r3, #0
 8005528:	60fb      	str	r3, [r7, #12]
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	60fb      	str	r3, [r7, #12]
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	685b      	ldr	r3, [r3, #4]
 8005538:	60fb      	str	r3, [r7, #12]
 800553a:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005540:	4619      	mov	r1, r3
 8005542:	6878      	ldr	r0, [r7, #4]
 8005544:	f7ff fd51 	bl	8004fea <HAL_UARTEx_RxEventCallback>
 8005548:	e002      	b.n	8005550 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 800554a:	6878      	ldr	r0, [r7, #4]
 800554c:	f7fc f8ca 	bl	80016e4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005550:	2300      	movs	r3, #0
 8005552:	e002      	b.n	800555a <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8005554:	2300      	movs	r3, #0
 8005556:	e000      	b.n	800555a <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8005558:	2302      	movs	r3, #2
  }
}
 800555a:	4618      	mov	r0, r3
 800555c:	3718      	adds	r7, #24
 800555e:	46bd      	mov	sp, r7
 8005560:	bd80      	pop	{r7, pc}
	...

08005564 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005564:	b580      	push	{r7, lr}
 8005566:	b084      	sub	sp, #16
 8005568:	af00      	add	r7, sp, #0
 800556a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	691b      	ldr	r3, [r3, #16]
 8005572:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	68da      	ldr	r2, [r3, #12]
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	430a      	orrs	r2, r1
 8005580:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	689a      	ldr	r2, [r3, #8]
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	691b      	ldr	r3, [r3, #16]
 800558a:	431a      	orrs	r2, r3
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	695b      	ldr	r3, [r3, #20]
 8005590:	4313      	orrs	r3, r2
 8005592:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	68db      	ldr	r3, [r3, #12]
 800559a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800559e:	f023 030c 	bic.w	r3, r3, #12
 80055a2:	687a      	ldr	r2, [r7, #4]
 80055a4:	6812      	ldr	r2, [r2, #0]
 80055a6:	68b9      	ldr	r1, [r7, #8]
 80055a8:	430b      	orrs	r3, r1
 80055aa:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	695b      	ldr	r3, [r3, #20]
 80055b2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	699a      	ldr	r2, [r3, #24]
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	430a      	orrs	r2, r1
 80055c0:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	4a2c      	ldr	r2, [pc, #176]	; (8005678 <UART_SetConfig+0x114>)
 80055c8:	4293      	cmp	r3, r2
 80055ca:	d103      	bne.n	80055d4 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80055cc:	f7fe fd50 	bl	8004070 <HAL_RCC_GetPCLK2Freq>
 80055d0:	60f8      	str	r0, [r7, #12]
 80055d2:	e002      	b.n	80055da <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80055d4:	f7fe fd38 	bl	8004048 <HAL_RCC_GetPCLK1Freq>
 80055d8:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80055da:	68fa      	ldr	r2, [r7, #12]
 80055dc:	4613      	mov	r3, r2
 80055de:	009b      	lsls	r3, r3, #2
 80055e0:	4413      	add	r3, r2
 80055e2:	009a      	lsls	r2, r3, #2
 80055e4:	441a      	add	r2, r3
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	685b      	ldr	r3, [r3, #4]
 80055ea:	009b      	lsls	r3, r3, #2
 80055ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80055f0:	4a22      	ldr	r2, [pc, #136]	; (800567c <UART_SetConfig+0x118>)
 80055f2:	fba2 2303 	umull	r2, r3, r2, r3
 80055f6:	095b      	lsrs	r3, r3, #5
 80055f8:	0119      	lsls	r1, r3, #4
 80055fa:	68fa      	ldr	r2, [r7, #12]
 80055fc:	4613      	mov	r3, r2
 80055fe:	009b      	lsls	r3, r3, #2
 8005600:	4413      	add	r3, r2
 8005602:	009a      	lsls	r2, r3, #2
 8005604:	441a      	add	r2, r3
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	685b      	ldr	r3, [r3, #4]
 800560a:	009b      	lsls	r3, r3, #2
 800560c:	fbb2 f2f3 	udiv	r2, r2, r3
 8005610:	4b1a      	ldr	r3, [pc, #104]	; (800567c <UART_SetConfig+0x118>)
 8005612:	fba3 0302 	umull	r0, r3, r3, r2
 8005616:	095b      	lsrs	r3, r3, #5
 8005618:	2064      	movs	r0, #100	; 0x64
 800561a:	fb00 f303 	mul.w	r3, r0, r3
 800561e:	1ad3      	subs	r3, r2, r3
 8005620:	011b      	lsls	r3, r3, #4
 8005622:	3332      	adds	r3, #50	; 0x32
 8005624:	4a15      	ldr	r2, [pc, #84]	; (800567c <UART_SetConfig+0x118>)
 8005626:	fba2 2303 	umull	r2, r3, r2, r3
 800562a:	095b      	lsrs	r3, r3, #5
 800562c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005630:	4419      	add	r1, r3
 8005632:	68fa      	ldr	r2, [r7, #12]
 8005634:	4613      	mov	r3, r2
 8005636:	009b      	lsls	r3, r3, #2
 8005638:	4413      	add	r3, r2
 800563a:	009a      	lsls	r2, r3, #2
 800563c:	441a      	add	r2, r3
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	685b      	ldr	r3, [r3, #4]
 8005642:	009b      	lsls	r3, r3, #2
 8005644:	fbb2 f2f3 	udiv	r2, r2, r3
 8005648:	4b0c      	ldr	r3, [pc, #48]	; (800567c <UART_SetConfig+0x118>)
 800564a:	fba3 0302 	umull	r0, r3, r3, r2
 800564e:	095b      	lsrs	r3, r3, #5
 8005650:	2064      	movs	r0, #100	; 0x64
 8005652:	fb00 f303 	mul.w	r3, r0, r3
 8005656:	1ad3      	subs	r3, r2, r3
 8005658:	011b      	lsls	r3, r3, #4
 800565a:	3332      	adds	r3, #50	; 0x32
 800565c:	4a07      	ldr	r2, [pc, #28]	; (800567c <UART_SetConfig+0x118>)
 800565e:	fba2 2303 	umull	r2, r3, r2, r3
 8005662:	095b      	lsrs	r3, r3, #5
 8005664:	f003 020f 	and.w	r2, r3, #15
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	440a      	add	r2, r1
 800566e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8005670:	bf00      	nop
 8005672:	3710      	adds	r7, #16
 8005674:	46bd      	mov	sp, r7
 8005676:	bd80      	pop	{r7, pc}
 8005678:	40013800 	.word	0x40013800
 800567c:	51eb851f 	.word	0x51eb851f

08005680 <__errno>:
 8005680:	4b01      	ldr	r3, [pc, #4]	; (8005688 <__errno+0x8>)
 8005682:	6818      	ldr	r0, [r3, #0]
 8005684:	4770      	bx	lr
 8005686:	bf00      	nop
 8005688:	20000018 	.word	0x20000018

0800568c <__libc_init_array>:
 800568c:	b570      	push	{r4, r5, r6, lr}
 800568e:	2600      	movs	r6, #0
 8005690:	4d0c      	ldr	r5, [pc, #48]	; (80056c4 <__libc_init_array+0x38>)
 8005692:	4c0d      	ldr	r4, [pc, #52]	; (80056c8 <__libc_init_array+0x3c>)
 8005694:	1b64      	subs	r4, r4, r5
 8005696:	10a4      	asrs	r4, r4, #2
 8005698:	42a6      	cmp	r6, r4
 800569a:	d109      	bne.n	80056b0 <__libc_init_array+0x24>
 800569c:	f002 fefc 	bl	8008498 <_init>
 80056a0:	2600      	movs	r6, #0
 80056a2:	4d0a      	ldr	r5, [pc, #40]	; (80056cc <__libc_init_array+0x40>)
 80056a4:	4c0a      	ldr	r4, [pc, #40]	; (80056d0 <__libc_init_array+0x44>)
 80056a6:	1b64      	subs	r4, r4, r5
 80056a8:	10a4      	asrs	r4, r4, #2
 80056aa:	42a6      	cmp	r6, r4
 80056ac:	d105      	bne.n	80056ba <__libc_init_array+0x2e>
 80056ae:	bd70      	pop	{r4, r5, r6, pc}
 80056b0:	f855 3b04 	ldr.w	r3, [r5], #4
 80056b4:	4798      	blx	r3
 80056b6:	3601      	adds	r6, #1
 80056b8:	e7ee      	b.n	8005698 <__libc_init_array+0xc>
 80056ba:	f855 3b04 	ldr.w	r3, [r5], #4
 80056be:	4798      	blx	r3
 80056c0:	3601      	adds	r6, #1
 80056c2:	e7f2      	b.n	80056aa <__libc_init_array+0x1e>
 80056c4:	0800903c 	.word	0x0800903c
 80056c8:	0800903c 	.word	0x0800903c
 80056cc:	0800903c 	.word	0x0800903c
 80056d0:	08009040 	.word	0x08009040

080056d4 <memcpy>:
 80056d4:	440a      	add	r2, r1
 80056d6:	4291      	cmp	r1, r2
 80056d8:	f100 33ff 	add.w	r3, r0, #4294967295
 80056dc:	d100      	bne.n	80056e0 <memcpy+0xc>
 80056de:	4770      	bx	lr
 80056e0:	b510      	push	{r4, lr}
 80056e2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80056e6:	4291      	cmp	r1, r2
 80056e8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80056ec:	d1f9      	bne.n	80056e2 <memcpy+0xe>
 80056ee:	bd10      	pop	{r4, pc}

080056f0 <memmove>:
 80056f0:	4288      	cmp	r0, r1
 80056f2:	b510      	push	{r4, lr}
 80056f4:	eb01 0402 	add.w	r4, r1, r2
 80056f8:	d902      	bls.n	8005700 <memmove+0x10>
 80056fa:	4284      	cmp	r4, r0
 80056fc:	4623      	mov	r3, r4
 80056fe:	d807      	bhi.n	8005710 <memmove+0x20>
 8005700:	1e43      	subs	r3, r0, #1
 8005702:	42a1      	cmp	r1, r4
 8005704:	d008      	beq.n	8005718 <memmove+0x28>
 8005706:	f811 2b01 	ldrb.w	r2, [r1], #1
 800570a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800570e:	e7f8      	b.n	8005702 <memmove+0x12>
 8005710:	4601      	mov	r1, r0
 8005712:	4402      	add	r2, r0
 8005714:	428a      	cmp	r2, r1
 8005716:	d100      	bne.n	800571a <memmove+0x2a>
 8005718:	bd10      	pop	{r4, pc}
 800571a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800571e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005722:	e7f7      	b.n	8005714 <memmove+0x24>

08005724 <memset>:
 8005724:	4603      	mov	r3, r0
 8005726:	4402      	add	r2, r0
 8005728:	4293      	cmp	r3, r2
 800572a:	d100      	bne.n	800572e <memset+0xa>
 800572c:	4770      	bx	lr
 800572e:	f803 1b01 	strb.w	r1, [r3], #1
 8005732:	e7f9      	b.n	8005728 <memset+0x4>

08005734 <__cvt>:
 8005734:	2b00      	cmp	r3, #0
 8005736:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800573a:	461f      	mov	r7, r3
 800573c:	bfbb      	ittet	lt
 800573e:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8005742:	461f      	movlt	r7, r3
 8005744:	2300      	movge	r3, #0
 8005746:	232d      	movlt	r3, #45	; 0x2d
 8005748:	b088      	sub	sp, #32
 800574a:	4614      	mov	r4, r2
 800574c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800574e:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8005750:	7013      	strb	r3, [r2, #0]
 8005752:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005754:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8005758:	f023 0820 	bic.w	r8, r3, #32
 800575c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005760:	d005      	beq.n	800576e <__cvt+0x3a>
 8005762:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8005766:	d100      	bne.n	800576a <__cvt+0x36>
 8005768:	3501      	adds	r5, #1
 800576a:	2302      	movs	r3, #2
 800576c:	e000      	b.n	8005770 <__cvt+0x3c>
 800576e:	2303      	movs	r3, #3
 8005770:	aa07      	add	r2, sp, #28
 8005772:	9204      	str	r2, [sp, #16]
 8005774:	aa06      	add	r2, sp, #24
 8005776:	e9cd a202 	strd	sl, r2, [sp, #8]
 800577a:	e9cd 3500 	strd	r3, r5, [sp]
 800577e:	4622      	mov	r2, r4
 8005780:	463b      	mov	r3, r7
 8005782:	f000 fce5 	bl	8006150 <_dtoa_r>
 8005786:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800578a:	4606      	mov	r6, r0
 800578c:	d102      	bne.n	8005794 <__cvt+0x60>
 800578e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005790:	07db      	lsls	r3, r3, #31
 8005792:	d522      	bpl.n	80057da <__cvt+0xa6>
 8005794:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005798:	eb06 0905 	add.w	r9, r6, r5
 800579c:	d110      	bne.n	80057c0 <__cvt+0x8c>
 800579e:	7833      	ldrb	r3, [r6, #0]
 80057a0:	2b30      	cmp	r3, #48	; 0x30
 80057a2:	d10a      	bne.n	80057ba <__cvt+0x86>
 80057a4:	2200      	movs	r2, #0
 80057a6:	2300      	movs	r3, #0
 80057a8:	4620      	mov	r0, r4
 80057aa:	4639      	mov	r1, r7
 80057ac:	f7fb f8fc 	bl	80009a8 <__aeabi_dcmpeq>
 80057b0:	b918      	cbnz	r0, 80057ba <__cvt+0x86>
 80057b2:	f1c5 0501 	rsb	r5, r5, #1
 80057b6:	f8ca 5000 	str.w	r5, [sl]
 80057ba:	f8da 3000 	ldr.w	r3, [sl]
 80057be:	4499      	add	r9, r3
 80057c0:	2200      	movs	r2, #0
 80057c2:	2300      	movs	r3, #0
 80057c4:	4620      	mov	r0, r4
 80057c6:	4639      	mov	r1, r7
 80057c8:	f7fb f8ee 	bl	80009a8 <__aeabi_dcmpeq>
 80057cc:	b108      	cbz	r0, 80057d2 <__cvt+0x9e>
 80057ce:	f8cd 901c 	str.w	r9, [sp, #28]
 80057d2:	2230      	movs	r2, #48	; 0x30
 80057d4:	9b07      	ldr	r3, [sp, #28]
 80057d6:	454b      	cmp	r3, r9
 80057d8:	d307      	bcc.n	80057ea <__cvt+0xb6>
 80057da:	4630      	mov	r0, r6
 80057dc:	9b07      	ldr	r3, [sp, #28]
 80057de:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80057e0:	1b9b      	subs	r3, r3, r6
 80057e2:	6013      	str	r3, [r2, #0]
 80057e4:	b008      	add	sp, #32
 80057e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80057ea:	1c59      	adds	r1, r3, #1
 80057ec:	9107      	str	r1, [sp, #28]
 80057ee:	701a      	strb	r2, [r3, #0]
 80057f0:	e7f0      	b.n	80057d4 <__cvt+0xa0>

080057f2 <__exponent>:
 80057f2:	4603      	mov	r3, r0
 80057f4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80057f6:	2900      	cmp	r1, #0
 80057f8:	f803 2b02 	strb.w	r2, [r3], #2
 80057fc:	bfb6      	itet	lt
 80057fe:	222d      	movlt	r2, #45	; 0x2d
 8005800:	222b      	movge	r2, #43	; 0x2b
 8005802:	4249      	neglt	r1, r1
 8005804:	2909      	cmp	r1, #9
 8005806:	7042      	strb	r2, [r0, #1]
 8005808:	dd2b      	ble.n	8005862 <__exponent+0x70>
 800580a:	f10d 0407 	add.w	r4, sp, #7
 800580e:	46a4      	mov	ip, r4
 8005810:	270a      	movs	r7, #10
 8005812:	fb91 f6f7 	sdiv	r6, r1, r7
 8005816:	460a      	mov	r2, r1
 8005818:	46a6      	mov	lr, r4
 800581a:	fb07 1516 	mls	r5, r7, r6, r1
 800581e:	2a63      	cmp	r2, #99	; 0x63
 8005820:	f105 0530 	add.w	r5, r5, #48	; 0x30
 8005824:	4631      	mov	r1, r6
 8005826:	f104 34ff 	add.w	r4, r4, #4294967295
 800582a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800582e:	dcf0      	bgt.n	8005812 <__exponent+0x20>
 8005830:	3130      	adds	r1, #48	; 0x30
 8005832:	f1ae 0502 	sub.w	r5, lr, #2
 8005836:	f804 1c01 	strb.w	r1, [r4, #-1]
 800583a:	4629      	mov	r1, r5
 800583c:	1c44      	adds	r4, r0, #1
 800583e:	4561      	cmp	r1, ip
 8005840:	d30a      	bcc.n	8005858 <__exponent+0x66>
 8005842:	f10d 0209 	add.w	r2, sp, #9
 8005846:	eba2 020e 	sub.w	r2, r2, lr
 800584a:	4565      	cmp	r5, ip
 800584c:	bf88      	it	hi
 800584e:	2200      	movhi	r2, #0
 8005850:	4413      	add	r3, r2
 8005852:	1a18      	subs	r0, r3, r0
 8005854:	b003      	add	sp, #12
 8005856:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005858:	f811 2b01 	ldrb.w	r2, [r1], #1
 800585c:	f804 2f01 	strb.w	r2, [r4, #1]!
 8005860:	e7ed      	b.n	800583e <__exponent+0x4c>
 8005862:	2330      	movs	r3, #48	; 0x30
 8005864:	3130      	adds	r1, #48	; 0x30
 8005866:	7083      	strb	r3, [r0, #2]
 8005868:	70c1      	strb	r1, [r0, #3]
 800586a:	1d03      	adds	r3, r0, #4
 800586c:	e7f1      	b.n	8005852 <__exponent+0x60>
	...

08005870 <_printf_float>:
 8005870:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005874:	b091      	sub	sp, #68	; 0x44
 8005876:	460c      	mov	r4, r1
 8005878:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 800587c:	4616      	mov	r6, r2
 800587e:	461f      	mov	r7, r3
 8005880:	4605      	mov	r5, r0
 8005882:	f001 fa53 	bl	8006d2c <_localeconv_r>
 8005886:	6803      	ldr	r3, [r0, #0]
 8005888:	4618      	mov	r0, r3
 800588a:	9309      	str	r3, [sp, #36]	; 0x24
 800588c:	f7fa fc60 	bl	8000150 <strlen>
 8005890:	2300      	movs	r3, #0
 8005892:	930e      	str	r3, [sp, #56]	; 0x38
 8005894:	f8d8 3000 	ldr.w	r3, [r8]
 8005898:	900a      	str	r0, [sp, #40]	; 0x28
 800589a:	3307      	adds	r3, #7
 800589c:	f023 0307 	bic.w	r3, r3, #7
 80058a0:	f103 0208 	add.w	r2, r3, #8
 80058a4:	f894 9018 	ldrb.w	r9, [r4, #24]
 80058a8:	f8d4 b000 	ldr.w	fp, [r4]
 80058ac:	f8c8 2000 	str.w	r2, [r8]
 80058b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058b4:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80058b8:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 80058bc:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 80058c0:	930b      	str	r3, [sp, #44]	; 0x2c
 80058c2:	f04f 32ff 	mov.w	r2, #4294967295
 80058c6:	4640      	mov	r0, r8
 80058c8:	4b9c      	ldr	r3, [pc, #624]	; (8005b3c <_printf_float+0x2cc>)
 80058ca:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80058cc:	f7fb f89e 	bl	8000a0c <__aeabi_dcmpun>
 80058d0:	bb70      	cbnz	r0, 8005930 <_printf_float+0xc0>
 80058d2:	f04f 32ff 	mov.w	r2, #4294967295
 80058d6:	4640      	mov	r0, r8
 80058d8:	4b98      	ldr	r3, [pc, #608]	; (8005b3c <_printf_float+0x2cc>)
 80058da:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80058dc:	f7fb f878 	bl	80009d0 <__aeabi_dcmple>
 80058e0:	bb30      	cbnz	r0, 8005930 <_printf_float+0xc0>
 80058e2:	2200      	movs	r2, #0
 80058e4:	2300      	movs	r3, #0
 80058e6:	4640      	mov	r0, r8
 80058e8:	4651      	mov	r1, sl
 80058ea:	f7fb f867 	bl	80009bc <__aeabi_dcmplt>
 80058ee:	b110      	cbz	r0, 80058f6 <_printf_float+0x86>
 80058f0:	232d      	movs	r3, #45	; 0x2d
 80058f2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80058f6:	4b92      	ldr	r3, [pc, #584]	; (8005b40 <_printf_float+0x2d0>)
 80058f8:	4892      	ldr	r0, [pc, #584]	; (8005b44 <_printf_float+0x2d4>)
 80058fa:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 80058fe:	bf94      	ite	ls
 8005900:	4698      	movls	r8, r3
 8005902:	4680      	movhi	r8, r0
 8005904:	2303      	movs	r3, #3
 8005906:	f04f 0a00 	mov.w	sl, #0
 800590a:	6123      	str	r3, [r4, #16]
 800590c:	f02b 0304 	bic.w	r3, fp, #4
 8005910:	6023      	str	r3, [r4, #0]
 8005912:	4633      	mov	r3, r6
 8005914:	4621      	mov	r1, r4
 8005916:	4628      	mov	r0, r5
 8005918:	9700      	str	r7, [sp, #0]
 800591a:	aa0f      	add	r2, sp, #60	; 0x3c
 800591c:	f000 f9d4 	bl	8005cc8 <_printf_common>
 8005920:	3001      	adds	r0, #1
 8005922:	f040 8090 	bne.w	8005a46 <_printf_float+0x1d6>
 8005926:	f04f 30ff 	mov.w	r0, #4294967295
 800592a:	b011      	add	sp, #68	; 0x44
 800592c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005930:	4642      	mov	r2, r8
 8005932:	4653      	mov	r3, sl
 8005934:	4640      	mov	r0, r8
 8005936:	4651      	mov	r1, sl
 8005938:	f7fb f868 	bl	8000a0c <__aeabi_dcmpun>
 800593c:	b148      	cbz	r0, 8005952 <_printf_float+0xe2>
 800593e:	f1ba 0f00 	cmp.w	sl, #0
 8005942:	bfb8      	it	lt
 8005944:	232d      	movlt	r3, #45	; 0x2d
 8005946:	4880      	ldr	r0, [pc, #512]	; (8005b48 <_printf_float+0x2d8>)
 8005948:	bfb8      	it	lt
 800594a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800594e:	4b7f      	ldr	r3, [pc, #508]	; (8005b4c <_printf_float+0x2dc>)
 8005950:	e7d3      	b.n	80058fa <_printf_float+0x8a>
 8005952:	6863      	ldr	r3, [r4, #4]
 8005954:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8005958:	1c5a      	adds	r2, r3, #1
 800595a:	d142      	bne.n	80059e2 <_printf_float+0x172>
 800595c:	2306      	movs	r3, #6
 800595e:	6063      	str	r3, [r4, #4]
 8005960:	2200      	movs	r2, #0
 8005962:	9206      	str	r2, [sp, #24]
 8005964:	aa0e      	add	r2, sp, #56	; 0x38
 8005966:	e9cd 9204 	strd	r9, r2, [sp, #16]
 800596a:	aa0d      	add	r2, sp, #52	; 0x34
 800596c:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8005970:	9203      	str	r2, [sp, #12]
 8005972:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8005976:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800597a:	6023      	str	r3, [r4, #0]
 800597c:	6863      	ldr	r3, [r4, #4]
 800597e:	4642      	mov	r2, r8
 8005980:	9300      	str	r3, [sp, #0]
 8005982:	4628      	mov	r0, r5
 8005984:	4653      	mov	r3, sl
 8005986:	910b      	str	r1, [sp, #44]	; 0x2c
 8005988:	f7ff fed4 	bl	8005734 <__cvt>
 800598c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800598e:	4680      	mov	r8, r0
 8005990:	2947      	cmp	r1, #71	; 0x47
 8005992:	990d      	ldr	r1, [sp, #52]	; 0x34
 8005994:	d108      	bne.n	80059a8 <_printf_float+0x138>
 8005996:	1cc8      	adds	r0, r1, #3
 8005998:	db02      	blt.n	80059a0 <_printf_float+0x130>
 800599a:	6863      	ldr	r3, [r4, #4]
 800599c:	4299      	cmp	r1, r3
 800599e:	dd40      	ble.n	8005a22 <_printf_float+0x1b2>
 80059a0:	f1a9 0902 	sub.w	r9, r9, #2
 80059a4:	fa5f f989 	uxtb.w	r9, r9
 80059a8:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80059ac:	d81f      	bhi.n	80059ee <_printf_float+0x17e>
 80059ae:	464a      	mov	r2, r9
 80059b0:	3901      	subs	r1, #1
 80059b2:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80059b6:	910d      	str	r1, [sp, #52]	; 0x34
 80059b8:	f7ff ff1b 	bl	80057f2 <__exponent>
 80059bc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80059be:	4682      	mov	sl, r0
 80059c0:	1813      	adds	r3, r2, r0
 80059c2:	2a01      	cmp	r2, #1
 80059c4:	6123      	str	r3, [r4, #16]
 80059c6:	dc02      	bgt.n	80059ce <_printf_float+0x15e>
 80059c8:	6822      	ldr	r2, [r4, #0]
 80059ca:	07d2      	lsls	r2, r2, #31
 80059cc:	d501      	bpl.n	80059d2 <_printf_float+0x162>
 80059ce:	3301      	adds	r3, #1
 80059d0:	6123      	str	r3, [r4, #16]
 80059d2:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d09b      	beq.n	8005912 <_printf_float+0xa2>
 80059da:	232d      	movs	r3, #45	; 0x2d
 80059dc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80059e0:	e797      	b.n	8005912 <_printf_float+0xa2>
 80059e2:	2947      	cmp	r1, #71	; 0x47
 80059e4:	d1bc      	bne.n	8005960 <_printf_float+0xf0>
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d1ba      	bne.n	8005960 <_printf_float+0xf0>
 80059ea:	2301      	movs	r3, #1
 80059ec:	e7b7      	b.n	800595e <_printf_float+0xee>
 80059ee:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 80059f2:	d118      	bne.n	8005a26 <_printf_float+0x1b6>
 80059f4:	2900      	cmp	r1, #0
 80059f6:	6863      	ldr	r3, [r4, #4]
 80059f8:	dd0b      	ble.n	8005a12 <_printf_float+0x1a2>
 80059fa:	6121      	str	r1, [r4, #16]
 80059fc:	b913      	cbnz	r3, 8005a04 <_printf_float+0x194>
 80059fe:	6822      	ldr	r2, [r4, #0]
 8005a00:	07d0      	lsls	r0, r2, #31
 8005a02:	d502      	bpl.n	8005a0a <_printf_float+0x19a>
 8005a04:	3301      	adds	r3, #1
 8005a06:	440b      	add	r3, r1
 8005a08:	6123      	str	r3, [r4, #16]
 8005a0a:	f04f 0a00 	mov.w	sl, #0
 8005a0e:	65a1      	str	r1, [r4, #88]	; 0x58
 8005a10:	e7df      	b.n	80059d2 <_printf_float+0x162>
 8005a12:	b913      	cbnz	r3, 8005a1a <_printf_float+0x1aa>
 8005a14:	6822      	ldr	r2, [r4, #0]
 8005a16:	07d2      	lsls	r2, r2, #31
 8005a18:	d501      	bpl.n	8005a1e <_printf_float+0x1ae>
 8005a1a:	3302      	adds	r3, #2
 8005a1c:	e7f4      	b.n	8005a08 <_printf_float+0x198>
 8005a1e:	2301      	movs	r3, #1
 8005a20:	e7f2      	b.n	8005a08 <_printf_float+0x198>
 8005a22:	f04f 0967 	mov.w	r9, #103	; 0x67
 8005a26:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005a28:	4299      	cmp	r1, r3
 8005a2a:	db05      	blt.n	8005a38 <_printf_float+0x1c8>
 8005a2c:	6823      	ldr	r3, [r4, #0]
 8005a2e:	6121      	str	r1, [r4, #16]
 8005a30:	07d8      	lsls	r0, r3, #31
 8005a32:	d5ea      	bpl.n	8005a0a <_printf_float+0x19a>
 8005a34:	1c4b      	adds	r3, r1, #1
 8005a36:	e7e7      	b.n	8005a08 <_printf_float+0x198>
 8005a38:	2900      	cmp	r1, #0
 8005a3a:	bfcc      	ite	gt
 8005a3c:	2201      	movgt	r2, #1
 8005a3e:	f1c1 0202 	rsble	r2, r1, #2
 8005a42:	4413      	add	r3, r2
 8005a44:	e7e0      	b.n	8005a08 <_printf_float+0x198>
 8005a46:	6823      	ldr	r3, [r4, #0]
 8005a48:	055a      	lsls	r2, r3, #21
 8005a4a:	d407      	bmi.n	8005a5c <_printf_float+0x1ec>
 8005a4c:	6923      	ldr	r3, [r4, #16]
 8005a4e:	4642      	mov	r2, r8
 8005a50:	4631      	mov	r1, r6
 8005a52:	4628      	mov	r0, r5
 8005a54:	47b8      	blx	r7
 8005a56:	3001      	adds	r0, #1
 8005a58:	d12b      	bne.n	8005ab2 <_printf_float+0x242>
 8005a5a:	e764      	b.n	8005926 <_printf_float+0xb6>
 8005a5c:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8005a60:	f240 80dd 	bls.w	8005c1e <_printf_float+0x3ae>
 8005a64:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005a68:	2200      	movs	r2, #0
 8005a6a:	2300      	movs	r3, #0
 8005a6c:	f7fa ff9c 	bl	80009a8 <__aeabi_dcmpeq>
 8005a70:	2800      	cmp	r0, #0
 8005a72:	d033      	beq.n	8005adc <_printf_float+0x26c>
 8005a74:	2301      	movs	r3, #1
 8005a76:	4631      	mov	r1, r6
 8005a78:	4628      	mov	r0, r5
 8005a7a:	4a35      	ldr	r2, [pc, #212]	; (8005b50 <_printf_float+0x2e0>)
 8005a7c:	47b8      	blx	r7
 8005a7e:	3001      	adds	r0, #1
 8005a80:	f43f af51 	beq.w	8005926 <_printf_float+0xb6>
 8005a84:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005a88:	429a      	cmp	r2, r3
 8005a8a:	db02      	blt.n	8005a92 <_printf_float+0x222>
 8005a8c:	6823      	ldr	r3, [r4, #0]
 8005a8e:	07d8      	lsls	r0, r3, #31
 8005a90:	d50f      	bpl.n	8005ab2 <_printf_float+0x242>
 8005a92:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005a96:	4631      	mov	r1, r6
 8005a98:	4628      	mov	r0, r5
 8005a9a:	47b8      	blx	r7
 8005a9c:	3001      	adds	r0, #1
 8005a9e:	f43f af42 	beq.w	8005926 <_printf_float+0xb6>
 8005aa2:	f04f 0800 	mov.w	r8, #0
 8005aa6:	f104 091a 	add.w	r9, r4, #26
 8005aaa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005aac:	3b01      	subs	r3, #1
 8005aae:	4543      	cmp	r3, r8
 8005ab0:	dc09      	bgt.n	8005ac6 <_printf_float+0x256>
 8005ab2:	6823      	ldr	r3, [r4, #0]
 8005ab4:	079b      	lsls	r3, r3, #30
 8005ab6:	f100 8102 	bmi.w	8005cbe <_printf_float+0x44e>
 8005aba:	68e0      	ldr	r0, [r4, #12]
 8005abc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005abe:	4298      	cmp	r0, r3
 8005ac0:	bfb8      	it	lt
 8005ac2:	4618      	movlt	r0, r3
 8005ac4:	e731      	b.n	800592a <_printf_float+0xba>
 8005ac6:	2301      	movs	r3, #1
 8005ac8:	464a      	mov	r2, r9
 8005aca:	4631      	mov	r1, r6
 8005acc:	4628      	mov	r0, r5
 8005ace:	47b8      	blx	r7
 8005ad0:	3001      	adds	r0, #1
 8005ad2:	f43f af28 	beq.w	8005926 <_printf_float+0xb6>
 8005ad6:	f108 0801 	add.w	r8, r8, #1
 8005ada:	e7e6      	b.n	8005aaa <_printf_float+0x23a>
 8005adc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	dc38      	bgt.n	8005b54 <_printf_float+0x2e4>
 8005ae2:	2301      	movs	r3, #1
 8005ae4:	4631      	mov	r1, r6
 8005ae6:	4628      	mov	r0, r5
 8005ae8:	4a19      	ldr	r2, [pc, #100]	; (8005b50 <_printf_float+0x2e0>)
 8005aea:	47b8      	blx	r7
 8005aec:	3001      	adds	r0, #1
 8005aee:	f43f af1a 	beq.w	8005926 <_printf_float+0xb6>
 8005af2:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005af6:	4313      	orrs	r3, r2
 8005af8:	d102      	bne.n	8005b00 <_printf_float+0x290>
 8005afa:	6823      	ldr	r3, [r4, #0]
 8005afc:	07d9      	lsls	r1, r3, #31
 8005afe:	d5d8      	bpl.n	8005ab2 <_printf_float+0x242>
 8005b00:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005b04:	4631      	mov	r1, r6
 8005b06:	4628      	mov	r0, r5
 8005b08:	47b8      	blx	r7
 8005b0a:	3001      	adds	r0, #1
 8005b0c:	f43f af0b 	beq.w	8005926 <_printf_float+0xb6>
 8005b10:	f04f 0900 	mov.w	r9, #0
 8005b14:	f104 0a1a 	add.w	sl, r4, #26
 8005b18:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005b1a:	425b      	negs	r3, r3
 8005b1c:	454b      	cmp	r3, r9
 8005b1e:	dc01      	bgt.n	8005b24 <_printf_float+0x2b4>
 8005b20:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005b22:	e794      	b.n	8005a4e <_printf_float+0x1de>
 8005b24:	2301      	movs	r3, #1
 8005b26:	4652      	mov	r2, sl
 8005b28:	4631      	mov	r1, r6
 8005b2a:	4628      	mov	r0, r5
 8005b2c:	47b8      	blx	r7
 8005b2e:	3001      	adds	r0, #1
 8005b30:	f43f aef9 	beq.w	8005926 <_printf_float+0xb6>
 8005b34:	f109 0901 	add.w	r9, r9, #1
 8005b38:	e7ee      	b.n	8005b18 <_printf_float+0x2a8>
 8005b3a:	bf00      	nop
 8005b3c:	7fefffff 	.word	0x7fefffff
 8005b40:	08008c68 	.word	0x08008c68
 8005b44:	08008c6c 	.word	0x08008c6c
 8005b48:	08008c74 	.word	0x08008c74
 8005b4c:	08008c70 	.word	0x08008c70
 8005b50:	08008c78 	.word	0x08008c78
 8005b54:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005b56:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005b58:	429a      	cmp	r2, r3
 8005b5a:	bfa8      	it	ge
 8005b5c:	461a      	movge	r2, r3
 8005b5e:	2a00      	cmp	r2, #0
 8005b60:	4691      	mov	r9, r2
 8005b62:	dc37      	bgt.n	8005bd4 <_printf_float+0x364>
 8005b64:	f04f 0b00 	mov.w	fp, #0
 8005b68:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005b6c:	f104 021a 	add.w	r2, r4, #26
 8005b70:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8005b74:	ebaa 0309 	sub.w	r3, sl, r9
 8005b78:	455b      	cmp	r3, fp
 8005b7a:	dc33      	bgt.n	8005be4 <_printf_float+0x374>
 8005b7c:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005b80:	429a      	cmp	r2, r3
 8005b82:	db3b      	blt.n	8005bfc <_printf_float+0x38c>
 8005b84:	6823      	ldr	r3, [r4, #0]
 8005b86:	07da      	lsls	r2, r3, #31
 8005b88:	d438      	bmi.n	8005bfc <_printf_float+0x38c>
 8005b8a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005b8c:	990d      	ldr	r1, [sp, #52]	; 0x34
 8005b8e:	eba3 020a 	sub.w	r2, r3, sl
 8005b92:	eba3 0901 	sub.w	r9, r3, r1
 8005b96:	4591      	cmp	r9, r2
 8005b98:	bfa8      	it	ge
 8005b9a:	4691      	movge	r9, r2
 8005b9c:	f1b9 0f00 	cmp.w	r9, #0
 8005ba0:	dc34      	bgt.n	8005c0c <_printf_float+0x39c>
 8005ba2:	f04f 0800 	mov.w	r8, #0
 8005ba6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005baa:	f104 0a1a 	add.w	sl, r4, #26
 8005bae:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005bb2:	1a9b      	subs	r3, r3, r2
 8005bb4:	eba3 0309 	sub.w	r3, r3, r9
 8005bb8:	4543      	cmp	r3, r8
 8005bba:	f77f af7a 	ble.w	8005ab2 <_printf_float+0x242>
 8005bbe:	2301      	movs	r3, #1
 8005bc0:	4652      	mov	r2, sl
 8005bc2:	4631      	mov	r1, r6
 8005bc4:	4628      	mov	r0, r5
 8005bc6:	47b8      	blx	r7
 8005bc8:	3001      	adds	r0, #1
 8005bca:	f43f aeac 	beq.w	8005926 <_printf_float+0xb6>
 8005bce:	f108 0801 	add.w	r8, r8, #1
 8005bd2:	e7ec      	b.n	8005bae <_printf_float+0x33e>
 8005bd4:	4613      	mov	r3, r2
 8005bd6:	4631      	mov	r1, r6
 8005bd8:	4642      	mov	r2, r8
 8005bda:	4628      	mov	r0, r5
 8005bdc:	47b8      	blx	r7
 8005bde:	3001      	adds	r0, #1
 8005be0:	d1c0      	bne.n	8005b64 <_printf_float+0x2f4>
 8005be2:	e6a0      	b.n	8005926 <_printf_float+0xb6>
 8005be4:	2301      	movs	r3, #1
 8005be6:	4631      	mov	r1, r6
 8005be8:	4628      	mov	r0, r5
 8005bea:	920b      	str	r2, [sp, #44]	; 0x2c
 8005bec:	47b8      	blx	r7
 8005bee:	3001      	adds	r0, #1
 8005bf0:	f43f ae99 	beq.w	8005926 <_printf_float+0xb6>
 8005bf4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005bf6:	f10b 0b01 	add.w	fp, fp, #1
 8005bfa:	e7b9      	b.n	8005b70 <_printf_float+0x300>
 8005bfc:	4631      	mov	r1, r6
 8005bfe:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005c02:	4628      	mov	r0, r5
 8005c04:	47b8      	blx	r7
 8005c06:	3001      	adds	r0, #1
 8005c08:	d1bf      	bne.n	8005b8a <_printf_float+0x31a>
 8005c0a:	e68c      	b.n	8005926 <_printf_float+0xb6>
 8005c0c:	464b      	mov	r3, r9
 8005c0e:	4631      	mov	r1, r6
 8005c10:	4628      	mov	r0, r5
 8005c12:	eb08 020a 	add.w	r2, r8, sl
 8005c16:	47b8      	blx	r7
 8005c18:	3001      	adds	r0, #1
 8005c1a:	d1c2      	bne.n	8005ba2 <_printf_float+0x332>
 8005c1c:	e683      	b.n	8005926 <_printf_float+0xb6>
 8005c1e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005c20:	2a01      	cmp	r2, #1
 8005c22:	dc01      	bgt.n	8005c28 <_printf_float+0x3b8>
 8005c24:	07db      	lsls	r3, r3, #31
 8005c26:	d537      	bpl.n	8005c98 <_printf_float+0x428>
 8005c28:	2301      	movs	r3, #1
 8005c2a:	4642      	mov	r2, r8
 8005c2c:	4631      	mov	r1, r6
 8005c2e:	4628      	mov	r0, r5
 8005c30:	47b8      	blx	r7
 8005c32:	3001      	adds	r0, #1
 8005c34:	f43f ae77 	beq.w	8005926 <_printf_float+0xb6>
 8005c38:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005c3c:	4631      	mov	r1, r6
 8005c3e:	4628      	mov	r0, r5
 8005c40:	47b8      	blx	r7
 8005c42:	3001      	adds	r0, #1
 8005c44:	f43f ae6f 	beq.w	8005926 <_printf_float+0xb6>
 8005c48:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005c4c:	2200      	movs	r2, #0
 8005c4e:	2300      	movs	r3, #0
 8005c50:	f7fa feaa 	bl	80009a8 <__aeabi_dcmpeq>
 8005c54:	b9d8      	cbnz	r0, 8005c8e <_printf_float+0x41e>
 8005c56:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005c58:	f108 0201 	add.w	r2, r8, #1
 8005c5c:	3b01      	subs	r3, #1
 8005c5e:	4631      	mov	r1, r6
 8005c60:	4628      	mov	r0, r5
 8005c62:	47b8      	blx	r7
 8005c64:	3001      	adds	r0, #1
 8005c66:	d10e      	bne.n	8005c86 <_printf_float+0x416>
 8005c68:	e65d      	b.n	8005926 <_printf_float+0xb6>
 8005c6a:	2301      	movs	r3, #1
 8005c6c:	464a      	mov	r2, r9
 8005c6e:	4631      	mov	r1, r6
 8005c70:	4628      	mov	r0, r5
 8005c72:	47b8      	blx	r7
 8005c74:	3001      	adds	r0, #1
 8005c76:	f43f ae56 	beq.w	8005926 <_printf_float+0xb6>
 8005c7a:	f108 0801 	add.w	r8, r8, #1
 8005c7e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005c80:	3b01      	subs	r3, #1
 8005c82:	4543      	cmp	r3, r8
 8005c84:	dcf1      	bgt.n	8005c6a <_printf_float+0x3fa>
 8005c86:	4653      	mov	r3, sl
 8005c88:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005c8c:	e6e0      	b.n	8005a50 <_printf_float+0x1e0>
 8005c8e:	f04f 0800 	mov.w	r8, #0
 8005c92:	f104 091a 	add.w	r9, r4, #26
 8005c96:	e7f2      	b.n	8005c7e <_printf_float+0x40e>
 8005c98:	2301      	movs	r3, #1
 8005c9a:	4642      	mov	r2, r8
 8005c9c:	e7df      	b.n	8005c5e <_printf_float+0x3ee>
 8005c9e:	2301      	movs	r3, #1
 8005ca0:	464a      	mov	r2, r9
 8005ca2:	4631      	mov	r1, r6
 8005ca4:	4628      	mov	r0, r5
 8005ca6:	47b8      	blx	r7
 8005ca8:	3001      	adds	r0, #1
 8005caa:	f43f ae3c 	beq.w	8005926 <_printf_float+0xb6>
 8005cae:	f108 0801 	add.w	r8, r8, #1
 8005cb2:	68e3      	ldr	r3, [r4, #12]
 8005cb4:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8005cb6:	1a5b      	subs	r3, r3, r1
 8005cb8:	4543      	cmp	r3, r8
 8005cba:	dcf0      	bgt.n	8005c9e <_printf_float+0x42e>
 8005cbc:	e6fd      	b.n	8005aba <_printf_float+0x24a>
 8005cbe:	f04f 0800 	mov.w	r8, #0
 8005cc2:	f104 0919 	add.w	r9, r4, #25
 8005cc6:	e7f4      	b.n	8005cb2 <_printf_float+0x442>

08005cc8 <_printf_common>:
 8005cc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005ccc:	4616      	mov	r6, r2
 8005cce:	4699      	mov	r9, r3
 8005cd0:	688a      	ldr	r2, [r1, #8]
 8005cd2:	690b      	ldr	r3, [r1, #16]
 8005cd4:	4607      	mov	r7, r0
 8005cd6:	4293      	cmp	r3, r2
 8005cd8:	bfb8      	it	lt
 8005cda:	4613      	movlt	r3, r2
 8005cdc:	6033      	str	r3, [r6, #0]
 8005cde:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005ce2:	460c      	mov	r4, r1
 8005ce4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005ce8:	b10a      	cbz	r2, 8005cee <_printf_common+0x26>
 8005cea:	3301      	adds	r3, #1
 8005cec:	6033      	str	r3, [r6, #0]
 8005cee:	6823      	ldr	r3, [r4, #0]
 8005cf0:	0699      	lsls	r1, r3, #26
 8005cf2:	bf42      	ittt	mi
 8005cf4:	6833      	ldrmi	r3, [r6, #0]
 8005cf6:	3302      	addmi	r3, #2
 8005cf8:	6033      	strmi	r3, [r6, #0]
 8005cfa:	6825      	ldr	r5, [r4, #0]
 8005cfc:	f015 0506 	ands.w	r5, r5, #6
 8005d00:	d106      	bne.n	8005d10 <_printf_common+0x48>
 8005d02:	f104 0a19 	add.w	sl, r4, #25
 8005d06:	68e3      	ldr	r3, [r4, #12]
 8005d08:	6832      	ldr	r2, [r6, #0]
 8005d0a:	1a9b      	subs	r3, r3, r2
 8005d0c:	42ab      	cmp	r3, r5
 8005d0e:	dc28      	bgt.n	8005d62 <_printf_common+0x9a>
 8005d10:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005d14:	1e13      	subs	r3, r2, #0
 8005d16:	6822      	ldr	r2, [r4, #0]
 8005d18:	bf18      	it	ne
 8005d1a:	2301      	movne	r3, #1
 8005d1c:	0692      	lsls	r2, r2, #26
 8005d1e:	d42d      	bmi.n	8005d7c <_printf_common+0xb4>
 8005d20:	4649      	mov	r1, r9
 8005d22:	4638      	mov	r0, r7
 8005d24:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005d28:	47c0      	blx	r8
 8005d2a:	3001      	adds	r0, #1
 8005d2c:	d020      	beq.n	8005d70 <_printf_common+0xa8>
 8005d2e:	6823      	ldr	r3, [r4, #0]
 8005d30:	68e5      	ldr	r5, [r4, #12]
 8005d32:	f003 0306 	and.w	r3, r3, #6
 8005d36:	2b04      	cmp	r3, #4
 8005d38:	bf18      	it	ne
 8005d3a:	2500      	movne	r5, #0
 8005d3c:	6832      	ldr	r2, [r6, #0]
 8005d3e:	f04f 0600 	mov.w	r6, #0
 8005d42:	68a3      	ldr	r3, [r4, #8]
 8005d44:	bf08      	it	eq
 8005d46:	1aad      	subeq	r5, r5, r2
 8005d48:	6922      	ldr	r2, [r4, #16]
 8005d4a:	bf08      	it	eq
 8005d4c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005d50:	4293      	cmp	r3, r2
 8005d52:	bfc4      	itt	gt
 8005d54:	1a9b      	subgt	r3, r3, r2
 8005d56:	18ed      	addgt	r5, r5, r3
 8005d58:	341a      	adds	r4, #26
 8005d5a:	42b5      	cmp	r5, r6
 8005d5c:	d11a      	bne.n	8005d94 <_printf_common+0xcc>
 8005d5e:	2000      	movs	r0, #0
 8005d60:	e008      	b.n	8005d74 <_printf_common+0xac>
 8005d62:	2301      	movs	r3, #1
 8005d64:	4652      	mov	r2, sl
 8005d66:	4649      	mov	r1, r9
 8005d68:	4638      	mov	r0, r7
 8005d6a:	47c0      	blx	r8
 8005d6c:	3001      	adds	r0, #1
 8005d6e:	d103      	bne.n	8005d78 <_printf_common+0xb0>
 8005d70:	f04f 30ff 	mov.w	r0, #4294967295
 8005d74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005d78:	3501      	adds	r5, #1
 8005d7a:	e7c4      	b.n	8005d06 <_printf_common+0x3e>
 8005d7c:	2030      	movs	r0, #48	; 0x30
 8005d7e:	18e1      	adds	r1, r4, r3
 8005d80:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005d84:	1c5a      	adds	r2, r3, #1
 8005d86:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005d8a:	4422      	add	r2, r4
 8005d8c:	3302      	adds	r3, #2
 8005d8e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005d92:	e7c5      	b.n	8005d20 <_printf_common+0x58>
 8005d94:	2301      	movs	r3, #1
 8005d96:	4622      	mov	r2, r4
 8005d98:	4649      	mov	r1, r9
 8005d9a:	4638      	mov	r0, r7
 8005d9c:	47c0      	blx	r8
 8005d9e:	3001      	adds	r0, #1
 8005da0:	d0e6      	beq.n	8005d70 <_printf_common+0xa8>
 8005da2:	3601      	adds	r6, #1
 8005da4:	e7d9      	b.n	8005d5a <_printf_common+0x92>
	...

08005da8 <_printf_i>:
 8005da8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005dac:	7e0f      	ldrb	r7, [r1, #24]
 8005dae:	4691      	mov	r9, r2
 8005db0:	2f78      	cmp	r7, #120	; 0x78
 8005db2:	4680      	mov	r8, r0
 8005db4:	460c      	mov	r4, r1
 8005db6:	469a      	mov	sl, r3
 8005db8:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005dba:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005dbe:	d807      	bhi.n	8005dd0 <_printf_i+0x28>
 8005dc0:	2f62      	cmp	r7, #98	; 0x62
 8005dc2:	d80a      	bhi.n	8005dda <_printf_i+0x32>
 8005dc4:	2f00      	cmp	r7, #0
 8005dc6:	f000 80d9 	beq.w	8005f7c <_printf_i+0x1d4>
 8005dca:	2f58      	cmp	r7, #88	; 0x58
 8005dcc:	f000 80a4 	beq.w	8005f18 <_printf_i+0x170>
 8005dd0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005dd4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005dd8:	e03a      	b.n	8005e50 <_printf_i+0xa8>
 8005dda:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005dde:	2b15      	cmp	r3, #21
 8005de0:	d8f6      	bhi.n	8005dd0 <_printf_i+0x28>
 8005de2:	a101      	add	r1, pc, #4	; (adr r1, 8005de8 <_printf_i+0x40>)
 8005de4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005de8:	08005e41 	.word	0x08005e41
 8005dec:	08005e55 	.word	0x08005e55
 8005df0:	08005dd1 	.word	0x08005dd1
 8005df4:	08005dd1 	.word	0x08005dd1
 8005df8:	08005dd1 	.word	0x08005dd1
 8005dfc:	08005dd1 	.word	0x08005dd1
 8005e00:	08005e55 	.word	0x08005e55
 8005e04:	08005dd1 	.word	0x08005dd1
 8005e08:	08005dd1 	.word	0x08005dd1
 8005e0c:	08005dd1 	.word	0x08005dd1
 8005e10:	08005dd1 	.word	0x08005dd1
 8005e14:	08005f63 	.word	0x08005f63
 8005e18:	08005e85 	.word	0x08005e85
 8005e1c:	08005f45 	.word	0x08005f45
 8005e20:	08005dd1 	.word	0x08005dd1
 8005e24:	08005dd1 	.word	0x08005dd1
 8005e28:	08005f85 	.word	0x08005f85
 8005e2c:	08005dd1 	.word	0x08005dd1
 8005e30:	08005e85 	.word	0x08005e85
 8005e34:	08005dd1 	.word	0x08005dd1
 8005e38:	08005dd1 	.word	0x08005dd1
 8005e3c:	08005f4d 	.word	0x08005f4d
 8005e40:	682b      	ldr	r3, [r5, #0]
 8005e42:	1d1a      	adds	r2, r3, #4
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	602a      	str	r2, [r5, #0]
 8005e48:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005e4c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005e50:	2301      	movs	r3, #1
 8005e52:	e0a4      	b.n	8005f9e <_printf_i+0x1f6>
 8005e54:	6820      	ldr	r0, [r4, #0]
 8005e56:	6829      	ldr	r1, [r5, #0]
 8005e58:	0606      	lsls	r6, r0, #24
 8005e5a:	f101 0304 	add.w	r3, r1, #4
 8005e5e:	d50a      	bpl.n	8005e76 <_printf_i+0xce>
 8005e60:	680e      	ldr	r6, [r1, #0]
 8005e62:	602b      	str	r3, [r5, #0]
 8005e64:	2e00      	cmp	r6, #0
 8005e66:	da03      	bge.n	8005e70 <_printf_i+0xc8>
 8005e68:	232d      	movs	r3, #45	; 0x2d
 8005e6a:	4276      	negs	r6, r6
 8005e6c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005e70:	230a      	movs	r3, #10
 8005e72:	485e      	ldr	r0, [pc, #376]	; (8005fec <_printf_i+0x244>)
 8005e74:	e019      	b.n	8005eaa <_printf_i+0x102>
 8005e76:	680e      	ldr	r6, [r1, #0]
 8005e78:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005e7c:	602b      	str	r3, [r5, #0]
 8005e7e:	bf18      	it	ne
 8005e80:	b236      	sxthne	r6, r6
 8005e82:	e7ef      	b.n	8005e64 <_printf_i+0xbc>
 8005e84:	682b      	ldr	r3, [r5, #0]
 8005e86:	6820      	ldr	r0, [r4, #0]
 8005e88:	1d19      	adds	r1, r3, #4
 8005e8a:	6029      	str	r1, [r5, #0]
 8005e8c:	0601      	lsls	r1, r0, #24
 8005e8e:	d501      	bpl.n	8005e94 <_printf_i+0xec>
 8005e90:	681e      	ldr	r6, [r3, #0]
 8005e92:	e002      	b.n	8005e9a <_printf_i+0xf2>
 8005e94:	0646      	lsls	r6, r0, #25
 8005e96:	d5fb      	bpl.n	8005e90 <_printf_i+0xe8>
 8005e98:	881e      	ldrh	r6, [r3, #0]
 8005e9a:	2f6f      	cmp	r7, #111	; 0x6f
 8005e9c:	bf0c      	ite	eq
 8005e9e:	2308      	moveq	r3, #8
 8005ea0:	230a      	movne	r3, #10
 8005ea2:	4852      	ldr	r0, [pc, #328]	; (8005fec <_printf_i+0x244>)
 8005ea4:	2100      	movs	r1, #0
 8005ea6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005eaa:	6865      	ldr	r5, [r4, #4]
 8005eac:	2d00      	cmp	r5, #0
 8005eae:	bfa8      	it	ge
 8005eb0:	6821      	ldrge	r1, [r4, #0]
 8005eb2:	60a5      	str	r5, [r4, #8]
 8005eb4:	bfa4      	itt	ge
 8005eb6:	f021 0104 	bicge.w	r1, r1, #4
 8005eba:	6021      	strge	r1, [r4, #0]
 8005ebc:	b90e      	cbnz	r6, 8005ec2 <_printf_i+0x11a>
 8005ebe:	2d00      	cmp	r5, #0
 8005ec0:	d04d      	beq.n	8005f5e <_printf_i+0x1b6>
 8005ec2:	4615      	mov	r5, r2
 8005ec4:	fbb6 f1f3 	udiv	r1, r6, r3
 8005ec8:	fb03 6711 	mls	r7, r3, r1, r6
 8005ecc:	5dc7      	ldrb	r7, [r0, r7]
 8005ece:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005ed2:	4637      	mov	r7, r6
 8005ed4:	42bb      	cmp	r3, r7
 8005ed6:	460e      	mov	r6, r1
 8005ed8:	d9f4      	bls.n	8005ec4 <_printf_i+0x11c>
 8005eda:	2b08      	cmp	r3, #8
 8005edc:	d10b      	bne.n	8005ef6 <_printf_i+0x14e>
 8005ede:	6823      	ldr	r3, [r4, #0]
 8005ee0:	07de      	lsls	r6, r3, #31
 8005ee2:	d508      	bpl.n	8005ef6 <_printf_i+0x14e>
 8005ee4:	6923      	ldr	r3, [r4, #16]
 8005ee6:	6861      	ldr	r1, [r4, #4]
 8005ee8:	4299      	cmp	r1, r3
 8005eea:	bfde      	ittt	le
 8005eec:	2330      	movle	r3, #48	; 0x30
 8005eee:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005ef2:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005ef6:	1b52      	subs	r2, r2, r5
 8005ef8:	6122      	str	r2, [r4, #16]
 8005efa:	464b      	mov	r3, r9
 8005efc:	4621      	mov	r1, r4
 8005efe:	4640      	mov	r0, r8
 8005f00:	f8cd a000 	str.w	sl, [sp]
 8005f04:	aa03      	add	r2, sp, #12
 8005f06:	f7ff fedf 	bl	8005cc8 <_printf_common>
 8005f0a:	3001      	adds	r0, #1
 8005f0c:	d14c      	bne.n	8005fa8 <_printf_i+0x200>
 8005f0e:	f04f 30ff 	mov.w	r0, #4294967295
 8005f12:	b004      	add	sp, #16
 8005f14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005f18:	4834      	ldr	r0, [pc, #208]	; (8005fec <_printf_i+0x244>)
 8005f1a:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005f1e:	6829      	ldr	r1, [r5, #0]
 8005f20:	6823      	ldr	r3, [r4, #0]
 8005f22:	f851 6b04 	ldr.w	r6, [r1], #4
 8005f26:	6029      	str	r1, [r5, #0]
 8005f28:	061d      	lsls	r5, r3, #24
 8005f2a:	d514      	bpl.n	8005f56 <_printf_i+0x1ae>
 8005f2c:	07df      	lsls	r7, r3, #31
 8005f2e:	bf44      	itt	mi
 8005f30:	f043 0320 	orrmi.w	r3, r3, #32
 8005f34:	6023      	strmi	r3, [r4, #0]
 8005f36:	b91e      	cbnz	r6, 8005f40 <_printf_i+0x198>
 8005f38:	6823      	ldr	r3, [r4, #0]
 8005f3a:	f023 0320 	bic.w	r3, r3, #32
 8005f3e:	6023      	str	r3, [r4, #0]
 8005f40:	2310      	movs	r3, #16
 8005f42:	e7af      	b.n	8005ea4 <_printf_i+0xfc>
 8005f44:	6823      	ldr	r3, [r4, #0]
 8005f46:	f043 0320 	orr.w	r3, r3, #32
 8005f4a:	6023      	str	r3, [r4, #0]
 8005f4c:	2378      	movs	r3, #120	; 0x78
 8005f4e:	4828      	ldr	r0, [pc, #160]	; (8005ff0 <_printf_i+0x248>)
 8005f50:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005f54:	e7e3      	b.n	8005f1e <_printf_i+0x176>
 8005f56:	0659      	lsls	r1, r3, #25
 8005f58:	bf48      	it	mi
 8005f5a:	b2b6      	uxthmi	r6, r6
 8005f5c:	e7e6      	b.n	8005f2c <_printf_i+0x184>
 8005f5e:	4615      	mov	r5, r2
 8005f60:	e7bb      	b.n	8005eda <_printf_i+0x132>
 8005f62:	682b      	ldr	r3, [r5, #0]
 8005f64:	6826      	ldr	r6, [r4, #0]
 8005f66:	1d18      	adds	r0, r3, #4
 8005f68:	6961      	ldr	r1, [r4, #20]
 8005f6a:	6028      	str	r0, [r5, #0]
 8005f6c:	0635      	lsls	r5, r6, #24
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	d501      	bpl.n	8005f76 <_printf_i+0x1ce>
 8005f72:	6019      	str	r1, [r3, #0]
 8005f74:	e002      	b.n	8005f7c <_printf_i+0x1d4>
 8005f76:	0670      	lsls	r0, r6, #25
 8005f78:	d5fb      	bpl.n	8005f72 <_printf_i+0x1ca>
 8005f7a:	8019      	strh	r1, [r3, #0]
 8005f7c:	2300      	movs	r3, #0
 8005f7e:	4615      	mov	r5, r2
 8005f80:	6123      	str	r3, [r4, #16]
 8005f82:	e7ba      	b.n	8005efa <_printf_i+0x152>
 8005f84:	682b      	ldr	r3, [r5, #0]
 8005f86:	2100      	movs	r1, #0
 8005f88:	1d1a      	adds	r2, r3, #4
 8005f8a:	602a      	str	r2, [r5, #0]
 8005f8c:	681d      	ldr	r5, [r3, #0]
 8005f8e:	6862      	ldr	r2, [r4, #4]
 8005f90:	4628      	mov	r0, r5
 8005f92:	f000 fed7 	bl	8006d44 <memchr>
 8005f96:	b108      	cbz	r0, 8005f9c <_printf_i+0x1f4>
 8005f98:	1b40      	subs	r0, r0, r5
 8005f9a:	6060      	str	r0, [r4, #4]
 8005f9c:	6863      	ldr	r3, [r4, #4]
 8005f9e:	6123      	str	r3, [r4, #16]
 8005fa0:	2300      	movs	r3, #0
 8005fa2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005fa6:	e7a8      	b.n	8005efa <_printf_i+0x152>
 8005fa8:	462a      	mov	r2, r5
 8005faa:	4649      	mov	r1, r9
 8005fac:	4640      	mov	r0, r8
 8005fae:	6923      	ldr	r3, [r4, #16]
 8005fb0:	47d0      	blx	sl
 8005fb2:	3001      	adds	r0, #1
 8005fb4:	d0ab      	beq.n	8005f0e <_printf_i+0x166>
 8005fb6:	6823      	ldr	r3, [r4, #0]
 8005fb8:	079b      	lsls	r3, r3, #30
 8005fba:	d413      	bmi.n	8005fe4 <_printf_i+0x23c>
 8005fbc:	68e0      	ldr	r0, [r4, #12]
 8005fbe:	9b03      	ldr	r3, [sp, #12]
 8005fc0:	4298      	cmp	r0, r3
 8005fc2:	bfb8      	it	lt
 8005fc4:	4618      	movlt	r0, r3
 8005fc6:	e7a4      	b.n	8005f12 <_printf_i+0x16a>
 8005fc8:	2301      	movs	r3, #1
 8005fca:	4632      	mov	r2, r6
 8005fcc:	4649      	mov	r1, r9
 8005fce:	4640      	mov	r0, r8
 8005fd0:	47d0      	blx	sl
 8005fd2:	3001      	adds	r0, #1
 8005fd4:	d09b      	beq.n	8005f0e <_printf_i+0x166>
 8005fd6:	3501      	adds	r5, #1
 8005fd8:	68e3      	ldr	r3, [r4, #12]
 8005fda:	9903      	ldr	r1, [sp, #12]
 8005fdc:	1a5b      	subs	r3, r3, r1
 8005fde:	42ab      	cmp	r3, r5
 8005fe0:	dcf2      	bgt.n	8005fc8 <_printf_i+0x220>
 8005fe2:	e7eb      	b.n	8005fbc <_printf_i+0x214>
 8005fe4:	2500      	movs	r5, #0
 8005fe6:	f104 0619 	add.w	r6, r4, #25
 8005fea:	e7f5      	b.n	8005fd8 <_printf_i+0x230>
 8005fec:	08008c7a 	.word	0x08008c7a
 8005ff0:	08008c8b 	.word	0x08008c8b

08005ff4 <siprintf>:
 8005ff4:	b40e      	push	{r1, r2, r3}
 8005ff6:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005ffa:	b500      	push	{lr}
 8005ffc:	b09c      	sub	sp, #112	; 0x70
 8005ffe:	ab1d      	add	r3, sp, #116	; 0x74
 8006000:	9002      	str	r0, [sp, #8]
 8006002:	9006      	str	r0, [sp, #24]
 8006004:	9107      	str	r1, [sp, #28]
 8006006:	9104      	str	r1, [sp, #16]
 8006008:	4808      	ldr	r0, [pc, #32]	; (800602c <siprintf+0x38>)
 800600a:	4909      	ldr	r1, [pc, #36]	; (8006030 <siprintf+0x3c>)
 800600c:	f853 2b04 	ldr.w	r2, [r3], #4
 8006010:	9105      	str	r1, [sp, #20]
 8006012:	6800      	ldr	r0, [r0, #0]
 8006014:	a902      	add	r1, sp, #8
 8006016:	9301      	str	r3, [sp, #4]
 8006018:	f001 fb70 	bl	80076fc <_svfiprintf_r>
 800601c:	2200      	movs	r2, #0
 800601e:	9b02      	ldr	r3, [sp, #8]
 8006020:	701a      	strb	r2, [r3, #0]
 8006022:	b01c      	add	sp, #112	; 0x70
 8006024:	f85d eb04 	ldr.w	lr, [sp], #4
 8006028:	b003      	add	sp, #12
 800602a:	4770      	bx	lr
 800602c:	20000018 	.word	0x20000018
 8006030:	ffff0208 	.word	0xffff0208

08006034 <quorem>:
 8006034:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006038:	6903      	ldr	r3, [r0, #16]
 800603a:	690c      	ldr	r4, [r1, #16]
 800603c:	4607      	mov	r7, r0
 800603e:	42a3      	cmp	r3, r4
 8006040:	f2c0 8082 	blt.w	8006148 <quorem+0x114>
 8006044:	3c01      	subs	r4, #1
 8006046:	f100 0514 	add.w	r5, r0, #20
 800604a:	f101 0814 	add.w	r8, r1, #20
 800604e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006052:	9301      	str	r3, [sp, #4]
 8006054:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006058:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800605c:	3301      	adds	r3, #1
 800605e:	429a      	cmp	r2, r3
 8006060:	fbb2 f6f3 	udiv	r6, r2, r3
 8006064:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8006068:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800606c:	d331      	bcc.n	80060d2 <quorem+0x9e>
 800606e:	f04f 0e00 	mov.w	lr, #0
 8006072:	4640      	mov	r0, r8
 8006074:	46ac      	mov	ip, r5
 8006076:	46f2      	mov	sl, lr
 8006078:	f850 2b04 	ldr.w	r2, [r0], #4
 800607c:	b293      	uxth	r3, r2
 800607e:	fb06 e303 	mla	r3, r6, r3, lr
 8006082:	0c12      	lsrs	r2, r2, #16
 8006084:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8006088:	b29b      	uxth	r3, r3
 800608a:	fb06 e202 	mla	r2, r6, r2, lr
 800608e:	ebaa 0303 	sub.w	r3, sl, r3
 8006092:	f8dc a000 	ldr.w	sl, [ip]
 8006096:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800609a:	fa1f fa8a 	uxth.w	sl, sl
 800609e:	4453      	add	r3, sl
 80060a0:	f8dc a000 	ldr.w	sl, [ip]
 80060a4:	b292      	uxth	r2, r2
 80060a6:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80060aa:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80060ae:	b29b      	uxth	r3, r3
 80060b0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80060b4:	4581      	cmp	r9, r0
 80060b6:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80060ba:	f84c 3b04 	str.w	r3, [ip], #4
 80060be:	d2db      	bcs.n	8006078 <quorem+0x44>
 80060c0:	f855 300b 	ldr.w	r3, [r5, fp]
 80060c4:	b92b      	cbnz	r3, 80060d2 <quorem+0x9e>
 80060c6:	9b01      	ldr	r3, [sp, #4]
 80060c8:	3b04      	subs	r3, #4
 80060ca:	429d      	cmp	r5, r3
 80060cc:	461a      	mov	r2, r3
 80060ce:	d32f      	bcc.n	8006130 <quorem+0xfc>
 80060d0:	613c      	str	r4, [r7, #16]
 80060d2:	4638      	mov	r0, r7
 80060d4:	f001 f8c2 	bl	800725c <__mcmp>
 80060d8:	2800      	cmp	r0, #0
 80060da:	db25      	blt.n	8006128 <quorem+0xf4>
 80060dc:	4628      	mov	r0, r5
 80060de:	f04f 0c00 	mov.w	ip, #0
 80060e2:	3601      	adds	r6, #1
 80060e4:	f858 1b04 	ldr.w	r1, [r8], #4
 80060e8:	f8d0 e000 	ldr.w	lr, [r0]
 80060ec:	b28b      	uxth	r3, r1
 80060ee:	ebac 0303 	sub.w	r3, ip, r3
 80060f2:	fa1f f28e 	uxth.w	r2, lr
 80060f6:	4413      	add	r3, r2
 80060f8:	0c0a      	lsrs	r2, r1, #16
 80060fa:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80060fe:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006102:	b29b      	uxth	r3, r3
 8006104:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006108:	45c1      	cmp	r9, r8
 800610a:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800610e:	f840 3b04 	str.w	r3, [r0], #4
 8006112:	d2e7      	bcs.n	80060e4 <quorem+0xb0>
 8006114:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006118:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800611c:	b922      	cbnz	r2, 8006128 <quorem+0xf4>
 800611e:	3b04      	subs	r3, #4
 8006120:	429d      	cmp	r5, r3
 8006122:	461a      	mov	r2, r3
 8006124:	d30a      	bcc.n	800613c <quorem+0x108>
 8006126:	613c      	str	r4, [r7, #16]
 8006128:	4630      	mov	r0, r6
 800612a:	b003      	add	sp, #12
 800612c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006130:	6812      	ldr	r2, [r2, #0]
 8006132:	3b04      	subs	r3, #4
 8006134:	2a00      	cmp	r2, #0
 8006136:	d1cb      	bne.n	80060d0 <quorem+0x9c>
 8006138:	3c01      	subs	r4, #1
 800613a:	e7c6      	b.n	80060ca <quorem+0x96>
 800613c:	6812      	ldr	r2, [r2, #0]
 800613e:	3b04      	subs	r3, #4
 8006140:	2a00      	cmp	r2, #0
 8006142:	d1f0      	bne.n	8006126 <quorem+0xf2>
 8006144:	3c01      	subs	r4, #1
 8006146:	e7eb      	b.n	8006120 <quorem+0xec>
 8006148:	2000      	movs	r0, #0
 800614a:	e7ee      	b.n	800612a <quorem+0xf6>
 800614c:	0000      	movs	r0, r0
	...

08006150 <_dtoa_r>:
 8006150:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006154:	4616      	mov	r6, r2
 8006156:	461f      	mov	r7, r3
 8006158:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800615a:	b099      	sub	sp, #100	; 0x64
 800615c:	4605      	mov	r5, r0
 800615e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8006162:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8006166:	b974      	cbnz	r4, 8006186 <_dtoa_r+0x36>
 8006168:	2010      	movs	r0, #16
 800616a:	f000 fde3 	bl	8006d34 <malloc>
 800616e:	4602      	mov	r2, r0
 8006170:	6268      	str	r0, [r5, #36]	; 0x24
 8006172:	b920      	cbnz	r0, 800617e <_dtoa_r+0x2e>
 8006174:	21ea      	movs	r1, #234	; 0xea
 8006176:	4ba8      	ldr	r3, [pc, #672]	; (8006418 <_dtoa_r+0x2c8>)
 8006178:	48a8      	ldr	r0, [pc, #672]	; (800641c <_dtoa_r+0x2cc>)
 800617a:	f001 fbcf 	bl	800791c <__assert_func>
 800617e:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006182:	6004      	str	r4, [r0, #0]
 8006184:	60c4      	str	r4, [r0, #12]
 8006186:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006188:	6819      	ldr	r1, [r3, #0]
 800618a:	b151      	cbz	r1, 80061a2 <_dtoa_r+0x52>
 800618c:	685a      	ldr	r2, [r3, #4]
 800618e:	2301      	movs	r3, #1
 8006190:	4093      	lsls	r3, r2
 8006192:	604a      	str	r2, [r1, #4]
 8006194:	608b      	str	r3, [r1, #8]
 8006196:	4628      	mov	r0, r5
 8006198:	f000 fe22 	bl	8006de0 <_Bfree>
 800619c:	2200      	movs	r2, #0
 800619e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80061a0:	601a      	str	r2, [r3, #0]
 80061a2:	1e3b      	subs	r3, r7, #0
 80061a4:	bfaf      	iteee	ge
 80061a6:	2300      	movge	r3, #0
 80061a8:	2201      	movlt	r2, #1
 80061aa:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80061ae:	9305      	strlt	r3, [sp, #20]
 80061b0:	bfa8      	it	ge
 80061b2:	f8c8 3000 	strge.w	r3, [r8]
 80061b6:	f8dd 9014 	ldr.w	r9, [sp, #20]
 80061ba:	4b99      	ldr	r3, [pc, #612]	; (8006420 <_dtoa_r+0x2d0>)
 80061bc:	bfb8      	it	lt
 80061be:	f8c8 2000 	strlt.w	r2, [r8]
 80061c2:	ea33 0309 	bics.w	r3, r3, r9
 80061c6:	d119      	bne.n	80061fc <_dtoa_r+0xac>
 80061c8:	f242 730f 	movw	r3, #9999	; 0x270f
 80061cc:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80061ce:	6013      	str	r3, [r2, #0]
 80061d0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80061d4:	4333      	orrs	r3, r6
 80061d6:	f000 857f 	beq.w	8006cd8 <_dtoa_r+0xb88>
 80061da:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80061dc:	b953      	cbnz	r3, 80061f4 <_dtoa_r+0xa4>
 80061de:	4b91      	ldr	r3, [pc, #580]	; (8006424 <_dtoa_r+0x2d4>)
 80061e0:	e022      	b.n	8006228 <_dtoa_r+0xd8>
 80061e2:	4b91      	ldr	r3, [pc, #580]	; (8006428 <_dtoa_r+0x2d8>)
 80061e4:	9303      	str	r3, [sp, #12]
 80061e6:	3308      	adds	r3, #8
 80061e8:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80061ea:	6013      	str	r3, [r2, #0]
 80061ec:	9803      	ldr	r0, [sp, #12]
 80061ee:	b019      	add	sp, #100	; 0x64
 80061f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80061f4:	4b8b      	ldr	r3, [pc, #556]	; (8006424 <_dtoa_r+0x2d4>)
 80061f6:	9303      	str	r3, [sp, #12]
 80061f8:	3303      	adds	r3, #3
 80061fa:	e7f5      	b.n	80061e8 <_dtoa_r+0x98>
 80061fc:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8006200:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8006204:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006208:	2200      	movs	r2, #0
 800620a:	2300      	movs	r3, #0
 800620c:	f7fa fbcc 	bl	80009a8 <__aeabi_dcmpeq>
 8006210:	4680      	mov	r8, r0
 8006212:	b158      	cbz	r0, 800622c <_dtoa_r+0xdc>
 8006214:	2301      	movs	r3, #1
 8006216:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8006218:	6013      	str	r3, [r2, #0]
 800621a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800621c:	2b00      	cmp	r3, #0
 800621e:	f000 8558 	beq.w	8006cd2 <_dtoa_r+0xb82>
 8006222:	4882      	ldr	r0, [pc, #520]	; (800642c <_dtoa_r+0x2dc>)
 8006224:	6018      	str	r0, [r3, #0]
 8006226:	1e43      	subs	r3, r0, #1
 8006228:	9303      	str	r3, [sp, #12]
 800622a:	e7df      	b.n	80061ec <_dtoa_r+0x9c>
 800622c:	ab16      	add	r3, sp, #88	; 0x58
 800622e:	9301      	str	r3, [sp, #4]
 8006230:	ab17      	add	r3, sp, #92	; 0x5c
 8006232:	9300      	str	r3, [sp, #0]
 8006234:	4628      	mov	r0, r5
 8006236:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800623a:	f001 f8b7 	bl	80073ac <__d2b>
 800623e:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8006242:	4683      	mov	fp, r0
 8006244:	2c00      	cmp	r4, #0
 8006246:	d07f      	beq.n	8006348 <_dtoa_r+0x1f8>
 8006248:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800624c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800624e:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8006252:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006256:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 800625a:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800625e:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8006262:	2200      	movs	r2, #0
 8006264:	4b72      	ldr	r3, [pc, #456]	; (8006430 <_dtoa_r+0x2e0>)
 8006266:	f7f9 ff7f 	bl	8000168 <__aeabi_dsub>
 800626a:	a365      	add	r3, pc, #404	; (adr r3, 8006400 <_dtoa_r+0x2b0>)
 800626c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006270:	f7fa f932 	bl	80004d8 <__aeabi_dmul>
 8006274:	a364      	add	r3, pc, #400	; (adr r3, 8006408 <_dtoa_r+0x2b8>)
 8006276:	e9d3 2300 	ldrd	r2, r3, [r3]
 800627a:	f7f9 ff77 	bl	800016c <__adddf3>
 800627e:	4606      	mov	r6, r0
 8006280:	4620      	mov	r0, r4
 8006282:	460f      	mov	r7, r1
 8006284:	f7fa f8be 	bl	8000404 <__aeabi_i2d>
 8006288:	a361      	add	r3, pc, #388	; (adr r3, 8006410 <_dtoa_r+0x2c0>)
 800628a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800628e:	f7fa f923 	bl	80004d8 <__aeabi_dmul>
 8006292:	4602      	mov	r2, r0
 8006294:	460b      	mov	r3, r1
 8006296:	4630      	mov	r0, r6
 8006298:	4639      	mov	r1, r7
 800629a:	f7f9 ff67 	bl	800016c <__adddf3>
 800629e:	4606      	mov	r6, r0
 80062a0:	460f      	mov	r7, r1
 80062a2:	f7fa fbc9 	bl	8000a38 <__aeabi_d2iz>
 80062a6:	2200      	movs	r2, #0
 80062a8:	4682      	mov	sl, r0
 80062aa:	2300      	movs	r3, #0
 80062ac:	4630      	mov	r0, r6
 80062ae:	4639      	mov	r1, r7
 80062b0:	f7fa fb84 	bl	80009bc <__aeabi_dcmplt>
 80062b4:	b148      	cbz	r0, 80062ca <_dtoa_r+0x17a>
 80062b6:	4650      	mov	r0, sl
 80062b8:	f7fa f8a4 	bl	8000404 <__aeabi_i2d>
 80062bc:	4632      	mov	r2, r6
 80062be:	463b      	mov	r3, r7
 80062c0:	f7fa fb72 	bl	80009a8 <__aeabi_dcmpeq>
 80062c4:	b908      	cbnz	r0, 80062ca <_dtoa_r+0x17a>
 80062c6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80062ca:	f1ba 0f16 	cmp.w	sl, #22
 80062ce:	d858      	bhi.n	8006382 <_dtoa_r+0x232>
 80062d0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80062d4:	4b57      	ldr	r3, [pc, #348]	; (8006434 <_dtoa_r+0x2e4>)
 80062d6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80062da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062de:	f7fa fb6d 	bl	80009bc <__aeabi_dcmplt>
 80062e2:	2800      	cmp	r0, #0
 80062e4:	d04f      	beq.n	8006386 <_dtoa_r+0x236>
 80062e6:	2300      	movs	r3, #0
 80062e8:	f10a 3aff 	add.w	sl, sl, #4294967295
 80062ec:	930f      	str	r3, [sp, #60]	; 0x3c
 80062ee:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80062f0:	1b1c      	subs	r4, r3, r4
 80062f2:	1e63      	subs	r3, r4, #1
 80062f4:	9309      	str	r3, [sp, #36]	; 0x24
 80062f6:	bf49      	itett	mi
 80062f8:	f1c4 0301 	rsbmi	r3, r4, #1
 80062fc:	2300      	movpl	r3, #0
 80062fe:	9306      	strmi	r3, [sp, #24]
 8006300:	2300      	movmi	r3, #0
 8006302:	bf54      	ite	pl
 8006304:	9306      	strpl	r3, [sp, #24]
 8006306:	9309      	strmi	r3, [sp, #36]	; 0x24
 8006308:	f1ba 0f00 	cmp.w	sl, #0
 800630c:	db3d      	blt.n	800638a <_dtoa_r+0x23a>
 800630e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006310:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8006314:	4453      	add	r3, sl
 8006316:	9309      	str	r3, [sp, #36]	; 0x24
 8006318:	2300      	movs	r3, #0
 800631a:	930a      	str	r3, [sp, #40]	; 0x28
 800631c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800631e:	2b09      	cmp	r3, #9
 8006320:	f200 808c 	bhi.w	800643c <_dtoa_r+0x2ec>
 8006324:	2b05      	cmp	r3, #5
 8006326:	bfc4      	itt	gt
 8006328:	3b04      	subgt	r3, #4
 800632a:	9322      	strgt	r3, [sp, #136]	; 0x88
 800632c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800632e:	bfc8      	it	gt
 8006330:	2400      	movgt	r4, #0
 8006332:	f1a3 0302 	sub.w	r3, r3, #2
 8006336:	bfd8      	it	le
 8006338:	2401      	movle	r4, #1
 800633a:	2b03      	cmp	r3, #3
 800633c:	f200 808a 	bhi.w	8006454 <_dtoa_r+0x304>
 8006340:	e8df f003 	tbb	[pc, r3]
 8006344:	5b4d4f2d 	.word	0x5b4d4f2d
 8006348:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 800634c:	441c      	add	r4, r3
 800634e:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8006352:	2b20      	cmp	r3, #32
 8006354:	bfc3      	ittte	gt
 8006356:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800635a:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 800635e:	fa09 f303 	lslgt.w	r3, r9, r3
 8006362:	f1c3 0320 	rsble	r3, r3, #32
 8006366:	bfc6      	itte	gt
 8006368:	fa26 f000 	lsrgt.w	r0, r6, r0
 800636c:	4318      	orrgt	r0, r3
 800636e:	fa06 f003 	lslle.w	r0, r6, r3
 8006372:	f7fa f837 	bl	80003e4 <__aeabi_ui2d>
 8006376:	2301      	movs	r3, #1
 8006378:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 800637c:	3c01      	subs	r4, #1
 800637e:	9313      	str	r3, [sp, #76]	; 0x4c
 8006380:	e76f      	b.n	8006262 <_dtoa_r+0x112>
 8006382:	2301      	movs	r3, #1
 8006384:	e7b2      	b.n	80062ec <_dtoa_r+0x19c>
 8006386:	900f      	str	r0, [sp, #60]	; 0x3c
 8006388:	e7b1      	b.n	80062ee <_dtoa_r+0x19e>
 800638a:	9b06      	ldr	r3, [sp, #24]
 800638c:	eba3 030a 	sub.w	r3, r3, sl
 8006390:	9306      	str	r3, [sp, #24]
 8006392:	f1ca 0300 	rsb	r3, sl, #0
 8006396:	930a      	str	r3, [sp, #40]	; 0x28
 8006398:	2300      	movs	r3, #0
 800639a:	930e      	str	r3, [sp, #56]	; 0x38
 800639c:	e7be      	b.n	800631c <_dtoa_r+0x1cc>
 800639e:	2300      	movs	r3, #0
 80063a0:	930b      	str	r3, [sp, #44]	; 0x2c
 80063a2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	dc58      	bgt.n	800645a <_dtoa_r+0x30a>
 80063a8:	f04f 0901 	mov.w	r9, #1
 80063ac:	464b      	mov	r3, r9
 80063ae:	f8cd 9020 	str.w	r9, [sp, #32]
 80063b2:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 80063b6:	2200      	movs	r2, #0
 80063b8:	6a68      	ldr	r0, [r5, #36]	; 0x24
 80063ba:	6042      	str	r2, [r0, #4]
 80063bc:	2204      	movs	r2, #4
 80063be:	f102 0614 	add.w	r6, r2, #20
 80063c2:	429e      	cmp	r6, r3
 80063c4:	6841      	ldr	r1, [r0, #4]
 80063c6:	d94e      	bls.n	8006466 <_dtoa_r+0x316>
 80063c8:	4628      	mov	r0, r5
 80063ca:	f000 fcc9 	bl	8006d60 <_Balloc>
 80063ce:	9003      	str	r0, [sp, #12]
 80063d0:	2800      	cmp	r0, #0
 80063d2:	d14c      	bne.n	800646e <_dtoa_r+0x31e>
 80063d4:	4602      	mov	r2, r0
 80063d6:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80063da:	4b17      	ldr	r3, [pc, #92]	; (8006438 <_dtoa_r+0x2e8>)
 80063dc:	e6cc      	b.n	8006178 <_dtoa_r+0x28>
 80063de:	2301      	movs	r3, #1
 80063e0:	e7de      	b.n	80063a0 <_dtoa_r+0x250>
 80063e2:	2300      	movs	r3, #0
 80063e4:	930b      	str	r3, [sp, #44]	; 0x2c
 80063e6:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80063e8:	eb0a 0903 	add.w	r9, sl, r3
 80063ec:	f109 0301 	add.w	r3, r9, #1
 80063f0:	2b01      	cmp	r3, #1
 80063f2:	9308      	str	r3, [sp, #32]
 80063f4:	bfb8      	it	lt
 80063f6:	2301      	movlt	r3, #1
 80063f8:	e7dd      	b.n	80063b6 <_dtoa_r+0x266>
 80063fa:	2301      	movs	r3, #1
 80063fc:	e7f2      	b.n	80063e4 <_dtoa_r+0x294>
 80063fe:	bf00      	nop
 8006400:	636f4361 	.word	0x636f4361
 8006404:	3fd287a7 	.word	0x3fd287a7
 8006408:	8b60c8b3 	.word	0x8b60c8b3
 800640c:	3fc68a28 	.word	0x3fc68a28
 8006410:	509f79fb 	.word	0x509f79fb
 8006414:	3fd34413 	.word	0x3fd34413
 8006418:	08008ca9 	.word	0x08008ca9
 800641c:	08008cc0 	.word	0x08008cc0
 8006420:	7ff00000 	.word	0x7ff00000
 8006424:	08008ca5 	.word	0x08008ca5
 8006428:	08008c9c 	.word	0x08008c9c
 800642c:	08008c79 	.word	0x08008c79
 8006430:	3ff80000 	.word	0x3ff80000
 8006434:	08008db0 	.word	0x08008db0
 8006438:	08008d1b 	.word	0x08008d1b
 800643c:	2401      	movs	r4, #1
 800643e:	2300      	movs	r3, #0
 8006440:	940b      	str	r4, [sp, #44]	; 0x2c
 8006442:	9322      	str	r3, [sp, #136]	; 0x88
 8006444:	f04f 39ff 	mov.w	r9, #4294967295
 8006448:	2200      	movs	r2, #0
 800644a:	2312      	movs	r3, #18
 800644c:	f8cd 9020 	str.w	r9, [sp, #32]
 8006450:	9223      	str	r2, [sp, #140]	; 0x8c
 8006452:	e7b0      	b.n	80063b6 <_dtoa_r+0x266>
 8006454:	2301      	movs	r3, #1
 8006456:	930b      	str	r3, [sp, #44]	; 0x2c
 8006458:	e7f4      	b.n	8006444 <_dtoa_r+0x2f4>
 800645a:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 800645e:	464b      	mov	r3, r9
 8006460:	f8cd 9020 	str.w	r9, [sp, #32]
 8006464:	e7a7      	b.n	80063b6 <_dtoa_r+0x266>
 8006466:	3101      	adds	r1, #1
 8006468:	6041      	str	r1, [r0, #4]
 800646a:	0052      	lsls	r2, r2, #1
 800646c:	e7a7      	b.n	80063be <_dtoa_r+0x26e>
 800646e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006470:	9a03      	ldr	r2, [sp, #12]
 8006472:	601a      	str	r2, [r3, #0]
 8006474:	9b08      	ldr	r3, [sp, #32]
 8006476:	2b0e      	cmp	r3, #14
 8006478:	f200 80a8 	bhi.w	80065cc <_dtoa_r+0x47c>
 800647c:	2c00      	cmp	r4, #0
 800647e:	f000 80a5 	beq.w	80065cc <_dtoa_r+0x47c>
 8006482:	f1ba 0f00 	cmp.w	sl, #0
 8006486:	dd34      	ble.n	80064f2 <_dtoa_r+0x3a2>
 8006488:	4a9a      	ldr	r2, [pc, #616]	; (80066f4 <_dtoa_r+0x5a4>)
 800648a:	f00a 030f 	and.w	r3, sl, #15
 800648e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8006492:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8006496:	e9d3 3400 	ldrd	r3, r4, [r3]
 800649a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800649e:	ea4f 142a 	mov.w	r4, sl, asr #4
 80064a2:	d016      	beq.n	80064d2 <_dtoa_r+0x382>
 80064a4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80064a8:	4b93      	ldr	r3, [pc, #588]	; (80066f8 <_dtoa_r+0x5a8>)
 80064aa:	2703      	movs	r7, #3
 80064ac:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80064b0:	f7fa f93c 	bl	800072c <__aeabi_ddiv>
 80064b4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80064b8:	f004 040f 	and.w	r4, r4, #15
 80064bc:	4e8e      	ldr	r6, [pc, #568]	; (80066f8 <_dtoa_r+0x5a8>)
 80064be:	b954      	cbnz	r4, 80064d6 <_dtoa_r+0x386>
 80064c0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80064c4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80064c8:	f7fa f930 	bl	800072c <__aeabi_ddiv>
 80064cc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80064d0:	e029      	b.n	8006526 <_dtoa_r+0x3d6>
 80064d2:	2702      	movs	r7, #2
 80064d4:	e7f2      	b.n	80064bc <_dtoa_r+0x36c>
 80064d6:	07e1      	lsls	r1, r4, #31
 80064d8:	d508      	bpl.n	80064ec <_dtoa_r+0x39c>
 80064da:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80064de:	e9d6 2300 	ldrd	r2, r3, [r6]
 80064e2:	f7f9 fff9 	bl	80004d8 <__aeabi_dmul>
 80064e6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80064ea:	3701      	adds	r7, #1
 80064ec:	1064      	asrs	r4, r4, #1
 80064ee:	3608      	adds	r6, #8
 80064f0:	e7e5      	b.n	80064be <_dtoa_r+0x36e>
 80064f2:	f000 80a5 	beq.w	8006640 <_dtoa_r+0x4f0>
 80064f6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80064fa:	f1ca 0400 	rsb	r4, sl, #0
 80064fe:	4b7d      	ldr	r3, [pc, #500]	; (80066f4 <_dtoa_r+0x5a4>)
 8006500:	f004 020f 	and.w	r2, r4, #15
 8006504:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006508:	e9d3 2300 	ldrd	r2, r3, [r3]
 800650c:	f7f9 ffe4 	bl	80004d8 <__aeabi_dmul>
 8006510:	2702      	movs	r7, #2
 8006512:	2300      	movs	r3, #0
 8006514:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006518:	4e77      	ldr	r6, [pc, #476]	; (80066f8 <_dtoa_r+0x5a8>)
 800651a:	1124      	asrs	r4, r4, #4
 800651c:	2c00      	cmp	r4, #0
 800651e:	f040 8084 	bne.w	800662a <_dtoa_r+0x4da>
 8006522:	2b00      	cmp	r3, #0
 8006524:	d1d2      	bne.n	80064cc <_dtoa_r+0x37c>
 8006526:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006528:	2b00      	cmp	r3, #0
 800652a:	f000 808b 	beq.w	8006644 <_dtoa_r+0x4f4>
 800652e:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8006532:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8006536:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800653a:	2200      	movs	r2, #0
 800653c:	4b6f      	ldr	r3, [pc, #444]	; (80066fc <_dtoa_r+0x5ac>)
 800653e:	f7fa fa3d 	bl	80009bc <__aeabi_dcmplt>
 8006542:	2800      	cmp	r0, #0
 8006544:	d07e      	beq.n	8006644 <_dtoa_r+0x4f4>
 8006546:	9b08      	ldr	r3, [sp, #32]
 8006548:	2b00      	cmp	r3, #0
 800654a:	d07b      	beq.n	8006644 <_dtoa_r+0x4f4>
 800654c:	f1b9 0f00 	cmp.w	r9, #0
 8006550:	dd38      	ble.n	80065c4 <_dtoa_r+0x474>
 8006552:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006556:	2200      	movs	r2, #0
 8006558:	4b69      	ldr	r3, [pc, #420]	; (8006700 <_dtoa_r+0x5b0>)
 800655a:	f7f9 ffbd 	bl	80004d8 <__aeabi_dmul>
 800655e:	464c      	mov	r4, r9
 8006560:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006564:	f10a 38ff 	add.w	r8, sl, #4294967295
 8006568:	3701      	adds	r7, #1
 800656a:	4638      	mov	r0, r7
 800656c:	f7f9 ff4a 	bl	8000404 <__aeabi_i2d>
 8006570:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006574:	f7f9 ffb0 	bl	80004d8 <__aeabi_dmul>
 8006578:	2200      	movs	r2, #0
 800657a:	4b62      	ldr	r3, [pc, #392]	; (8006704 <_dtoa_r+0x5b4>)
 800657c:	f7f9 fdf6 	bl	800016c <__adddf3>
 8006580:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8006584:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006588:	9611      	str	r6, [sp, #68]	; 0x44
 800658a:	2c00      	cmp	r4, #0
 800658c:	d15d      	bne.n	800664a <_dtoa_r+0x4fa>
 800658e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006592:	2200      	movs	r2, #0
 8006594:	4b5c      	ldr	r3, [pc, #368]	; (8006708 <_dtoa_r+0x5b8>)
 8006596:	f7f9 fde7 	bl	8000168 <__aeabi_dsub>
 800659a:	4602      	mov	r2, r0
 800659c:	460b      	mov	r3, r1
 800659e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80065a2:	4633      	mov	r3, r6
 80065a4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80065a6:	f7fa fa27 	bl	80009f8 <__aeabi_dcmpgt>
 80065aa:	2800      	cmp	r0, #0
 80065ac:	f040 829c 	bne.w	8006ae8 <_dtoa_r+0x998>
 80065b0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80065b4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80065b6:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80065ba:	f7fa f9ff 	bl	80009bc <__aeabi_dcmplt>
 80065be:	2800      	cmp	r0, #0
 80065c0:	f040 8290 	bne.w	8006ae4 <_dtoa_r+0x994>
 80065c4:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 80065c8:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80065cc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	f2c0 8152 	blt.w	8006878 <_dtoa_r+0x728>
 80065d4:	f1ba 0f0e 	cmp.w	sl, #14
 80065d8:	f300 814e 	bgt.w	8006878 <_dtoa_r+0x728>
 80065dc:	4b45      	ldr	r3, [pc, #276]	; (80066f4 <_dtoa_r+0x5a4>)
 80065de:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80065e2:	e9d3 3400 	ldrd	r3, r4, [r3]
 80065e6:	e9cd 3406 	strd	r3, r4, [sp, #24]
 80065ea:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	f280 80db 	bge.w	80067a8 <_dtoa_r+0x658>
 80065f2:	9b08      	ldr	r3, [sp, #32]
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	f300 80d7 	bgt.w	80067a8 <_dtoa_r+0x658>
 80065fa:	f040 8272 	bne.w	8006ae2 <_dtoa_r+0x992>
 80065fe:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006602:	2200      	movs	r2, #0
 8006604:	4b40      	ldr	r3, [pc, #256]	; (8006708 <_dtoa_r+0x5b8>)
 8006606:	f7f9 ff67 	bl	80004d8 <__aeabi_dmul>
 800660a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800660e:	f7fa f9e9 	bl	80009e4 <__aeabi_dcmpge>
 8006612:	9c08      	ldr	r4, [sp, #32]
 8006614:	4626      	mov	r6, r4
 8006616:	2800      	cmp	r0, #0
 8006618:	f040 8248 	bne.w	8006aac <_dtoa_r+0x95c>
 800661c:	2331      	movs	r3, #49	; 0x31
 800661e:	9f03      	ldr	r7, [sp, #12]
 8006620:	f10a 0a01 	add.w	sl, sl, #1
 8006624:	f807 3b01 	strb.w	r3, [r7], #1
 8006628:	e244      	b.n	8006ab4 <_dtoa_r+0x964>
 800662a:	07e2      	lsls	r2, r4, #31
 800662c:	d505      	bpl.n	800663a <_dtoa_r+0x4ea>
 800662e:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006632:	f7f9 ff51 	bl	80004d8 <__aeabi_dmul>
 8006636:	2301      	movs	r3, #1
 8006638:	3701      	adds	r7, #1
 800663a:	1064      	asrs	r4, r4, #1
 800663c:	3608      	adds	r6, #8
 800663e:	e76d      	b.n	800651c <_dtoa_r+0x3cc>
 8006640:	2702      	movs	r7, #2
 8006642:	e770      	b.n	8006526 <_dtoa_r+0x3d6>
 8006644:	46d0      	mov	r8, sl
 8006646:	9c08      	ldr	r4, [sp, #32]
 8006648:	e78f      	b.n	800656a <_dtoa_r+0x41a>
 800664a:	9903      	ldr	r1, [sp, #12]
 800664c:	4b29      	ldr	r3, [pc, #164]	; (80066f4 <_dtoa_r+0x5a4>)
 800664e:	4421      	add	r1, r4
 8006650:	9112      	str	r1, [sp, #72]	; 0x48
 8006652:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006654:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006658:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800665c:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006660:	2900      	cmp	r1, #0
 8006662:	d055      	beq.n	8006710 <_dtoa_r+0x5c0>
 8006664:	2000      	movs	r0, #0
 8006666:	4929      	ldr	r1, [pc, #164]	; (800670c <_dtoa_r+0x5bc>)
 8006668:	f7fa f860 	bl	800072c <__aeabi_ddiv>
 800666c:	463b      	mov	r3, r7
 800666e:	4632      	mov	r2, r6
 8006670:	f7f9 fd7a 	bl	8000168 <__aeabi_dsub>
 8006674:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006678:	9f03      	ldr	r7, [sp, #12]
 800667a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800667e:	f7fa f9db 	bl	8000a38 <__aeabi_d2iz>
 8006682:	4604      	mov	r4, r0
 8006684:	f7f9 febe 	bl	8000404 <__aeabi_i2d>
 8006688:	4602      	mov	r2, r0
 800668a:	460b      	mov	r3, r1
 800668c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006690:	f7f9 fd6a 	bl	8000168 <__aeabi_dsub>
 8006694:	4602      	mov	r2, r0
 8006696:	460b      	mov	r3, r1
 8006698:	3430      	adds	r4, #48	; 0x30
 800669a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800669e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80066a2:	f807 4b01 	strb.w	r4, [r7], #1
 80066a6:	f7fa f989 	bl	80009bc <__aeabi_dcmplt>
 80066aa:	2800      	cmp	r0, #0
 80066ac:	d174      	bne.n	8006798 <_dtoa_r+0x648>
 80066ae:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80066b2:	2000      	movs	r0, #0
 80066b4:	4911      	ldr	r1, [pc, #68]	; (80066fc <_dtoa_r+0x5ac>)
 80066b6:	f7f9 fd57 	bl	8000168 <__aeabi_dsub>
 80066ba:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80066be:	f7fa f97d 	bl	80009bc <__aeabi_dcmplt>
 80066c2:	2800      	cmp	r0, #0
 80066c4:	f040 80b7 	bne.w	8006836 <_dtoa_r+0x6e6>
 80066c8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80066ca:	429f      	cmp	r7, r3
 80066cc:	f43f af7a 	beq.w	80065c4 <_dtoa_r+0x474>
 80066d0:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80066d4:	2200      	movs	r2, #0
 80066d6:	4b0a      	ldr	r3, [pc, #40]	; (8006700 <_dtoa_r+0x5b0>)
 80066d8:	f7f9 fefe 	bl	80004d8 <__aeabi_dmul>
 80066dc:	2200      	movs	r2, #0
 80066de:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80066e2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80066e6:	4b06      	ldr	r3, [pc, #24]	; (8006700 <_dtoa_r+0x5b0>)
 80066e8:	f7f9 fef6 	bl	80004d8 <__aeabi_dmul>
 80066ec:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80066f0:	e7c3      	b.n	800667a <_dtoa_r+0x52a>
 80066f2:	bf00      	nop
 80066f4:	08008db0 	.word	0x08008db0
 80066f8:	08008d88 	.word	0x08008d88
 80066fc:	3ff00000 	.word	0x3ff00000
 8006700:	40240000 	.word	0x40240000
 8006704:	401c0000 	.word	0x401c0000
 8006708:	40140000 	.word	0x40140000
 800670c:	3fe00000 	.word	0x3fe00000
 8006710:	4630      	mov	r0, r6
 8006712:	4639      	mov	r1, r7
 8006714:	f7f9 fee0 	bl	80004d8 <__aeabi_dmul>
 8006718:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800671a:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800671e:	9c03      	ldr	r4, [sp, #12]
 8006720:	9314      	str	r3, [sp, #80]	; 0x50
 8006722:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006726:	f7fa f987 	bl	8000a38 <__aeabi_d2iz>
 800672a:	9015      	str	r0, [sp, #84]	; 0x54
 800672c:	f7f9 fe6a 	bl	8000404 <__aeabi_i2d>
 8006730:	4602      	mov	r2, r0
 8006732:	460b      	mov	r3, r1
 8006734:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006738:	f7f9 fd16 	bl	8000168 <__aeabi_dsub>
 800673c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800673e:	4606      	mov	r6, r0
 8006740:	3330      	adds	r3, #48	; 0x30
 8006742:	f804 3b01 	strb.w	r3, [r4], #1
 8006746:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006748:	460f      	mov	r7, r1
 800674a:	429c      	cmp	r4, r3
 800674c:	f04f 0200 	mov.w	r2, #0
 8006750:	d124      	bne.n	800679c <_dtoa_r+0x64c>
 8006752:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006756:	4bb0      	ldr	r3, [pc, #704]	; (8006a18 <_dtoa_r+0x8c8>)
 8006758:	f7f9 fd08 	bl	800016c <__adddf3>
 800675c:	4602      	mov	r2, r0
 800675e:	460b      	mov	r3, r1
 8006760:	4630      	mov	r0, r6
 8006762:	4639      	mov	r1, r7
 8006764:	f7fa f948 	bl	80009f8 <__aeabi_dcmpgt>
 8006768:	2800      	cmp	r0, #0
 800676a:	d163      	bne.n	8006834 <_dtoa_r+0x6e4>
 800676c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006770:	2000      	movs	r0, #0
 8006772:	49a9      	ldr	r1, [pc, #676]	; (8006a18 <_dtoa_r+0x8c8>)
 8006774:	f7f9 fcf8 	bl	8000168 <__aeabi_dsub>
 8006778:	4602      	mov	r2, r0
 800677a:	460b      	mov	r3, r1
 800677c:	4630      	mov	r0, r6
 800677e:	4639      	mov	r1, r7
 8006780:	f7fa f91c 	bl	80009bc <__aeabi_dcmplt>
 8006784:	2800      	cmp	r0, #0
 8006786:	f43f af1d 	beq.w	80065c4 <_dtoa_r+0x474>
 800678a:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800678c:	1e7b      	subs	r3, r7, #1
 800678e:	9314      	str	r3, [sp, #80]	; 0x50
 8006790:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8006794:	2b30      	cmp	r3, #48	; 0x30
 8006796:	d0f8      	beq.n	800678a <_dtoa_r+0x63a>
 8006798:	46c2      	mov	sl, r8
 800679a:	e03b      	b.n	8006814 <_dtoa_r+0x6c4>
 800679c:	4b9f      	ldr	r3, [pc, #636]	; (8006a1c <_dtoa_r+0x8cc>)
 800679e:	f7f9 fe9b 	bl	80004d8 <__aeabi_dmul>
 80067a2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80067a6:	e7bc      	b.n	8006722 <_dtoa_r+0x5d2>
 80067a8:	9f03      	ldr	r7, [sp, #12]
 80067aa:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 80067ae:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80067b2:	4640      	mov	r0, r8
 80067b4:	4649      	mov	r1, r9
 80067b6:	f7f9 ffb9 	bl	800072c <__aeabi_ddiv>
 80067ba:	f7fa f93d 	bl	8000a38 <__aeabi_d2iz>
 80067be:	4604      	mov	r4, r0
 80067c0:	f7f9 fe20 	bl	8000404 <__aeabi_i2d>
 80067c4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80067c8:	f7f9 fe86 	bl	80004d8 <__aeabi_dmul>
 80067cc:	4602      	mov	r2, r0
 80067ce:	460b      	mov	r3, r1
 80067d0:	4640      	mov	r0, r8
 80067d2:	4649      	mov	r1, r9
 80067d4:	f7f9 fcc8 	bl	8000168 <__aeabi_dsub>
 80067d8:	f104 0630 	add.w	r6, r4, #48	; 0x30
 80067dc:	f807 6b01 	strb.w	r6, [r7], #1
 80067e0:	9e03      	ldr	r6, [sp, #12]
 80067e2:	f8dd c020 	ldr.w	ip, [sp, #32]
 80067e6:	1bbe      	subs	r6, r7, r6
 80067e8:	45b4      	cmp	ip, r6
 80067ea:	4602      	mov	r2, r0
 80067ec:	460b      	mov	r3, r1
 80067ee:	d136      	bne.n	800685e <_dtoa_r+0x70e>
 80067f0:	f7f9 fcbc 	bl	800016c <__adddf3>
 80067f4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80067f8:	4680      	mov	r8, r0
 80067fa:	4689      	mov	r9, r1
 80067fc:	f7fa f8fc 	bl	80009f8 <__aeabi_dcmpgt>
 8006800:	bb58      	cbnz	r0, 800685a <_dtoa_r+0x70a>
 8006802:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006806:	4640      	mov	r0, r8
 8006808:	4649      	mov	r1, r9
 800680a:	f7fa f8cd 	bl	80009a8 <__aeabi_dcmpeq>
 800680e:	b108      	cbz	r0, 8006814 <_dtoa_r+0x6c4>
 8006810:	07e1      	lsls	r1, r4, #31
 8006812:	d422      	bmi.n	800685a <_dtoa_r+0x70a>
 8006814:	4628      	mov	r0, r5
 8006816:	4659      	mov	r1, fp
 8006818:	f000 fae2 	bl	8006de0 <_Bfree>
 800681c:	2300      	movs	r3, #0
 800681e:	703b      	strb	r3, [r7, #0]
 8006820:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8006822:	f10a 0001 	add.w	r0, sl, #1
 8006826:	6018      	str	r0, [r3, #0]
 8006828:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800682a:	2b00      	cmp	r3, #0
 800682c:	f43f acde 	beq.w	80061ec <_dtoa_r+0x9c>
 8006830:	601f      	str	r7, [r3, #0]
 8006832:	e4db      	b.n	80061ec <_dtoa_r+0x9c>
 8006834:	4627      	mov	r7, r4
 8006836:	463b      	mov	r3, r7
 8006838:	461f      	mov	r7, r3
 800683a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800683e:	2a39      	cmp	r2, #57	; 0x39
 8006840:	d107      	bne.n	8006852 <_dtoa_r+0x702>
 8006842:	9a03      	ldr	r2, [sp, #12]
 8006844:	429a      	cmp	r2, r3
 8006846:	d1f7      	bne.n	8006838 <_dtoa_r+0x6e8>
 8006848:	2230      	movs	r2, #48	; 0x30
 800684a:	9903      	ldr	r1, [sp, #12]
 800684c:	f108 0801 	add.w	r8, r8, #1
 8006850:	700a      	strb	r2, [r1, #0]
 8006852:	781a      	ldrb	r2, [r3, #0]
 8006854:	3201      	adds	r2, #1
 8006856:	701a      	strb	r2, [r3, #0]
 8006858:	e79e      	b.n	8006798 <_dtoa_r+0x648>
 800685a:	46d0      	mov	r8, sl
 800685c:	e7eb      	b.n	8006836 <_dtoa_r+0x6e6>
 800685e:	2200      	movs	r2, #0
 8006860:	4b6e      	ldr	r3, [pc, #440]	; (8006a1c <_dtoa_r+0x8cc>)
 8006862:	f7f9 fe39 	bl	80004d8 <__aeabi_dmul>
 8006866:	2200      	movs	r2, #0
 8006868:	2300      	movs	r3, #0
 800686a:	4680      	mov	r8, r0
 800686c:	4689      	mov	r9, r1
 800686e:	f7fa f89b 	bl	80009a8 <__aeabi_dcmpeq>
 8006872:	2800      	cmp	r0, #0
 8006874:	d09b      	beq.n	80067ae <_dtoa_r+0x65e>
 8006876:	e7cd      	b.n	8006814 <_dtoa_r+0x6c4>
 8006878:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800687a:	2a00      	cmp	r2, #0
 800687c:	f000 80d0 	beq.w	8006a20 <_dtoa_r+0x8d0>
 8006880:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8006882:	2a01      	cmp	r2, #1
 8006884:	f300 80ae 	bgt.w	80069e4 <_dtoa_r+0x894>
 8006888:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800688a:	2a00      	cmp	r2, #0
 800688c:	f000 80a6 	beq.w	80069dc <_dtoa_r+0x88c>
 8006890:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8006894:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8006896:	9f06      	ldr	r7, [sp, #24]
 8006898:	9a06      	ldr	r2, [sp, #24]
 800689a:	2101      	movs	r1, #1
 800689c:	441a      	add	r2, r3
 800689e:	9206      	str	r2, [sp, #24]
 80068a0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80068a2:	4628      	mov	r0, r5
 80068a4:	441a      	add	r2, r3
 80068a6:	9209      	str	r2, [sp, #36]	; 0x24
 80068a8:	f000 fb50 	bl	8006f4c <__i2b>
 80068ac:	4606      	mov	r6, r0
 80068ae:	2f00      	cmp	r7, #0
 80068b0:	dd0c      	ble.n	80068cc <_dtoa_r+0x77c>
 80068b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	dd09      	ble.n	80068cc <_dtoa_r+0x77c>
 80068b8:	42bb      	cmp	r3, r7
 80068ba:	bfa8      	it	ge
 80068bc:	463b      	movge	r3, r7
 80068be:	9a06      	ldr	r2, [sp, #24]
 80068c0:	1aff      	subs	r7, r7, r3
 80068c2:	1ad2      	subs	r2, r2, r3
 80068c4:	9206      	str	r2, [sp, #24]
 80068c6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80068c8:	1ad3      	subs	r3, r2, r3
 80068ca:	9309      	str	r3, [sp, #36]	; 0x24
 80068cc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80068ce:	b1f3      	cbz	r3, 800690e <_dtoa_r+0x7be>
 80068d0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	f000 80a8 	beq.w	8006a28 <_dtoa_r+0x8d8>
 80068d8:	2c00      	cmp	r4, #0
 80068da:	dd10      	ble.n	80068fe <_dtoa_r+0x7ae>
 80068dc:	4631      	mov	r1, r6
 80068de:	4622      	mov	r2, r4
 80068e0:	4628      	mov	r0, r5
 80068e2:	f000 fbf1 	bl	80070c8 <__pow5mult>
 80068e6:	465a      	mov	r2, fp
 80068e8:	4601      	mov	r1, r0
 80068ea:	4606      	mov	r6, r0
 80068ec:	4628      	mov	r0, r5
 80068ee:	f000 fb43 	bl	8006f78 <__multiply>
 80068f2:	4680      	mov	r8, r0
 80068f4:	4659      	mov	r1, fp
 80068f6:	4628      	mov	r0, r5
 80068f8:	f000 fa72 	bl	8006de0 <_Bfree>
 80068fc:	46c3      	mov	fp, r8
 80068fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006900:	1b1a      	subs	r2, r3, r4
 8006902:	d004      	beq.n	800690e <_dtoa_r+0x7be>
 8006904:	4659      	mov	r1, fp
 8006906:	4628      	mov	r0, r5
 8006908:	f000 fbde 	bl	80070c8 <__pow5mult>
 800690c:	4683      	mov	fp, r0
 800690e:	2101      	movs	r1, #1
 8006910:	4628      	mov	r0, r5
 8006912:	f000 fb1b 	bl	8006f4c <__i2b>
 8006916:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006918:	4604      	mov	r4, r0
 800691a:	2b00      	cmp	r3, #0
 800691c:	f340 8086 	ble.w	8006a2c <_dtoa_r+0x8dc>
 8006920:	461a      	mov	r2, r3
 8006922:	4601      	mov	r1, r0
 8006924:	4628      	mov	r0, r5
 8006926:	f000 fbcf 	bl	80070c8 <__pow5mult>
 800692a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800692c:	4604      	mov	r4, r0
 800692e:	2b01      	cmp	r3, #1
 8006930:	dd7f      	ble.n	8006a32 <_dtoa_r+0x8e2>
 8006932:	f04f 0800 	mov.w	r8, #0
 8006936:	6923      	ldr	r3, [r4, #16]
 8006938:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800693c:	6918      	ldr	r0, [r3, #16]
 800693e:	f000 fab7 	bl	8006eb0 <__hi0bits>
 8006942:	f1c0 0020 	rsb	r0, r0, #32
 8006946:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006948:	4418      	add	r0, r3
 800694a:	f010 001f 	ands.w	r0, r0, #31
 800694e:	f000 8092 	beq.w	8006a76 <_dtoa_r+0x926>
 8006952:	f1c0 0320 	rsb	r3, r0, #32
 8006956:	2b04      	cmp	r3, #4
 8006958:	f340 808a 	ble.w	8006a70 <_dtoa_r+0x920>
 800695c:	f1c0 001c 	rsb	r0, r0, #28
 8006960:	9b06      	ldr	r3, [sp, #24]
 8006962:	4407      	add	r7, r0
 8006964:	4403      	add	r3, r0
 8006966:	9306      	str	r3, [sp, #24]
 8006968:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800696a:	4403      	add	r3, r0
 800696c:	9309      	str	r3, [sp, #36]	; 0x24
 800696e:	9b06      	ldr	r3, [sp, #24]
 8006970:	2b00      	cmp	r3, #0
 8006972:	dd05      	ble.n	8006980 <_dtoa_r+0x830>
 8006974:	4659      	mov	r1, fp
 8006976:	461a      	mov	r2, r3
 8006978:	4628      	mov	r0, r5
 800697a:	f000 fbff 	bl	800717c <__lshift>
 800697e:	4683      	mov	fp, r0
 8006980:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006982:	2b00      	cmp	r3, #0
 8006984:	dd05      	ble.n	8006992 <_dtoa_r+0x842>
 8006986:	4621      	mov	r1, r4
 8006988:	461a      	mov	r2, r3
 800698a:	4628      	mov	r0, r5
 800698c:	f000 fbf6 	bl	800717c <__lshift>
 8006990:	4604      	mov	r4, r0
 8006992:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006994:	2b00      	cmp	r3, #0
 8006996:	d070      	beq.n	8006a7a <_dtoa_r+0x92a>
 8006998:	4621      	mov	r1, r4
 800699a:	4658      	mov	r0, fp
 800699c:	f000 fc5e 	bl	800725c <__mcmp>
 80069a0:	2800      	cmp	r0, #0
 80069a2:	da6a      	bge.n	8006a7a <_dtoa_r+0x92a>
 80069a4:	2300      	movs	r3, #0
 80069a6:	4659      	mov	r1, fp
 80069a8:	220a      	movs	r2, #10
 80069aa:	4628      	mov	r0, r5
 80069ac:	f000 fa3a 	bl	8006e24 <__multadd>
 80069b0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80069b2:	4683      	mov	fp, r0
 80069b4:	f10a 3aff 	add.w	sl, sl, #4294967295
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	f000 8194 	beq.w	8006ce6 <_dtoa_r+0xb96>
 80069be:	4631      	mov	r1, r6
 80069c0:	2300      	movs	r3, #0
 80069c2:	220a      	movs	r2, #10
 80069c4:	4628      	mov	r0, r5
 80069c6:	f000 fa2d 	bl	8006e24 <__multadd>
 80069ca:	f1b9 0f00 	cmp.w	r9, #0
 80069ce:	4606      	mov	r6, r0
 80069d0:	f300 8093 	bgt.w	8006afa <_dtoa_r+0x9aa>
 80069d4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80069d6:	2b02      	cmp	r3, #2
 80069d8:	dc57      	bgt.n	8006a8a <_dtoa_r+0x93a>
 80069da:	e08e      	b.n	8006afa <_dtoa_r+0x9aa>
 80069dc:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80069de:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80069e2:	e757      	b.n	8006894 <_dtoa_r+0x744>
 80069e4:	9b08      	ldr	r3, [sp, #32]
 80069e6:	1e5c      	subs	r4, r3, #1
 80069e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80069ea:	42a3      	cmp	r3, r4
 80069ec:	bfb7      	itett	lt
 80069ee:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80069f0:	1b1c      	subge	r4, r3, r4
 80069f2:	1ae2      	sublt	r2, r4, r3
 80069f4:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 80069f6:	bfbe      	ittt	lt
 80069f8:	940a      	strlt	r4, [sp, #40]	; 0x28
 80069fa:	189b      	addlt	r3, r3, r2
 80069fc:	930e      	strlt	r3, [sp, #56]	; 0x38
 80069fe:	9b08      	ldr	r3, [sp, #32]
 8006a00:	bfb8      	it	lt
 8006a02:	2400      	movlt	r4, #0
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	bfbb      	ittet	lt
 8006a08:	9b06      	ldrlt	r3, [sp, #24]
 8006a0a:	9a08      	ldrlt	r2, [sp, #32]
 8006a0c:	9f06      	ldrge	r7, [sp, #24]
 8006a0e:	1a9f      	sublt	r7, r3, r2
 8006a10:	bfac      	ite	ge
 8006a12:	9b08      	ldrge	r3, [sp, #32]
 8006a14:	2300      	movlt	r3, #0
 8006a16:	e73f      	b.n	8006898 <_dtoa_r+0x748>
 8006a18:	3fe00000 	.word	0x3fe00000
 8006a1c:	40240000 	.word	0x40240000
 8006a20:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8006a22:	9f06      	ldr	r7, [sp, #24]
 8006a24:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8006a26:	e742      	b.n	80068ae <_dtoa_r+0x75e>
 8006a28:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006a2a:	e76b      	b.n	8006904 <_dtoa_r+0x7b4>
 8006a2c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006a2e:	2b01      	cmp	r3, #1
 8006a30:	dc19      	bgt.n	8006a66 <_dtoa_r+0x916>
 8006a32:	9b04      	ldr	r3, [sp, #16]
 8006a34:	b9bb      	cbnz	r3, 8006a66 <_dtoa_r+0x916>
 8006a36:	9b05      	ldr	r3, [sp, #20]
 8006a38:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006a3c:	b99b      	cbnz	r3, 8006a66 <_dtoa_r+0x916>
 8006a3e:	9b05      	ldr	r3, [sp, #20]
 8006a40:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006a44:	0d1b      	lsrs	r3, r3, #20
 8006a46:	051b      	lsls	r3, r3, #20
 8006a48:	b183      	cbz	r3, 8006a6c <_dtoa_r+0x91c>
 8006a4a:	f04f 0801 	mov.w	r8, #1
 8006a4e:	9b06      	ldr	r3, [sp, #24]
 8006a50:	3301      	adds	r3, #1
 8006a52:	9306      	str	r3, [sp, #24]
 8006a54:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006a56:	3301      	adds	r3, #1
 8006a58:	9309      	str	r3, [sp, #36]	; 0x24
 8006a5a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	f47f af6a 	bne.w	8006936 <_dtoa_r+0x7e6>
 8006a62:	2001      	movs	r0, #1
 8006a64:	e76f      	b.n	8006946 <_dtoa_r+0x7f6>
 8006a66:	f04f 0800 	mov.w	r8, #0
 8006a6a:	e7f6      	b.n	8006a5a <_dtoa_r+0x90a>
 8006a6c:	4698      	mov	r8, r3
 8006a6e:	e7f4      	b.n	8006a5a <_dtoa_r+0x90a>
 8006a70:	f43f af7d 	beq.w	800696e <_dtoa_r+0x81e>
 8006a74:	4618      	mov	r0, r3
 8006a76:	301c      	adds	r0, #28
 8006a78:	e772      	b.n	8006960 <_dtoa_r+0x810>
 8006a7a:	9b08      	ldr	r3, [sp, #32]
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	dc36      	bgt.n	8006aee <_dtoa_r+0x99e>
 8006a80:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006a82:	2b02      	cmp	r3, #2
 8006a84:	dd33      	ble.n	8006aee <_dtoa_r+0x99e>
 8006a86:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006a8a:	f1b9 0f00 	cmp.w	r9, #0
 8006a8e:	d10d      	bne.n	8006aac <_dtoa_r+0x95c>
 8006a90:	4621      	mov	r1, r4
 8006a92:	464b      	mov	r3, r9
 8006a94:	2205      	movs	r2, #5
 8006a96:	4628      	mov	r0, r5
 8006a98:	f000 f9c4 	bl	8006e24 <__multadd>
 8006a9c:	4601      	mov	r1, r0
 8006a9e:	4604      	mov	r4, r0
 8006aa0:	4658      	mov	r0, fp
 8006aa2:	f000 fbdb 	bl	800725c <__mcmp>
 8006aa6:	2800      	cmp	r0, #0
 8006aa8:	f73f adb8 	bgt.w	800661c <_dtoa_r+0x4cc>
 8006aac:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006aae:	9f03      	ldr	r7, [sp, #12]
 8006ab0:	ea6f 0a03 	mvn.w	sl, r3
 8006ab4:	f04f 0800 	mov.w	r8, #0
 8006ab8:	4621      	mov	r1, r4
 8006aba:	4628      	mov	r0, r5
 8006abc:	f000 f990 	bl	8006de0 <_Bfree>
 8006ac0:	2e00      	cmp	r6, #0
 8006ac2:	f43f aea7 	beq.w	8006814 <_dtoa_r+0x6c4>
 8006ac6:	f1b8 0f00 	cmp.w	r8, #0
 8006aca:	d005      	beq.n	8006ad8 <_dtoa_r+0x988>
 8006acc:	45b0      	cmp	r8, r6
 8006ace:	d003      	beq.n	8006ad8 <_dtoa_r+0x988>
 8006ad0:	4641      	mov	r1, r8
 8006ad2:	4628      	mov	r0, r5
 8006ad4:	f000 f984 	bl	8006de0 <_Bfree>
 8006ad8:	4631      	mov	r1, r6
 8006ada:	4628      	mov	r0, r5
 8006adc:	f000 f980 	bl	8006de0 <_Bfree>
 8006ae0:	e698      	b.n	8006814 <_dtoa_r+0x6c4>
 8006ae2:	2400      	movs	r4, #0
 8006ae4:	4626      	mov	r6, r4
 8006ae6:	e7e1      	b.n	8006aac <_dtoa_r+0x95c>
 8006ae8:	46c2      	mov	sl, r8
 8006aea:	4626      	mov	r6, r4
 8006aec:	e596      	b.n	800661c <_dtoa_r+0x4cc>
 8006aee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006af0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	f000 80fd 	beq.w	8006cf4 <_dtoa_r+0xba4>
 8006afa:	2f00      	cmp	r7, #0
 8006afc:	dd05      	ble.n	8006b0a <_dtoa_r+0x9ba>
 8006afe:	4631      	mov	r1, r6
 8006b00:	463a      	mov	r2, r7
 8006b02:	4628      	mov	r0, r5
 8006b04:	f000 fb3a 	bl	800717c <__lshift>
 8006b08:	4606      	mov	r6, r0
 8006b0a:	f1b8 0f00 	cmp.w	r8, #0
 8006b0e:	d05c      	beq.n	8006bca <_dtoa_r+0xa7a>
 8006b10:	4628      	mov	r0, r5
 8006b12:	6871      	ldr	r1, [r6, #4]
 8006b14:	f000 f924 	bl	8006d60 <_Balloc>
 8006b18:	4607      	mov	r7, r0
 8006b1a:	b928      	cbnz	r0, 8006b28 <_dtoa_r+0x9d8>
 8006b1c:	4602      	mov	r2, r0
 8006b1e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8006b22:	4b7f      	ldr	r3, [pc, #508]	; (8006d20 <_dtoa_r+0xbd0>)
 8006b24:	f7ff bb28 	b.w	8006178 <_dtoa_r+0x28>
 8006b28:	6932      	ldr	r2, [r6, #16]
 8006b2a:	f106 010c 	add.w	r1, r6, #12
 8006b2e:	3202      	adds	r2, #2
 8006b30:	0092      	lsls	r2, r2, #2
 8006b32:	300c      	adds	r0, #12
 8006b34:	f7fe fdce 	bl	80056d4 <memcpy>
 8006b38:	2201      	movs	r2, #1
 8006b3a:	4639      	mov	r1, r7
 8006b3c:	4628      	mov	r0, r5
 8006b3e:	f000 fb1d 	bl	800717c <__lshift>
 8006b42:	46b0      	mov	r8, r6
 8006b44:	4606      	mov	r6, r0
 8006b46:	9b03      	ldr	r3, [sp, #12]
 8006b48:	3301      	adds	r3, #1
 8006b4a:	9308      	str	r3, [sp, #32]
 8006b4c:	9b03      	ldr	r3, [sp, #12]
 8006b4e:	444b      	add	r3, r9
 8006b50:	930a      	str	r3, [sp, #40]	; 0x28
 8006b52:	9b04      	ldr	r3, [sp, #16]
 8006b54:	f003 0301 	and.w	r3, r3, #1
 8006b58:	9309      	str	r3, [sp, #36]	; 0x24
 8006b5a:	9b08      	ldr	r3, [sp, #32]
 8006b5c:	4621      	mov	r1, r4
 8006b5e:	3b01      	subs	r3, #1
 8006b60:	4658      	mov	r0, fp
 8006b62:	9304      	str	r3, [sp, #16]
 8006b64:	f7ff fa66 	bl	8006034 <quorem>
 8006b68:	4603      	mov	r3, r0
 8006b6a:	4641      	mov	r1, r8
 8006b6c:	3330      	adds	r3, #48	; 0x30
 8006b6e:	9006      	str	r0, [sp, #24]
 8006b70:	4658      	mov	r0, fp
 8006b72:	930b      	str	r3, [sp, #44]	; 0x2c
 8006b74:	f000 fb72 	bl	800725c <__mcmp>
 8006b78:	4632      	mov	r2, r6
 8006b7a:	4681      	mov	r9, r0
 8006b7c:	4621      	mov	r1, r4
 8006b7e:	4628      	mov	r0, r5
 8006b80:	f000 fb88 	bl	8007294 <__mdiff>
 8006b84:	68c2      	ldr	r2, [r0, #12]
 8006b86:	4607      	mov	r7, r0
 8006b88:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006b8a:	bb02      	cbnz	r2, 8006bce <_dtoa_r+0xa7e>
 8006b8c:	4601      	mov	r1, r0
 8006b8e:	4658      	mov	r0, fp
 8006b90:	f000 fb64 	bl	800725c <__mcmp>
 8006b94:	4602      	mov	r2, r0
 8006b96:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006b98:	4639      	mov	r1, r7
 8006b9a:	4628      	mov	r0, r5
 8006b9c:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 8006ba0:	f000 f91e 	bl	8006de0 <_Bfree>
 8006ba4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006ba6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006ba8:	9f08      	ldr	r7, [sp, #32]
 8006baa:	ea43 0102 	orr.w	r1, r3, r2
 8006bae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006bb0:	430b      	orrs	r3, r1
 8006bb2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006bb4:	d10d      	bne.n	8006bd2 <_dtoa_r+0xa82>
 8006bb6:	2b39      	cmp	r3, #57	; 0x39
 8006bb8:	d029      	beq.n	8006c0e <_dtoa_r+0xabe>
 8006bba:	f1b9 0f00 	cmp.w	r9, #0
 8006bbe:	dd01      	ble.n	8006bc4 <_dtoa_r+0xa74>
 8006bc0:	9b06      	ldr	r3, [sp, #24]
 8006bc2:	3331      	adds	r3, #49	; 0x31
 8006bc4:	9a04      	ldr	r2, [sp, #16]
 8006bc6:	7013      	strb	r3, [r2, #0]
 8006bc8:	e776      	b.n	8006ab8 <_dtoa_r+0x968>
 8006bca:	4630      	mov	r0, r6
 8006bcc:	e7b9      	b.n	8006b42 <_dtoa_r+0x9f2>
 8006bce:	2201      	movs	r2, #1
 8006bd0:	e7e2      	b.n	8006b98 <_dtoa_r+0xa48>
 8006bd2:	f1b9 0f00 	cmp.w	r9, #0
 8006bd6:	db06      	blt.n	8006be6 <_dtoa_r+0xa96>
 8006bd8:	9922      	ldr	r1, [sp, #136]	; 0x88
 8006bda:	ea41 0909 	orr.w	r9, r1, r9
 8006bde:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006be0:	ea59 0101 	orrs.w	r1, r9, r1
 8006be4:	d120      	bne.n	8006c28 <_dtoa_r+0xad8>
 8006be6:	2a00      	cmp	r2, #0
 8006be8:	ddec      	ble.n	8006bc4 <_dtoa_r+0xa74>
 8006bea:	4659      	mov	r1, fp
 8006bec:	2201      	movs	r2, #1
 8006bee:	4628      	mov	r0, r5
 8006bf0:	9308      	str	r3, [sp, #32]
 8006bf2:	f000 fac3 	bl	800717c <__lshift>
 8006bf6:	4621      	mov	r1, r4
 8006bf8:	4683      	mov	fp, r0
 8006bfa:	f000 fb2f 	bl	800725c <__mcmp>
 8006bfe:	2800      	cmp	r0, #0
 8006c00:	9b08      	ldr	r3, [sp, #32]
 8006c02:	dc02      	bgt.n	8006c0a <_dtoa_r+0xaba>
 8006c04:	d1de      	bne.n	8006bc4 <_dtoa_r+0xa74>
 8006c06:	07da      	lsls	r2, r3, #31
 8006c08:	d5dc      	bpl.n	8006bc4 <_dtoa_r+0xa74>
 8006c0a:	2b39      	cmp	r3, #57	; 0x39
 8006c0c:	d1d8      	bne.n	8006bc0 <_dtoa_r+0xa70>
 8006c0e:	2339      	movs	r3, #57	; 0x39
 8006c10:	9a04      	ldr	r2, [sp, #16]
 8006c12:	7013      	strb	r3, [r2, #0]
 8006c14:	463b      	mov	r3, r7
 8006c16:	461f      	mov	r7, r3
 8006c18:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8006c1c:	3b01      	subs	r3, #1
 8006c1e:	2a39      	cmp	r2, #57	; 0x39
 8006c20:	d050      	beq.n	8006cc4 <_dtoa_r+0xb74>
 8006c22:	3201      	adds	r2, #1
 8006c24:	701a      	strb	r2, [r3, #0]
 8006c26:	e747      	b.n	8006ab8 <_dtoa_r+0x968>
 8006c28:	2a00      	cmp	r2, #0
 8006c2a:	dd03      	ble.n	8006c34 <_dtoa_r+0xae4>
 8006c2c:	2b39      	cmp	r3, #57	; 0x39
 8006c2e:	d0ee      	beq.n	8006c0e <_dtoa_r+0xabe>
 8006c30:	3301      	adds	r3, #1
 8006c32:	e7c7      	b.n	8006bc4 <_dtoa_r+0xa74>
 8006c34:	9a08      	ldr	r2, [sp, #32]
 8006c36:	990a      	ldr	r1, [sp, #40]	; 0x28
 8006c38:	f802 3c01 	strb.w	r3, [r2, #-1]
 8006c3c:	428a      	cmp	r2, r1
 8006c3e:	d02a      	beq.n	8006c96 <_dtoa_r+0xb46>
 8006c40:	4659      	mov	r1, fp
 8006c42:	2300      	movs	r3, #0
 8006c44:	220a      	movs	r2, #10
 8006c46:	4628      	mov	r0, r5
 8006c48:	f000 f8ec 	bl	8006e24 <__multadd>
 8006c4c:	45b0      	cmp	r8, r6
 8006c4e:	4683      	mov	fp, r0
 8006c50:	f04f 0300 	mov.w	r3, #0
 8006c54:	f04f 020a 	mov.w	r2, #10
 8006c58:	4641      	mov	r1, r8
 8006c5a:	4628      	mov	r0, r5
 8006c5c:	d107      	bne.n	8006c6e <_dtoa_r+0xb1e>
 8006c5e:	f000 f8e1 	bl	8006e24 <__multadd>
 8006c62:	4680      	mov	r8, r0
 8006c64:	4606      	mov	r6, r0
 8006c66:	9b08      	ldr	r3, [sp, #32]
 8006c68:	3301      	adds	r3, #1
 8006c6a:	9308      	str	r3, [sp, #32]
 8006c6c:	e775      	b.n	8006b5a <_dtoa_r+0xa0a>
 8006c6e:	f000 f8d9 	bl	8006e24 <__multadd>
 8006c72:	4631      	mov	r1, r6
 8006c74:	4680      	mov	r8, r0
 8006c76:	2300      	movs	r3, #0
 8006c78:	220a      	movs	r2, #10
 8006c7a:	4628      	mov	r0, r5
 8006c7c:	f000 f8d2 	bl	8006e24 <__multadd>
 8006c80:	4606      	mov	r6, r0
 8006c82:	e7f0      	b.n	8006c66 <_dtoa_r+0xb16>
 8006c84:	f1b9 0f00 	cmp.w	r9, #0
 8006c88:	bfcc      	ite	gt
 8006c8a:	464f      	movgt	r7, r9
 8006c8c:	2701      	movle	r7, #1
 8006c8e:	f04f 0800 	mov.w	r8, #0
 8006c92:	9a03      	ldr	r2, [sp, #12]
 8006c94:	4417      	add	r7, r2
 8006c96:	4659      	mov	r1, fp
 8006c98:	2201      	movs	r2, #1
 8006c9a:	4628      	mov	r0, r5
 8006c9c:	9308      	str	r3, [sp, #32]
 8006c9e:	f000 fa6d 	bl	800717c <__lshift>
 8006ca2:	4621      	mov	r1, r4
 8006ca4:	4683      	mov	fp, r0
 8006ca6:	f000 fad9 	bl	800725c <__mcmp>
 8006caa:	2800      	cmp	r0, #0
 8006cac:	dcb2      	bgt.n	8006c14 <_dtoa_r+0xac4>
 8006cae:	d102      	bne.n	8006cb6 <_dtoa_r+0xb66>
 8006cb0:	9b08      	ldr	r3, [sp, #32]
 8006cb2:	07db      	lsls	r3, r3, #31
 8006cb4:	d4ae      	bmi.n	8006c14 <_dtoa_r+0xac4>
 8006cb6:	463b      	mov	r3, r7
 8006cb8:	461f      	mov	r7, r3
 8006cba:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006cbe:	2a30      	cmp	r2, #48	; 0x30
 8006cc0:	d0fa      	beq.n	8006cb8 <_dtoa_r+0xb68>
 8006cc2:	e6f9      	b.n	8006ab8 <_dtoa_r+0x968>
 8006cc4:	9a03      	ldr	r2, [sp, #12]
 8006cc6:	429a      	cmp	r2, r3
 8006cc8:	d1a5      	bne.n	8006c16 <_dtoa_r+0xac6>
 8006cca:	2331      	movs	r3, #49	; 0x31
 8006ccc:	f10a 0a01 	add.w	sl, sl, #1
 8006cd0:	e779      	b.n	8006bc6 <_dtoa_r+0xa76>
 8006cd2:	4b14      	ldr	r3, [pc, #80]	; (8006d24 <_dtoa_r+0xbd4>)
 8006cd4:	f7ff baa8 	b.w	8006228 <_dtoa_r+0xd8>
 8006cd8:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	f47f aa81 	bne.w	80061e2 <_dtoa_r+0x92>
 8006ce0:	4b11      	ldr	r3, [pc, #68]	; (8006d28 <_dtoa_r+0xbd8>)
 8006ce2:	f7ff baa1 	b.w	8006228 <_dtoa_r+0xd8>
 8006ce6:	f1b9 0f00 	cmp.w	r9, #0
 8006cea:	dc03      	bgt.n	8006cf4 <_dtoa_r+0xba4>
 8006cec:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006cee:	2b02      	cmp	r3, #2
 8006cf0:	f73f aecb 	bgt.w	8006a8a <_dtoa_r+0x93a>
 8006cf4:	9f03      	ldr	r7, [sp, #12]
 8006cf6:	4621      	mov	r1, r4
 8006cf8:	4658      	mov	r0, fp
 8006cfa:	f7ff f99b 	bl	8006034 <quorem>
 8006cfe:	9a03      	ldr	r2, [sp, #12]
 8006d00:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8006d04:	f807 3b01 	strb.w	r3, [r7], #1
 8006d08:	1aba      	subs	r2, r7, r2
 8006d0a:	4591      	cmp	r9, r2
 8006d0c:	ddba      	ble.n	8006c84 <_dtoa_r+0xb34>
 8006d0e:	4659      	mov	r1, fp
 8006d10:	2300      	movs	r3, #0
 8006d12:	220a      	movs	r2, #10
 8006d14:	4628      	mov	r0, r5
 8006d16:	f000 f885 	bl	8006e24 <__multadd>
 8006d1a:	4683      	mov	fp, r0
 8006d1c:	e7eb      	b.n	8006cf6 <_dtoa_r+0xba6>
 8006d1e:	bf00      	nop
 8006d20:	08008d1b 	.word	0x08008d1b
 8006d24:	08008c78 	.word	0x08008c78
 8006d28:	08008c9c 	.word	0x08008c9c

08006d2c <_localeconv_r>:
 8006d2c:	4800      	ldr	r0, [pc, #0]	; (8006d30 <_localeconv_r+0x4>)
 8006d2e:	4770      	bx	lr
 8006d30:	2000016c 	.word	0x2000016c

08006d34 <malloc>:
 8006d34:	4b02      	ldr	r3, [pc, #8]	; (8006d40 <malloc+0xc>)
 8006d36:	4601      	mov	r1, r0
 8006d38:	6818      	ldr	r0, [r3, #0]
 8006d3a:	f000 bc0f 	b.w	800755c <_malloc_r>
 8006d3e:	bf00      	nop
 8006d40:	20000018 	.word	0x20000018

08006d44 <memchr>:
 8006d44:	4603      	mov	r3, r0
 8006d46:	b510      	push	{r4, lr}
 8006d48:	b2c9      	uxtb	r1, r1
 8006d4a:	4402      	add	r2, r0
 8006d4c:	4293      	cmp	r3, r2
 8006d4e:	4618      	mov	r0, r3
 8006d50:	d101      	bne.n	8006d56 <memchr+0x12>
 8006d52:	2000      	movs	r0, #0
 8006d54:	e003      	b.n	8006d5e <memchr+0x1a>
 8006d56:	7804      	ldrb	r4, [r0, #0]
 8006d58:	3301      	adds	r3, #1
 8006d5a:	428c      	cmp	r4, r1
 8006d5c:	d1f6      	bne.n	8006d4c <memchr+0x8>
 8006d5e:	bd10      	pop	{r4, pc}

08006d60 <_Balloc>:
 8006d60:	b570      	push	{r4, r5, r6, lr}
 8006d62:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006d64:	4604      	mov	r4, r0
 8006d66:	460d      	mov	r5, r1
 8006d68:	b976      	cbnz	r6, 8006d88 <_Balloc+0x28>
 8006d6a:	2010      	movs	r0, #16
 8006d6c:	f7ff ffe2 	bl	8006d34 <malloc>
 8006d70:	4602      	mov	r2, r0
 8006d72:	6260      	str	r0, [r4, #36]	; 0x24
 8006d74:	b920      	cbnz	r0, 8006d80 <_Balloc+0x20>
 8006d76:	2166      	movs	r1, #102	; 0x66
 8006d78:	4b17      	ldr	r3, [pc, #92]	; (8006dd8 <_Balloc+0x78>)
 8006d7a:	4818      	ldr	r0, [pc, #96]	; (8006ddc <_Balloc+0x7c>)
 8006d7c:	f000 fdce 	bl	800791c <__assert_func>
 8006d80:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006d84:	6006      	str	r6, [r0, #0]
 8006d86:	60c6      	str	r6, [r0, #12]
 8006d88:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8006d8a:	68f3      	ldr	r3, [r6, #12]
 8006d8c:	b183      	cbz	r3, 8006db0 <_Balloc+0x50>
 8006d8e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006d90:	68db      	ldr	r3, [r3, #12]
 8006d92:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006d96:	b9b8      	cbnz	r0, 8006dc8 <_Balloc+0x68>
 8006d98:	2101      	movs	r1, #1
 8006d9a:	fa01 f605 	lsl.w	r6, r1, r5
 8006d9e:	1d72      	adds	r2, r6, #5
 8006da0:	4620      	mov	r0, r4
 8006da2:	0092      	lsls	r2, r2, #2
 8006da4:	f000 fb5e 	bl	8007464 <_calloc_r>
 8006da8:	b160      	cbz	r0, 8006dc4 <_Balloc+0x64>
 8006daa:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006dae:	e00e      	b.n	8006dce <_Balloc+0x6e>
 8006db0:	2221      	movs	r2, #33	; 0x21
 8006db2:	2104      	movs	r1, #4
 8006db4:	4620      	mov	r0, r4
 8006db6:	f000 fb55 	bl	8007464 <_calloc_r>
 8006dba:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006dbc:	60f0      	str	r0, [r6, #12]
 8006dbe:	68db      	ldr	r3, [r3, #12]
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d1e4      	bne.n	8006d8e <_Balloc+0x2e>
 8006dc4:	2000      	movs	r0, #0
 8006dc6:	bd70      	pop	{r4, r5, r6, pc}
 8006dc8:	6802      	ldr	r2, [r0, #0]
 8006dca:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006dce:	2300      	movs	r3, #0
 8006dd0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006dd4:	e7f7      	b.n	8006dc6 <_Balloc+0x66>
 8006dd6:	bf00      	nop
 8006dd8:	08008ca9 	.word	0x08008ca9
 8006ddc:	08008d2c 	.word	0x08008d2c

08006de0 <_Bfree>:
 8006de0:	b570      	push	{r4, r5, r6, lr}
 8006de2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006de4:	4605      	mov	r5, r0
 8006de6:	460c      	mov	r4, r1
 8006de8:	b976      	cbnz	r6, 8006e08 <_Bfree+0x28>
 8006dea:	2010      	movs	r0, #16
 8006dec:	f7ff ffa2 	bl	8006d34 <malloc>
 8006df0:	4602      	mov	r2, r0
 8006df2:	6268      	str	r0, [r5, #36]	; 0x24
 8006df4:	b920      	cbnz	r0, 8006e00 <_Bfree+0x20>
 8006df6:	218a      	movs	r1, #138	; 0x8a
 8006df8:	4b08      	ldr	r3, [pc, #32]	; (8006e1c <_Bfree+0x3c>)
 8006dfa:	4809      	ldr	r0, [pc, #36]	; (8006e20 <_Bfree+0x40>)
 8006dfc:	f000 fd8e 	bl	800791c <__assert_func>
 8006e00:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006e04:	6006      	str	r6, [r0, #0]
 8006e06:	60c6      	str	r6, [r0, #12]
 8006e08:	b13c      	cbz	r4, 8006e1a <_Bfree+0x3a>
 8006e0a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006e0c:	6862      	ldr	r2, [r4, #4]
 8006e0e:	68db      	ldr	r3, [r3, #12]
 8006e10:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006e14:	6021      	str	r1, [r4, #0]
 8006e16:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006e1a:	bd70      	pop	{r4, r5, r6, pc}
 8006e1c:	08008ca9 	.word	0x08008ca9
 8006e20:	08008d2c 	.word	0x08008d2c

08006e24 <__multadd>:
 8006e24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006e28:	4607      	mov	r7, r0
 8006e2a:	460c      	mov	r4, r1
 8006e2c:	461e      	mov	r6, r3
 8006e2e:	2000      	movs	r0, #0
 8006e30:	690d      	ldr	r5, [r1, #16]
 8006e32:	f101 0c14 	add.w	ip, r1, #20
 8006e36:	f8dc 3000 	ldr.w	r3, [ip]
 8006e3a:	3001      	adds	r0, #1
 8006e3c:	b299      	uxth	r1, r3
 8006e3e:	fb02 6101 	mla	r1, r2, r1, r6
 8006e42:	0c1e      	lsrs	r6, r3, #16
 8006e44:	0c0b      	lsrs	r3, r1, #16
 8006e46:	fb02 3306 	mla	r3, r2, r6, r3
 8006e4a:	b289      	uxth	r1, r1
 8006e4c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006e50:	4285      	cmp	r5, r0
 8006e52:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8006e56:	f84c 1b04 	str.w	r1, [ip], #4
 8006e5a:	dcec      	bgt.n	8006e36 <__multadd+0x12>
 8006e5c:	b30e      	cbz	r6, 8006ea2 <__multadd+0x7e>
 8006e5e:	68a3      	ldr	r3, [r4, #8]
 8006e60:	42ab      	cmp	r3, r5
 8006e62:	dc19      	bgt.n	8006e98 <__multadd+0x74>
 8006e64:	6861      	ldr	r1, [r4, #4]
 8006e66:	4638      	mov	r0, r7
 8006e68:	3101      	adds	r1, #1
 8006e6a:	f7ff ff79 	bl	8006d60 <_Balloc>
 8006e6e:	4680      	mov	r8, r0
 8006e70:	b928      	cbnz	r0, 8006e7e <__multadd+0x5a>
 8006e72:	4602      	mov	r2, r0
 8006e74:	21b5      	movs	r1, #181	; 0xb5
 8006e76:	4b0c      	ldr	r3, [pc, #48]	; (8006ea8 <__multadd+0x84>)
 8006e78:	480c      	ldr	r0, [pc, #48]	; (8006eac <__multadd+0x88>)
 8006e7a:	f000 fd4f 	bl	800791c <__assert_func>
 8006e7e:	6922      	ldr	r2, [r4, #16]
 8006e80:	f104 010c 	add.w	r1, r4, #12
 8006e84:	3202      	adds	r2, #2
 8006e86:	0092      	lsls	r2, r2, #2
 8006e88:	300c      	adds	r0, #12
 8006e8a:	f7fe fc23 	bl	80056d4 <memcpy>
 8006e8e:	4621      	mov	r1, r4
 8006e90:	4638      	mov	r0, r7
 8006e92:	f7ff ffa5 	bl	8006de0 <_Bfree>
 8006e96:	4644      	mov	r4, r8
 8006e98:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006e9c:	3501      	adds	r5, #1
 8006e9e:	615e      	str	r6, [r3, #20]
 8006ea0:	6125      	str	r5, [r4, #16]
 8006ea2:	4620      	mov	r0, r4
 8006ea4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006ea8:	08008d1b 	.word	0x08008d1b
 8006eac:	08008d2c 	.word	0x08008d2c

08006eb0 <__hi0bits>:
 8006eb0:	0c02      	lsrs	r2, r0, #16
 8006eb2:	0412      	lsls	r2, r2, #16
 8006eb4:	4603      	mov	r3, r0
 8006eb6:	b9ca      	cbnz	r2, 8006eec <__hi0bits+0x3c>
 8006eb8:	0403      	lsls	r3, r0, #16
 8006eba:	2010      	movs	r0, #16
 8006ebc:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8006ec0:	bf04      	itt	eq
 8006ec2:	021b      	lsleq	r3, r3, #8
 8006ec4:	3008      	addeq	r0, #8
 8006ec6:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8006eca:	bf04      	itt	eq
 8006ecc:	011b      	lsleq	r3, r3, #4
 8006ece:	3004      	addeq	r0, #4
 8006ed0:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8006ed4:	bf04      	itt	eq
 8006ed6:	009b      	lsleq	r3, r3, #2
 8006ed8:	3002      	addeq	r0, #2
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	db05      	blt.n	8006eea <__hi0bits+0x3a>
 8006ede:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8006ee2:	f100 0001 	add.w	r0, r0, #1
 8006ee6:	bf08      	it	eq
 8006ee8:	2020      	moveq	r0, #32
 8006eea:	4770      	bx	lr
 8006eec:	2000      	movs	r0, #0
 8006eee:	e7e5      	b.n	8006ebc <__hi0bits+0xc>

08006ef0 <__lo0bits>:
 8006ef0:	6803      	ldr	r3, [r0, #0]
 8006ef2:	4602      	mov	r2, r0
 8006ef4:	f013 0007 	ands.w	r0, r3, #7
 8006ef8:	d00b      	beq.n	8006f12 <__lo0bits+0x22>
 8006efa:	07d9      	lsls	r1, r3, #31
 8006efc:	d421      	bmi.n	8006f42 <__lo0bits+0x52>
 8006efe:	0798      	lsls	r0, r3, #30
 8006f00:	bf49      	itett	mi
 8006f02:	085b      	lsrmi	r3, r3, #1
 8006f04:	089b      	lsrpl	r3, r3, #2
 8006f06:	2001      	movmi	r0, #1
 8006f08:	6013      	strmi	r3, [r2, #0]
 8006f0a:	bf5c      	itt	pl
 8006f0c:	2002      	movpl	r0, #2
 8006f0e:	6013      	strpl	r3, [r2, #0]
 8006f10:	4770      	bx	lr
 8006f12:	b299      	uxth	r1, r3
 8006f14:	b909      	cbnz	r1, 8006f1a <__lo0bits+0x2a>
 8006f16:	2010      	movs	r0, #16
 8006f18:	0c1b      	lsrs	r3, r3, #16
 8006f1a:	b2d9      	uxtb	r1, r3
 8006f1c:	b909      	cbnz	r1, 8006f22 <__lo0bits+0x32>
 8006f1e:	3008      	adds	r0, #8
 8006f20:	0a1b      	lsrs	r3, r3, #8
 8006f22:	0719      	lsls	r1, r3, #28
 8006f24:	bf04      	itt	eq
 8006f26:	091b      	lsreq	r3, r3, #4
 8006f28:	3004      	addeq	r0, #4
 8006f2a:	0799      	lsls	r1, r3, #30
 8006f2c:	bf04      	itt	eq
 8006f2e:	089b      	lsreq	r3, r3, #2
 8006f30:	3002      	addeq	r0, #2
 8006f32:	07d9      	lsls	r1, r3, #31
 8006f34:	d403      	bmi.n	8006f3e <__lo0bits+0x4e>
 8006f36:	085b      	lsrs	r3, r3, #1
 8006f38:	f100 0001 	add.w	r0, r0, #1
 8006f3c:	d003      	beq.n	8006f46 <__lo0bits+0x56>
 8006f3e:	6013      	str	r3, [r2, #0]
 8006f40:	4770      	bx	lr
 8006f42:	2000      	movs	r0, #0
 8006f44:	4770      	bx	lr
 8006f46:	2020      	movs	r0, #32
 8006f48:	4770      	bx	lr
	...

08006f4c <__i2b>:
 8006f4c:	b510      	push	{r4, lr}
 8006f4e:	460c      	mov	r4, r1
 8006f50:	2101      	movs	r1, #1
 8006f52:	f7ff ff05 	bl	8006d60 <_Balloc>
 8006f56:	4602      	mov	r2, r0
 8006f58:	b928      	cbnz	r0, 8006f66 <__i2b+0x1a>
 8006f5a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8006f5e:	4b04      	ldr	r3, [pc, #16]	; (8006f70 <__i2b+0x24>)
 8006f60:	4804      	ldr	r0, [pc, #16]	; (8006f74 <__i2b+0x28>)
 8006f62:	f000 fcdb 	bl	800791c <__assert_func>
 8006f66:	2301      	movs	r3, #1
 8006f68:	6144      	str	r4, [r0, #20]
 8006f6a:	6103      	str	r3, [r0, #16]
 8006f6c:	bd10      	pop	{r4, pc}
 8006f6e:	bf00      	nop
 8006f70:	08008d1b 	.word	0x08008d1b
 8006f74:	08008d2c 	.word	0x08008d2c

08006f78 <__multiply>:
 8006f78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f7c:	4691      	mov	r9, r2
 8006f7e:	690a      	ldr	r2, [r1, #16]
 8006f80:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8006f84:	460c      	mov	r4, r1
 8006f86:	429a      	cmp	r2, r3
 8006f88:	bfbe      	ittt	lt
 8006f8a:	460b      	movlt	r3, r1
 8006f8c:	464c      	movlt	r4, r9
 8006f8e:	4699      	movlt	r9, r3
 8006f90:	6927      	ldr	r7, [r4, #16]
 8006f92:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8006f96:	68a3      	ldr	r3, [r4, #8]
 8006f98:	6861      	ldr	r1, [r4, #4]
 8006f9a:	eb07 060a 	add.w	r6, r7, sl
 8006f9e:	42b3      	cmp	r3, r6
 8006fa0:	b085      	sub	sp, #20
 8006fa2:	bfb8      	it	lt
 8006fa4:	3101      	addlt	r1, #1
 8006fa6:	f7ff fedb 	bl	8006d60 <_Balloc>
 8006faa:	b930      	cbnz	r0, 8006fba <__multiply+0x42>
 8006fac:	4602      	mov	r2, r0
 8006fae:	f240 115d 	movw	r1, #349	; 0x15d
 8006fb2:	4b43      	ldr	r3, [pc, #268]	; (80070c0 <__multiply+0x148>)
 8006fb4:	4843      	ldr	r0, [pc, #268]	; (80070c4 <__multiply+0x14c>)
 8006fb6:	f000 fcb1 	bl	800791c <__assert_func>
 8006fba:	f100 0514 	add.w	r5, r0, #20
 8006fbe:	462b      	mov	r3, r5
 8006fc0:	2200      	movs	r2, #0
 8006fc2:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8006fc6:	4543      	cmp	r3, r8
 8006fc8:	d321      	bcc.n	800700e <__multiply+0x96>
 8006fca:	f104 0314 	add.w	r3, r4, #20
 8006fce:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8006fd2:	f109 0314 	add.w	r3, r9, #20
 8006fd6:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8006fda:	9202      	str	r2, [sp, #8]
 8006fdc:	1b3a      	subs	r2, r7, r4
 8006fde:	3a15      	subs	r2, #21
 8006fe0:	f022 0203 	bic.w	r2, r2, #3
 8006fe4:	3204      	adds	r2, #4
 8006fe6:	f104 0115 	add.w	r1, r4, #21
 8006fea:	428f      	cmp	r7, r1
 8006fec:	bf38      	it	cc
 8006fee:	2204      	movcc	r2, #4
 8006ff0:	9201      	str	r2, [sp, #4]
 8006ff2:	9a02      	ldr	r2, [sp, #8]
 8006ff4:	9303      	str	r3, [sp, #12]
 8006ff6:	429a      	cmp	r2, r3
 8006ff8:	d80c      	bhi.n	8007014 <__multiply+0x9c>
 8006ffa:	2e00      	cmp	r6, #0
 8006ffc:	dd03      	ble.n	8007006 <__multiply+0x8e>
 8006ffe:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007002:	2b00      	cmp	r3, #0
 8007004:	d059      	beq.n	80070ba <__multiply+0x142>
 8007006:	6106      	str	r6, [r0, #16]
 8007008:	b005      	add	sp, #20
 800700a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800700e:	f843 2b04 	str.w	r2, [r3], #4
 8007012:	e7d8      	b.n	8006fc6 <__multiply+0x4e>
 8007014:	f8b3 a000 	ldrh.w	sl, [r3]
 8007018:	f1ba 0f00 	cmp.w	sl, #0
 800701c:	d023      	beq.n	8007066 <__multiply+0xee>
 800701e:	46a9      	mov	r9, r5
 8007020:	f04f 0c00 	mov.w	ip, #0
 8007024:	f104 0e14 	add.w	lr, r4, #20
 8007028:	f85e 2b04 	ldr.w	r2, [lr], #4
 800702c:	f8d9 1000 	ldr.w	r1, [r9]
 8007030:	fa1f fb82 	uxth.w	fp, r2
 8007034:	b289      	uxth	r1, r1
 8007036:	fb0a 110b 	mla	r1, sl, fp, r1
 800703a:	4461      	add	r1, ip
 800703c:	f8d9 c000 	ldr.w	ip, [r9]
 8007040:	0c12      	lsrs	r2, r2, #16
 8007042:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8007046:	fb0a c202 	mla	r2, sl, r2, ip
 800704a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800704e:	b289      	uxth	r1, r1
 8007050:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007054:	4577      	cmp	r7, lr
 8007056:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800705a:	f849 1b04 	str.w	r1, [r9], #4
 800705e:	d8e3      	bhi.n	8007028 <__multiply+0xb0>
 8007060:	9a01      	ldr	r2, [sp, #4]
 8007062:	f845 c002 	str.w	ip, [r5, r2]
 8007066:	9a03      	ldr	r2, [sp, #12]
 8007068:	3304      	adds	r3, #4
 800706a:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800706e:	f1b9 0f00 	cmp.w	r9, #0
 8007072:	d020      	beq.n	80070b6 <__multiply+0x13e>
 8007074:	46ae      	mov	lr, r5
 8007076:	f04f 0a00 	mov.w	sl, #0
 800707a:	6829      	ldr	r1, [r5, #0]
 800707c:	f104 0c14 	add.w	ip, r4, #20
 8007080:	f8bc b000 	ldrh.w	fp, [ip]
 8007084:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8007088:	b289      	uxth	r1, r1
 800708a:	fb09 220b 	mla	r2, r9, fp, r2
 800708e:	4492      	add	sl, r2
 8007090:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8007094:	f84e 1b04 	str.w	r1, [lr], #4
 8007098:	f85c 2b04 	ldr.w	r2, [ip], #4
 800709c:	f8be 1000 	ldrh.w	r1, [lr]
 80070a0:	0c12      	lsrs	r2, r2, #16
 80070a2:	fb09 1102 	mla	r1, r9, r2, r1
 80070a6:	4567      	cmp	r7, ip
 80070a8:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 80070ac:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80070b0:	d8e6      	bhi.n	8007080 <__multiply+0x108>
 80070b2:	9a01      	ldr	r2, [sp, #4]
 80070b4:	50a9      	str	r1, [r5, r2]
 80070b6:	3504      	adds	r5, #4
 80070b8:	e79b      	b.n	8006ff2 <__multiply+0x7a>
 80070ba:	3e01      	subs	r6, #1
 80070bc:	e79d      	b.n	8006ffa <__multiply+0x82>
 80070be:	bf00      	nop
 80070c0:	08008d1b 	.word	0x08008d1b
 80070c4:	08008d2c 	.word	0x08008d2c

080070c8 <__pow5mult>:
 80070c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80070cc:	4615      	mov	r5, r2
 80070ce:	f012 0203 	ands.w	r2, r2, #3
 80070d2:	4606      	mov	r6, r0
 80070d4:	460f      	mov	r7, r1
 80070d6:	d007      	beq.n	80070e8 <__pow5mult+0x20>
 80070d8:	4c25      	ldr	r4, [pc, #148]	; (8007170 <__pow5mult+0xa8>)
 80070da:	3a01      	subs	r2, #1
 80070dc:	2300      	movs	r3, #0
 80070de:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80070e2:	f7ff fe9f 	bl	8006e24 <__multadd>
 80070e6:	4607      	mov	r7, r0
 80070e8:	10ad      	asrs	r5, r5, #2
 80070ea:	d03d      	beq.n	8007168 <__pow5mult+0xa0>
 80070ec:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80070ee:	b97c      	cbnz	r4, 8007110 <__pow5mult+0x48>
 80070f0:	2010      	movs	r0, #16
 80070f2:	f7ff fe1f 	bl	8006d34 <malloc>
 80070f6:	4602      	mov	r2, r0
 80070f8:	6270      	str	r0, [r6, #36]	; 0x24
 80070fa:	b928      	cbnz	r0, 8007108 <__pow5mult+0x40>
 80070fc:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8007100:	4b1c      	ldr	r3, [pc, #112]	; (8007174 <__pow5mult+0xac>)
 8007102:	481d      	ldr	r0, [pc, #116]	; (8007178 <__pow5mult+0xb0>)
 8007104:	f000 fc0a 	bl	800791c <__assert_func>
 8007108:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800710c:	6004      	str	r4, [r0, #0]
 800710e:	60c4      	str	r4, [r0, #12]
 8007110:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8007114:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007118:	b94c      	cbnz	r4, 800712e <__pow5mult+0x66>
 800711a:	f240 2171 	movw	r1, #625	; 0x271
 800711e:	4630      	mov	r0, r6
 8007120:	f7ff ff14 	bl	8006f4c <__i2b>
 8007124:	2300      	movs	r3, #0
 8007126:	4604      	mov	r4, r0
 8007128:	f8c8 0008 	str.w	r0, [r8, #8]
 800712c:	6003      	str	r3, [r0, #0]
 800712e:	f04f 0900 	mov.w	r9, #0
 8007132:	07eb      	lsls	r3, r5, #31
 8007134:	d50a      	bpl.n	800714c <__pow5mult+0x84>
 8007136:	4639      	mov	r1, r7
 8007138:	4622      	mov	r2, r4
 800713a:	4630      	mov	r0, r6
 800713c:	f7ff ff1c 	bl	8006f78 <__multiply>
 8007140:	4680      	mov	r8, r0
 8007142:	4639      	mov	r1, r7
 8007144:	4630      	mov	r0, r6
 8007146:	f7ff fe4b 	bl	8006de0 <_Bfree>
 800714a:	4647      	mov	r7, r8
 800714c:	106d      	asrs	r5, r5, #1
 800714e:	d00b      	beq.n	8007168 <__pow5mult+0xa0>
 8007150:	6820      	ldr	r0, [r4, #0]
 8007152:	b938      	cbnz	r0, 8007164 <__pow5mult+0x9c>
 8007154:	4622      	mov	r2, r4
 8007156:	4621      	mov	r1, r4
 8007158:	4630      	mov	r0, r6
 800715a:	f7ff ff0d 	bl	8006f78 <__multiply>
 800715e:	6020      	str	r0, [r4, #0]
 8007160:	f8c0 9000 	str.w	r9, [r0]
 8007164:	4604      	mov	r4, r0
 8007166:	e7e4      	b.n	8007132 <__pow5mult+0x6a>
 8007168:	4638      	mov	r0, r7
 800716a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800716e:	bf00      	nop
 8007170:	08008e78 	.word	0x08008e78
 8007174:	08008ca9 	.word	0x08008ca9
 8007178:	08008d2c 	.word	0x08008d2c

0800717c <__lshift>:
 800717c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007180:	460c      	mov	r4, r1
 8007182:	4607      	mov	r7, r0
 8007184:	4691      	mov	r9, r2
 8007186:	6923      	ldr	r3, [r4, #16]
 8007188:	6849      	ldr	r1, [r1, #4]
 800718a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800718e:	68a3      	ldr	r3, [r4, #8]
 8007190:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007194:	f108 0601 	add.w	r6, r8, #1
 8007198:	42b3      	cmp	r3, r6
 800719a:	db0b      	blt.n	80071b4 <__lshift+0x38>
 800719c:	4638      	mov	r0, r7
 800719e:	f7ff fddf 	bl	8006d60 <_Balloc>
 80071a2:	4605      	mov	r5, r0
 80071a4:	b948      	cbnz	r0, 80071ba <__lshift+0x3e>
 80071a6:	4602      	mov	r2, r0
 80071a8:	f240 11d9 	movw	r1, #473	; 0x1d9
 80071ac:	4b29      	ldr	r3, [pc, #164]	; (8007254 <__lshift+0xd8>)
 80071ae:	482a      	ldr	r0, [pc, #168]	; (8007258 <__lshift+0xdc>)
 80071b0:	f000 fbb4 	bl	800791c <__assert_func>
 80071b4:	3101      	adds	r1, #1
 80071b6:	005b      	lsls	r3, r3, #1
 80071b8:	e7ee      	b.n	8007198 <__lshift+0x1c>
 80071ba:	2300      	movs	r3, #0
 80071bc:	f100 0114 	add.w	r1, r0, #20
 80071c0:	f100 0210 	add.w	r2, r0, #16
 80071c4:	4618      	mov	r0, r3
 80071c6:	4553      	cmp	r3, sl
 80071c8:	db37      	blt.n	800723a <__lshift+0xbe>
 80071ca:	6920      	ldr	r0, [r4, #16]
 80071cc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80071d0:	f104 0314 	add.w	r3, r4, #20
 80071d4:	f019 091f 	ands.w	r9, r9, #31
 80071d8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80071dc:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80071e0:	d02f      	beq.n	8007242 <__lshift+0xc6>
 80071e2:	468a      	mov	sl, r1
 80071e4:	f04f 0c00 	mov.w	ip, #0
 80071e8:	f1c9 0e20 	rsb	lr, r9, #32
 80071ec:	681a      	ldr	r2, [r3, #0]
 80071ee:	fa02 f209 	lsl.w	r2, r2, r9
 80071f2:	ea42 020c 	orr.w	r2, r2, ip
 80071f6:	f84a 2b04 	str.w	r2, [sl], #4
 80071fa:	f853 2b04 	ldr.w	r2, [r3], #4
 80071fe:	4298      	cmp	r0, r3
 8007200:	fa22 fc0e 	lsr.w	ip, r2, lr
 8007204:	d8f2      	bhi.n	80071ec <__lshift+0x70>
 8007206:	1b03      	subs	r3, r0, r4
 8007208:	3b15      	subs	r3, #21
 800720a:	f023 0303 	bic.w	r3, r3, #3
 800720e:	3304      	adds	r3, #4
 8007210:	f104 0215 	add.w	r2, r4, #21
 8007214:	4290      	cmp	r0, r2
 8007216:	bf38      	it	cc
 8007218:	2304      	movcc	r3, #4
 800721a:	f841 c003 	str.w	ip, [r1, r3]
 800721e:	f1bc 0f00 	cmp.w	ip, #0
 8007222:	d001      	beq.n	8007228 <__lshift+0xac>
 8007224:	f108 0602 	add.w	r6, r8, #2
 8007228:	3e01      	subs	r6, #1
 800722a:	4638      	mov	r0, r7
 800722c:	4621      	mov	r1, r4
 800722e:	612e      	str	r6, [r5, #16]
 8007230:	f7ff fdd6 	bl	8006de0 <_Bfree>
 8007234:	4628      	mov	r0, r5
 8007236:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800723a:	f842 0f04 	str.w	r0, [r2, #4]!
 800723e:	3301      	adds	r3, #1
 8007240:	e7c1      	b.n	80071c6 <__lshift+0x4a>
 8007242:	3904      	subs	r1, #4
 8007244:	f853 2b04 	ldr.w	r2, [r3], #4
 8007248:	4298      	cmp	r0, r3
 800724a:	f841 2f04 	str.w	r2, [r1, #4]!
 800724e:	d8f9      	bhi.n	8007244 <__lshift+0xc8>
 8007250:	e7ea      	b.n	8007228 <__lshift+0xac>
 8007252:	bf00      	nop
 8007254:	08008d1b 	.word	0x08008d1b
 8007258:	08008d2c 	.word	0x08008d2c

0800725c <__mcmp>:
 800725c:	4603      	mov	r3, r0
 800725e:	690a      	ldr	r2, [r1, #16]
 8007260:	6900      	ldr	r0, [r0, #16]
 8007262:	b530      	push	{r4, r5, lr}
 8007264:	1a80      	subs	r0, r0, r2
 8007266:	d10d      	bne.n	8007284 <__mcmp+0x28>
 8007268:	3314      	adds	r3, #20
 800726a:	3114      	adds	r1, #20
 800726c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8007270:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8007274:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8007278:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800727c:	4295      	cmp	r5, r2
 800727e:	d002      	beq.n	8007286 <__mcmp+0x2a>
 8007280:	d304      	bcc.n	800728c <__mcmp+0x30>
 8007282:	2001      	movs	r0, #1
 8007284:	bd30      	pop	{r4, r5, pc}
 8007286:	42a3      	cmp	r3, r4
 8007288:	d3f4      	bcc.n	8007274 <__mcmp+0x18>
 800728a:	e7fb      	b.n	8007284 <__mcmp+0x28>
 800728c:	f04f 30ff 	mov.w	r0, #4294967295
 8007290:	e7f8      	b.n	8007284 <__mcmp+0x28>
	...

08007294 <__mdiff>:
 8007294:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007298:	460d      	mov	r5, r1
 800729a:	4607      	mov	r7, r0
 800729c:	4611      	mov	r1, r2
 800729e:	4628      	mov	r0, r5
 80072a0:	4614      	mov	r4, r2
 80072a2:	f7ff ffdb 	bl	800725c <__mcmp>
 80072a6:	1e06      	subs	r6, r0, #0
 80072a8:	d111      	bne.n	80072ce <__mdiff+0x3a>
 80072aa:	4631      	mov	r1, r6
 80072ac:	4638      	mov	r0, r7
 80072ae:	f7ff fd57 	bl	8006d60 <_Balloc>
 80072b2:	4602      	mov	r2, r0
 80072b4:	b928      	cbnz	r0, 80072c2 <__mdiff+0x2e>
 80072b6:	f240 2132 	movw	r1, #562	; 0x232
 80072ba:	4b3a      	ldr	r3, [pc, #232]	; (80073a4 <__mdiff+0x110>)
 80072bc:	483a      	ldr	r0, [pc, #232]	; (80073a8 <__mdiff+0x114>)
 80072be:	f000 fb2d 	bl	800791c <__assert_func>
 80072c2:	2301      	movs	r3, #1
 80072c4:	e9c0 3604 	strd	r3, r6, [r0, #16]
 80072c8:	4610      	mov	r0, r2
 80072ca:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80072ce:	bfa4      	itt	ge
 80072d0:	4623      	movge	r3, r4
 80072d2:	462c      	movge	r4, r5
 80072d4:	4638      	mov	r0, r7
 80072d6:	6861      	ldr	r1, [r4, #4]
 80072d8:	bfa6      	itte	ge
 80072da:	461d      	movge	r5, r3
 80072dc:	2600      	movge	r6, #0
 80072de:	2601      	movlt	r6, #1
 80072e0:	f7ff fd3e 	bl	8006d60 <_Balloc>
 80072e4:	4602      	mov	r2, r0
 80072e6:	b918      	cbnz	r0, 80072f0 <__mdiff+0x5c>
 80072e8:	f44f 7110 	mov.w	r1, #576	; 0x240
 80072ec:	4b2d      	ldr	r3, [pc, #180]	; (80073a4 <__mdiff+0x110>)
 80072ee:	e7e5      	b.n	80072bc <__mdiff+0x28>
 80072f0:	f102 0814 	add.w	r8, r2, #20
 80072f4:	46c2      	mov	sl, r8
 80072f6:	f04f 0c00 	mov.w	ip, #0
 80072fa:	6927      	ldr	r7, [r4, #16]
 80072fc:	60c6      	str	r6, [r0, #12]
 80072fe:	692e      	ldr	r6, [r5, #16]
 8007300:	f104 0014 	add.w	r0, r4, #20
 8007304:	f105 0914 	add.w	r9, r5, #20
 8007308:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 800730c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8007310:	3410      	adds	r4, #16
 8007312:	f854 bf04 	ldr.w	fp, [r4, #4]!
 8007316:	f859 3b04 	ldr.w	r3, [r9], #4
 800731a:	fa1f f18b 	uxth.w	r1, fp
 800731e:	448c      	add	ip, r1
 8007320:	b299      	uxth	r1, r3
 8007322:	0c1b      	lsrs	r3, r3, #16
 8007324:	ebac 0101 	sub.w	r1, ip, r1
 8007328:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800732c:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8007330:	b289      	uxth	r1, r1
 8007332:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8007336:	454e      	cmp	r6, r9
 8007338:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800733c:	f84a 3b04 	str.w	r3, [sl], #4
 8007340:	d8e7      	bhi.n	8007312 <__mdiff+0x7e>
 8007342:	1b73      	subs	r3, r6, r5
 8007344:	3b15      	subs	r3, #21
 8007346:	f023 0303 	bic.w	r3, r3, #3
 800734a:	3515      	adds	r5, #21
 800734c:	3304      	adds	r3, #4
 800734e:	42ae      	cmp	r6, r5
 8007350:	bf38      	it	cc
 8007352:	2304      	movcc	r3, #4
 8007354:	4418      	add	r0, r3
 8007356:	4443      	add	r3, r8
 8007358:	461e      	mov	r6, r3
 800735a:	4605      	mov	r5, r0
 800735c:	4575      	cmp	r5, lr
 800735e:	d30e      	bcc.n	800737e <__mdiff+0xea>
 8007360:	f10e 0103 	add.w	r1, lr, #3
 8007364:	1a09      	subs	r1, r1, r0
 8007366:	f021 0103 	bic.w	r1, r1, #3
 800736a:	3803      	subs	r0, #3
 800736c:	4586      	cmp	lr, r0
 800736e:	bf38      	it	cc
 8007370:	2100      	movcc	r1, #0
 8007372:	4419      	add	r1, r3
 8007374:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8007378:	b18b      	cbz	r3, 800739e <__mdiff+0x10a>
 800737a:	6117      	str	r7, [r2, #16]
 800737c:	e7a4      	b.n	80072c8 <__mdiff+0x34>
 800737e:	f855 8b04 	ldr.w	r8, [r5], #4
 8007382:	fa1f f188 	uxth.w	r1, r8
 8007386:	4461      	add	r1, ip
 8007388:	140c      	asrs	r4, r1, #16
 800738a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800738e:	b289      	uxth	r1, r1
 8007390:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8007394:	ea4f 4c24 	mov.w	ip, r4, asr #16
 8007398:	f846 1b04 	str.w	r1, [r6], #4
 800739c:	e7de      	b.n	800735c <__mdiff+0xc8>
 800739e:	3f01      	subs	r7, #1
 80073a0:	e7e8      	b.n	8007374 <__mdiff+0xe0>
 80073a2:	bf00      	nop
 80073a4:	08008d1b 	.word	0x08008d1b
 80073a8:	08008d2c 	.word	0x08008d2c

080073ac <__d2b>:
 80073ac:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80073b0:	2101      	movs	r1, #1
 80073b2:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 80073b6:	4690      	mov	r8, r2
 80073b8:	461d      	mov	r5, r3
 80073ba:	f7ff fcd1 	bl	8006d60 <_Balloc>
 80073be:	4604      	mov	r4, r0
 80073c0:	b930      	cbnz	r0, 80073d0 <__d2b+0x24>
 80073c2:	4602      	mov	r2, r0
 80073c4:	f240 310a 	movw	r1, #778	; 0x30a
 80073c8:	4b24      	ldr	r3, [pc, #144]	; (800745c <__d2b+0xb0>)
 80073ca:	4825      	ldr	r0, [pc, #148]	; (8007460 <__d2b+0xb4>)
 80073cc:	f000 faa6 	bl	800791c <__assert_func>
 80073d0:	f3c5 0313 	ubfx	r3, r5, #0, #20
 80073d4:	f3c5 550a 	ubfx	r5, r5, #20, #11
 80073d8:	bb2d      	cbnz	r5, 8007426 <__d2b+0x7a>
 80073da:	9301      	str	r3, [sp, #4]
 80073dc:	f1b8 0300 	subs.w	r3, r8, #0
 80073e0:	d026      	beq.n	8007430 <__d2b+0x84>
 80073e2:	4668      	mov	r0, sp
 80073e4:	9300      	str	r3, [sp, #0]
 80073e6:	f7ff fd83 	bl	8006ef0 <__lo0bits>
 80073ea:	9900      	ldr	r1, [sp, #0]
 80073ec:	b1f0      	cbz	r0, 800742c <__d2b+0x80>
 80073ee:	9a01      	ldr	r2, [sp, #4]
 80073f0:	f1c0 0320 	rsb	r3, r0, #32
 80073f4:	fa02 f303 	lsl.w	r3, r2, r3
 80073f8:	430b      	orrs	r3, r1
 80073fa:	40c2      	lsrs	r2, r0
 80073fc:	6163      	str	r3, [r4, #20]
 80073fe:	9201      	str	r2, [sp, #4]
 8007400:	9b01      	ldr	r3, [sp, #4]
 8007402:	2b00      	cmp	r3, #0
 8007404:	bf14      	ite	ne
 8007406:	2102      	movne	r1, #2
 8007408:	2101      	moveq	r1, #1
 800740a:	61a3      	str	r3, [r4, #24]
 800740c:	6121      	str	r1, [r4, #16]
 800740e:	b1c5      	cbz	r5, 8007442 <__d2b+0x96>
 8007410:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8007414:	4405      	add	r5, r0
 8007416:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800741a:	603d      	str	r5, [r7, #0]
 800741c:	6030      	str	r0, [r6, #0]
 800741e:	4620      	mov	r0, r4
 8007420:	b002      	add	sp, #8
 8007422:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007426:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800742a:	e7d6      	b.n	80073da <__d2b+0x2e>
 800742c:	6161      	str	r1, [r4, #20]
 800742e:	e7e7      	b.n	8007400 <__d2b+0x54>
 8007430:	a801      	add	r0, sp, #4
 8007432:	f7ff fd5d 	bl	8006ef0 <__lo0bits>
 8007436:	2101      	movs	r1, #1
 8007438:	9b01      	ldr	r3, [sp, #4]
 800743a:	6121      	str	r1, [r4, #16]
 800743c:	6163      	str	r3, [r4, #20]
 800743e:	3020      	adds	r0, #32
 8007440:	e7e5      	b.n	800740e <__d2b+0x62>
 8007442:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 8007446:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800744a:	6038      	str	r0, [r7, #0]
 800744c:	6918      	ldr	r0, [r3, #16]
 800744e:	f7ff fd2f 	bl	8006eb0 <__hi0bits>
 8007452:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 8007456:	6031      	str	r1, [r6, #0]
 8007458:	e7e1      	b.n	800741e <__d2b+0x72>
 800745a:	bf00      	nop
 800745c:	08008d1b 	.word	0x08008d1b
 8007460:	08008d2c 	.word	0x08008d2c

08007464 <_calloc_r>:
 8007464:	b570      	push	{r4, r5, r6, lr}
 8007466:	fba1 5402 	umull	r5, r4, r1, r2
 800746a:	b934      	cbnz	r4, 800747a <_calloc_r+0x16>
 800746c:	4629      	mov	r1, r5
 800746e:	f000 f875 	bl	800755c <_malloc_r>
 8007472:	4606      	mov	r6, r0
 8007474:	b928      	cbnz	r0, 8007482 <_calloc_r+0x1e>
 8007476:	4630      	mov	r0, r6
 8007478:	bd70      	pop	{r4, r5, r6, pc}
 800747a:	220c      	movs	r2, #12
 800747c:	2600      	movs	r6, #0
 800747e:	6002      	str	r2, [r0, #0]
 8007480:	e7f9      	b.n	8007476 <_calloc_r+0x12>
 8007482:	462a      	mov	r2, r5
 8007484:	4621      	mov	r1, r4
 8007486:	f7fe f94d 	bl	8005724 <memset>
 800748a:	e7f4      	b.n	8007476 <_calloc_r+0x12>

0800748c <_free_r>:
 800748c:	b538      	push	{r3, r4, r5, lr}
 800748e:	4605      	mov	r5, r0
 8007490:	2900      	cmp	r1, #0
 8007492:	d040      	beq.n	8007516 <_free_r+0x8a>
 8007494:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007498:	1f0c      	subs	r4, r1, #4
 800749a:	2b00      	cmp	r3, #0
 800749c:	bfb8      	it	lt
 800749e:	18e4      	addlt	r4, r4, r3
 80074a0:	f000 fa7e 	bl	80079a0 <__malloc_lock>
 80074a4:	4a1c      	ldr	r2, [pc, #112]	; (8007518 <_free_r+0x8c>)
 80074a6:	6813      	ldr	r3, [r2, #0]
 80074a8:	b933      	cbnz	r3, 80074b8 <_free_r+0x2c>
 80074aa:	6063      	str	r3, [r4, #4]
 80074ac:	6014      	str	r4, [r2, #0]
 80074ae:	4628      	mov	r0, r5
 80074b0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80074b4:	f000 ba7a 	b.w	80079ac <__malloc_unlock>
 80074b8:	42a3      	cmp	r3, r4
 80074ba:	d908      	bls.n	80074ce <_free_r+0x42>
 80074bc:	6820      	ldr	r0, [r4, #0]
 80074be:	1821      	adds	r1, r4, r0
 80074c0:	428b      	cmp	r3, r1
 80074c2:	bf01      	itttt	eq
 80074c4:	6819      	ldreq	r1, [r3, #0]
 80074c6:	685b      	ldreq	r3, [r3, #4]
 80074c8:	1809      	addeq	r1, r1, r0
 80074ca:	6021      	streq	r1, [r4, #0]
 80074cc:	e7ed      	b.n	80074aa <_free_r+0x1e>
 80074ce:	461a      	mov	r2, r3
 80074d0:	685b      	ldr	r3, [r3, #4]
 80074d2:	b10b      	cbz	r3, 80074d8 <_free_r+0x4c>
 80074d4:	42a3      	cmp	r3, r4
 80074d6:	d9fa      	bls.n	80074ce <_free_r+0x42>
 80074d8:	6811      	ldr	r1, [r2, #0]
 80074da:	1850      	adds	r0, r2, r1
 80074dc:	42a0      	cmp	r0, r4
 80074de:	d10b      	bne.n	80074f8 <_free_r+0x6c>
 80074e0:	6820      	ldr	r0, [r4, #0]
 80074e2:	4401      	add	r1, r0
 80074e4:	1850      	adds	r0, r2, r1
 80074e6:	4283      	cmp	r3, r0
 80074e8:	6011      	str	r1, [r2, #0]
 80074ea:	d1e0      	bne.n	80074ae <_free_r+0x22>
 80074ec:	6818      	ldr	r0, [r3, #0]
 80074ee:	685b      	ldr	r3, [r3, #4]
 80074f0:	4401      	add	r1, r0
 80074f2:	6011      	str	r1, [r2, #0]
 80074f4:	6053      	str	r3, [r2, #4]
 80074f6:	e7da      	b.n	80074ae <_free_r+0x22>
 80074f8:	d902      	bls.n	8007500 <_free_r+0x74>
 80074fa:	230c      	movs	r3, #12
 80074fc:	602b      	str	r3, [r5, #0]
 80074fe:	e7d6      	b.n	80074ae <_free_r+0x22>
 8007500:	6820      	ldr	r0, [r4, #0]
 8007502:	1821      	adds	r1, r4, r0
 8007504:	428b      	cmp	r3, r1
 8007506:	bf01      	itttt	eq
 8007508:	6819      	ldreq	r1, [r3, #0]
 800750a:	685b      	ldreq	r3, [r3, #4]
 800750c:	1809      	addeq	r1, r1, r0
 800750e:	6021      	streq	r1, [r4, #0]
 8007510:	6063      	str	r3, [r4, #4]
 8007512:	6054      	str	r4, [r2, #4]
 8007514:	e7cb      	b.n	80074ae <_free_r+0x22>
 8007516:	bd38      	pop	{r3, r4, r5, pc}
 8007518:	20000608 	.word	0x20000608

0800751c <sbrk_aligned>:
 800751c:	b570      	push	{r4, r5, r6, lr}
 800751e:	4e0e      	ldr	r6, [pc, #56]	; (8007558 <sbrk_aligned+0x3c>)
 8007520:	460c      	mov	r4, r1
 8007522:	6831      	ldr	r1, [r6, #0]
 8007524:	4605      	mov	r5, r0
 8007526:	b911      	cbnz	r1, 800752e <sbrk_aligned+0x12>
 8007528:	f000 f9e8 	bl	80078fc <_sbrk_r>
 800752c:	6030      	str	r0, [r6, #0]
 800752e:	4621      	mov	r1, r4
 8007530:	4628      	mov	r0, r5
 8007532:	f000 f9e3 	bl	80078fc <_sbrk_r>
 8007536:	1c43      	adds	r3, r0, #1
 8007538:	d00a      	beq.n	8007550 <sbrk_aligned+0x34>
 800753a:	1cc4      	adds	r4, r0, #3
 800753c:	f024 0403 	bic.w	r4, r4, #3
 8007540:	42a0      	cmp	r0, r4
 8007542:	d007      	beq.n	8007554 <sbrk_aligned+0x38>
 8007544:	1a21      	subs	r1, r4, r0
 8007546:	4628      	mov	r0, r5
 8007548:	f000 f9d8 	bl	80078fc <_sbrk_r>
 800754c:	3001      	adds	r0, #1
 800754e:	d101      	bne.n	8007554 <sbrk_aligned+0x38>
 8007550:	f04f 34ff 	mov.w	r4, #4294967295
 8007554:	4620      	mov	r0, r4
 8007556:	bd70      	pop	{r4, r5, r6, pc}
 8007558:	2000060c 	.word	0x2000060c

0800755c <_malloc_r>:
 800755c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007560:	1ccd      	adds	r5, r1, #3
 8007562:	f025 0503 	bic.w	r5, r5, #3
 8007566:	3508      	adds	r5, #8
 8007568:	2d0c      	cmp	r5, #12
 800756a:	bf38      	it	cc
 800756c:	250c      	movcc	r5, #12
 800756e:	2d00      	cmp	r5, #0
 8007570:	4607      	mov	r7, r0
 8007572:	db01      	blt.n	8007578 <_malloc_r+0x1c>
 8007574:	42a9      	cmp	r1, r5
 8007576:	d905      	bls.n	8007584 <_malloc_r+0x28>
 8007578:	230c      	movs	r3, #12
 800757a:	2600      	movs	r6, #0
 800757c:	603b      	str	r3, [r7, #0]
 800757e:	4630      	mov	r0, r6
 8007580:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007584:	4e2e      	ldr	r6, [pc, #184]	; (8007640 <_malloc_r+0xe4>)
 8007586:	f000 fa0b 	bl	80079a0 <__malloc_lock>
 800758a:	6833      	ldr	r3, [r6, #0]
 800758c:	461c      	mov	r4, r3
 800758e:	bb34      	cbnz	r4, 80075de <_malloc_r+0x82>
 8007590:	4629      	mov	r1, r5
 8007592:	4638      	mov	r0, r7
 8007594:	f7ff ffc2 	bl	800751c <sbrk_aligned>
 8007598:	1c43      	adds	r3, r0, #1
 800759a:	4604      	mov	r4, r0
 800759c:	d14d      	bne.n	800763a <_malloc_r+0xde>
 800759e:	6834      	ldr	r4, [r6, #0]
 80075a0:	4626      	mov	r6, r4
 80075a2:	2e00      	cmp	r6, #0
 80075a4:	d140      	bne.n	8007628 <_malloc_r+0xcc>
 80075a6:	6823      	ldr	r3, [r4, #0]
 80075a8:	4631      	mov	r1, r6
 80075aa:	4638      	mov	r0, r7
 80075ac:	eb04 0803 	add.w	r8, r4, r3
 80075b0:	f000 f9a4 	bl	80078fc <_sbrk_r>
 80075b4:	4580      	cmp	r8, r0
 80075b6:	d13a      	bne.n	800762e <_malloc_r+0xd2>
 80075b8:	6821      	ldr	r1, [r4, #0]
 80075ba:	3503      	adds	r5, #3
 80075bc:	1a6d      	subs	r5, r5, r1
 80075be:	f025 0503 	bic.w	r5, r5, #3
 80075c2:	3508      	adds	r5, #8
 80075c4:	2d0c      	cmp	r5, #12
 80075c6:	bf38      	it	cc
 80075c8:	250c      	movcc	r5, #12
 80075ca:	4638      	mov	r0, r7
 80075cc:	4629      	mov	r1, r5
 80075ce:	f7ff ffa5 	bl	800751c <sbrk_aligned>
 80075d2:	3001      	adds	r0, #1
 80075d4:	d02b      	beq.n	800762e <_malloc_r+0xd2>
 80075d6:	6823      	ldr	r3, [r4, #0]
 80075d8:	442b      	add	r3, r5
 80075da:	6023      	str	r3, [r4, #0]
 80075dc:	e00e      	b.n	80075fc <_malloc_r+0xa0>
 80075de:	6822      	ldr	r2, [r4, #0]
 80075e0:	1b52      	subs	r2, r2, r5
 80075e2:	d41e      	bmi.n	8007622 <_malloc_r+0xc6>
 80075e4:	2a0b      	cmp	r2, #11
 80075e6:	d916      	bls.n	8007616 <_malloc_r+0xba>
 80075e8:	1961      	adds	r1, r4, r5
 80075ea:	42a3      	cmp	r3, r4
 80075ec:	6025      	str	r5, [r4, #0]
 80075ee:	bf18      	it	ne
 80075f0:	6059      	strne	r1, [r3, #4]
 80075f2:	6863      	ldr	r3, [r4, #4]
 80075f4:	bf08      	it	eq
 80075f6:	6031      	streq	r1, [r6, #0]
 80075f8:	5162      	str	r2, [r4, r5]
 80075fa:	604b      	str	r3, [r1, #4]
 80075fc:	4638      	mov	r0, r7
 80075fe:	f104 060b 	add.w	r6, r4, #11
 8007602:	f000 f9d3 	bl	80079ac <__malloc_unlock>
 8007606:	f026 0607 	bic.w	r6, r6, #7
 800760a:	1d23      	adds	r3, r4, #4
 800760c:	1af2      	subs	r2, r6, r3
 800760e:	d0b6      	beq.n	800757e <_malloc_r+0x22>
 8007610:	1b9b      	subs	r3, r3, r6
 8007612:	50a3      	str	r3, [r4, r2]
 8007614:	e7b3      	b.n	800757e <_malloc_r+0x22>
 8007616:	6862      	ldr	r2, [r4, #4]
 8007618:	42a3      	cmp	r3, r4
 800761a:	bf0c      	ite	eq
 800761c:	6032      	streq	r2, [r6, #0]
 800761e:	605a      	strne	r2, [r3, #4]
 8007620:	e7ec      	b.n	80075fc <_malloc_r+0xa0>
 8007622:	4623      	mov	r3, r4
 8007624:	6864      	ldr	r4, [r4, #4]
 8007626:	e7b2      	b.n	800758e <_malloc_r+0x32>
 8007628:	4634      	mov	r4, r6
 800762a:	6876      	ldr	r6, [r6, #4]
 800762c:	e7b9      	b.n	80075a2 <_malloc_r+0x46>
 800762e:	230c      	movs	r3, #12
 8007630:	4638      	mov	r0, r7
 8007632:	603b      	str	r3, [r7, #0]
 8007634:	f000 f9ba 	bl	80079ac <__malloc_unlock>
 8007638:	e7a1      	b.n	800757e <_malloc_r+0x22>
 800763a:	6025      	str	r5, [r4, #0]
 800763c:	e7de      	b.n	80075fc <_malloc_r+0xa0>
 800763e:	bf00      	nop
 8007640:	20000608 	.word	0x20000608

08007644 <__ssputs_r>:
 8007644:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007648:	688e      	ldr	r6, [r1, #8]
 800764a:	4682      	mov	sl, r0
 800764c:	429e      	cmp	r6, r3
 800764e:	460c      	mov	r4, r1
 8007650:	4690      	mov	r8, r2
 8007652:	461f      	mov	r7, r3
 8007654:	d838      	bhi.n	80076c8 <__ssputs_r+0x84>
 8007656:	898a      	ldrh	r2, [r1, #12]
 8007658:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800765c:	d032      	beq.n	80076c4 <__ssputs_r+0x80>
 800765e:	6825      	ldr	r5, [r4, #0]
 8007660:	6909      	ldr	r1, [r1, #16]
 8007662:	3301      	adds	r3, #1
 8007664:	eba5 0901 	sub.w	r9, r5, r1
 8007668:	6965      	ldr	r5, [r4, #20]
 800766a:	444b      	add	r3, r9
 800766c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007670:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007674:	106d      	asrs	r5, r5, #1
 8007676:	429d      	cmp	r5, r3
 8007678:	bf38      	it	cc
 800767a:	461d      	movcc	r5, r3
 800767c:	0553      	lsls	r3, r2, #21
 800767e:	d531      	bpl.n	80076e4 <__ssputs_r+0xa0>
 8007680:	4629      	mov	r1, r5
 8007682:	f7ff ff6b 	bl	800755c <_malloc_r>
 8007686:	4606      	mov	r6, r0
 8007688:	b950      	cbnz	r0, 80076a0 <__ssputs_r+0x5c>
 800768a:	230c      	movs	r3, #12
 800768c:	f04f 30ff 	mov.w	r0, #4294967295
 8007690:	f8ca 3000 	str.w	r3, [sl]
 8007694:	89a3      	ldrh	r3, [r4, #12]
 8007696:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800769a:	81a3      	strh	r3, [r4, #12]
 800769c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80076a0:	464a      	mov	r2, r9
 80076a2:	6921      	ldr	r1, [r4, #16]
 80076a4:	f7fe f816 	bl	80056d4 <memcpy>
 80076a8:	89a3      	ldrh	r3, [r4, #12]
 80076aa:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80076ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80076b2:	81a3      	strh	r3, [r4, #12]
 80076b4:	6126      	str	r6, [r4, #16]
 80076b6:	444e      	add	r6, r9
 80076b8:	6026      	str	r6, [r4, #0]
 80076ba:	463e      	mov	r6, r7
 80076bc:	6165      	str	r5, [r4, #20]
 80076be:	eba5 0509 	sub.w	r5, r5, r9
 80076c2:	60a5      	str	r5, [r4, #8]
 80076c4:	42be      	cmp	r6, r7
 80076c6:	d900      	bls.n	80076ca <__ssputs_r+0x86>
 80076c8:	463e      	mov	r6, r7
 80076ca:	4632      	mov	r2, r6
 80076cc:	4641      	mov	r1, r8
 80076ce:	6820      	ldr	r0, [r4, #0]
 80076d0:	f7fe f80e 	bl	80056f0 <memmove>
 80076d4:	68a3      	ldr	r3, [r4, #8]
 80076d6:	2000      	movs	r0, #0
 80076d8:	1b9b      	subs	r3, r3, r6
 80076da:	60a3      	str	r3, [r4, #8]
 80076dc:	6823      	ldr	r3, [r4, #0]
 80076de:	4433      	add	r3, r6
 80076e0:	6023      	str	r3, [r4, #0]
 80076e2:	e7db      	b.n	800769c <__ssputs_r+0x58>
 80076e4:	462a      	mov	r2, r5
 80076e6:	f000 f967 	bl	80079b8 <_realloc_r>
 80076ea:	4606      	mov	r6, r0
 80076ec:	2800      	cmp	r0, #0
 80076ee:	d1e1      	bne.n	80076b4 <__ssputs_r+0x70>
 80076f0:	4650      	mov	r0, sl
 80076f2:	6921      	ldr	r1, [r4, #16]
 80076f4:	f7ff feca 	bl	800748c <_free_r>
 80076f8:	e7c7      	b.n	800768a <__ssputs_r+0x46>
	...

080076fc <_svfiprintf_r>:
 80076fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007700:	4698      	mov	r8, r3
 8007702:	898b      	ldrh	r3, [r1, #12]
 8007704:	4607      	mov	r7, r0
 8007706:	061b      	lsls	r3, r3, #24
 8007708:	460d      	mov	r5, r1
 800770a:	4614      	mov	r4, r2
 800770c:	b09d      	sub	sp, #116	; 0x74
 800770e:	d50e      	bpl.n	800772e <_svfiprintf_r+0x32>
 8007710:	690b      	ldr	r3, [r1, #16]
 8007712:	b963      	cbnz	r3, 800772e <_svfiprintf_r+0x32>
 8007714:	2140      	movs	r1, #64	; 0x40
 8007716:	f7ff ff21 	bl	800755c <_malloc_r>
 800771a:	6028      	str	r0, [r5, #0]
 800771c:	6128      	str	r0, [r5, #16]
 800771e:	b920      	cbnz	r0, 800772a <_svfiprintf_r+0x2e>
 8007720:	230c      	movs	r3, #12
 8007722:	603b      	str	r3, [r7, #0]
 8007724:	f04f 30ff 	mov.w	r0, #4294967295
 8007728:	e0d1      	b.n	80078ce <_svfiprintf_r+0x1d2>
 800772a:	2340      	movs	r3, #64	; 0x40
 800772c:	616b      	str	r3, [r5, #20]
 800772e:	2300      	movs	r3, #0
 8007730:	9309      	str	r3, [sp, #36]	; 0x24
 8007732:	2320      	movs	r3, #32
 8007734:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007738:	2330      	movs	r3, #48	; 0x30
 800773a:	f04f 0901 	mov.w	r9, #1
 800773e:	f8cd 800c 	str.w	r8, [sp, #12]
 8007742:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80078e8 <_svfiprintf_r+0x1ec>
 8007746:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800774a:	4623      	mov	r3, r4
 800774c:	469a      	mov	sl, r3
 800774e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007752:	b10a      	cbz	r2, 8007758 <_svfiprintf_r+0x5c>
 8007754:	2a25      	cmp	r2, #37	; 0x25
 8007756:	d1f9      	bne.n	800774c <_svfiprintf_r+0x50>
 8007758:	ebba 0b04 	subs.w	fp, sl, r4
 800775c:	d00b      	beq.n	8007776 <_svfiprintf_r+0x7a>
 800775e:	465b      	mov	r3, fp
 8007760:	4622      	mov	r2, r4
 8007762:	4629      	mov	r1, r5
 8007764:	4638      	mov	r0, r7
 8007766:	f7ff ff6d 	bl	8007644 <__ssputs_r>
 800776a:	3001      	adds	r0, #1
 800776c:	f000 80aa 	beq.w	80078c4 <_svfiprintf_r+0x1c8>
 8007770:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007772:	445a      	add	r2, fp
 8007774:	9209      	str	r2, [sp, #36]	; 0x24
 8007776:	f89a 3000 	ldrb.w	r3, [sl]
 800777a:	2b00      	cmp	r3, #0
 800777c:	f000 80a2 	beq.w	80078c4 <_svfiprintf_r+0x1c8>
 8007780:	2300      	movs	r3, #0
 8007782:	f04f 32ff 	mov.w	r2, #4294967295
 8007786:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800778a:	f10a 0a01 	add.w	sl, sl, #1
 800778e:	9304      	str	r3, [sp, #16]
 8007790:	9307      	str	r3, [sp, #28]
 8007792:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007796:	931a      	str	r3, [sp, #104]	; 0x68
 8007798:	4654      	mov	r4, sl
 800779a:	2205      	movs	r2, #5
 800779c:	f814 1b01 	ldrb.w	r1, [r4], #1
 80077a0:	4851      	ldr	r0, [pc, #324]	; (80078e8 <_svfiprintf_r+0x1ec>)
 80077a2:	f7ff facf 	bl	8006d44 <memchr>
 80077a6:	9a04      	ldr	r2, [sp, #16]
 80077a8:	b9d8      	cbnz	r0, 80077e2 <_svfiprintf_r+0xe6>
 80077aa:	06d0      	lsls	r0, r2, #27
 80077ac:	bf44      	itt	mi
 80077ae:	2320      	movmi	r3, #32
 80077b0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80077b4:	0711      	lsls	r1, r2, #28
 80077b6:	bf44      	itt	mi
 80077b8:	232b      	movmi	r3, #43	; 0x2b
 80077ba:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80077be:	f89a 3000 	ldrb.w	r3, [sl]
 80077c2:	2b2a      	cmp	r3, #42	; 0x2a
 80077c4:	d015      	beq.n	80077f2 <_svfiprintf_r+0xf6>
 80077c6:	4654      	mov	r4, sl
 80077c8:	2000      	movs	r0, #0
 80077ca:	f04f 0c0a 	mov.w	ip, #10
 80077ce:	9a07      	ldr	r2, [sp, #28]
 80077d0:	4621      	mov	r1, r4
 80077d2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80077d6:	3b30      	subs	r3, #48	; 0x30
 80077d8:	2b09      	cmp	r3, #9
 80077da:	d94e      	bls.n	800787a <_svfiprintf_r+0x17e>
 80077dc:	b1b0      	cbz	r0, 800780c <_svfiprintf_r+0x110>
 80077de:	9207      	str	r2, [sp, #28]
 80077e0:	e014      	b.n	800780c <_svfiprintf_r+0x110>
 80077e2:	eba0 0308 	sub.w	r3, r0, r8
 80077e6:	fa09 f303 	lsl.w	r3, r9, r3
 80077ea:	4313      	orrs	r3, r2
 80077ec:	46a2      	mov	sl, r4
 80077ee:	9304      	str	r3, [sp, #16]
 80077f0:	e7d2      	b.n	8007798 <_svfiprintf_r+0x9c>
 80077f2:	9b03      	ldr	r3, [sp, #12]
 80077f4:	1d19      	adds	r1, r3, #4
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	9103      	str	r1, [sp, #12]
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	bfbb      	ittet	lt
 80077fe:	425b      	neglt	r3, r3
 8007800:	f042 0202 	orrlt.w	r2, r2, #2
 8007804:	9307      	strge	r3, [sp, #28]
 8007806:	9307      	strlt	r3, [sp, #28]
 8007808:	bfb8      	it	lt
 800780a:	9204      	strlt	r2, [sp, #16]
 800780c:	7823      	ldrb	r3, [r4, #0]
 800780e:	2b2e      	cmp	r3, #46	; 0x2e
 8007810:	d10c      	bne.n	800782c <_svfiprintf_r+0x130>
 8007812:	7863      	ldrb	r3, [r4, #1]
 8007814:	2b2a      	cmp	r3, #42	; 0x2a
 8007816:	d135      	bne.n	8007884 <_svfiprintf_r+0x188>
 8007818:	9b03      	ldr	r3, [sp, #12]
 800781a:	3402      	adds	r4, #2
 800781c:	1d1a      	adds	r2, r3, #4
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	9203      	str	r2, [sp, #12]
 8007822:	2b00      	cmp	r3, #0
 8007824:	bfb8      	it	lt
 8007826:	f04f 33ff 	movlt.w	r3, #4294967295
 800782a:	9305      	str	r3, [sp, #20]
 800782c:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 80078ec <_svfiprintf_r+0x1f0>
 8007830:	2203      	movs	r2, #3
 8007832:	4650      	mov	r0, sl
 8007834:	7821      	ldrb	r1, [r4, #0]
 8007836:	f7ff fa85 	bl	8006d44 <memchr>
 800783a:	b140      	cbz	r0, 800784e <_svfiprintf_r+0x152>
 800783c:	2340      	movs	r3, #64	; 0x40
 800783e:	eba0 000a 	sub.w	r0, r0, sl
 8007842:	fa03 f000 	lsl.w	r0, r3, r0
 8007846:	9b04      	ldr	r3, [sp, #16]
 8007848:	3401      	adds	r4, #1
 800784a:	4303      	orrs	r3, r0
 800784c:	9304      	str	r3, [sp, #16]
 800784e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007852:	2206      	movs	r2, #6
 8007854:	4826      	ldr	r0, [pc, #152]	; (80078f0 <_svfiprintf_r+0x1f4>)
 8007856:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800785a:	f7ff fa73 	bl	8006d44 <memchr>
 800785e:	2800      	cmp	r0, #0
 8007860:	d038      	beq.n	80078d4 <_svfiprintf_r+0x1d8>
 8007862:	4b24      	ldr	r3, [pc, #144]	; (80078f4 <_svfiprintf_r+0x1f8>)
 8007864:	bb1b      	cbnz	r3, 80078ae <_svfiprintf_r+0x1b2>
 8007866:	9b03      	ldr	r3, [sp, #12]
 8007868:	3307      	adds	r3, #7
 800786a:	f023 0307 	bic.w	r3, r3, #7
 800786e:	3308      	adds	r3, #8
 8007870:	9303      	str	r3, [sp, #12]
 8007872:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007874:	4433      	add	r3, r6
 8007876:	9309      	str	r3, [sp, #36]	; 0x24
 8007878:	e767      	b.n	800774a <_svfiprintf_r+0x4e>
 800787a:	460c      	mov	r4, r1
 800787c:	2001      	movs	r0, #1
 800787e:	fb0c 3202 	mla	r2, ip, r2, r3
 8007882:	e7a5      	b.n	80077d0 <_svfiprintf_r+0xd4>
 8007884:	2300      	movs	r3, #0
 8007886:	f04f 0c0a 	mov.w	ip, #10
 800788a:	4619      	mov	r1, r3
 800788c:	3401      	adds	r4, #1
 800788e:	9305      	str	r3, [sp, #20]
 8007890:	4620      	mov	r0, r4
 8007892:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007896:	3a30      	subs	r2, #48	; 0x30
 8007898:	2a09      	cmp	r2, #9
 800789a:	d903      	bls.n	80078a4 <_svfiprintf_r+0x1a8>
 800789c:	2b00      	cmp	r3, #0
 800789e:	d0c5      	beq.n	800782c <_svfiprintf_r+0x130>
 80078a0:	9105      	str	r1, [sp, #20]
 80078a2:	e7c3      	b.n	800782c <_svfiprintf_r+0x130>
 80078a4:	4604      	mov	r4, r0
 80078a6:	2301      	movs	r3, #1
 80078a8:	fb0c 2101 	mla	r1, ip, r1, r2
 80078ac:	e7f0      	b.n	8007890 <_svfiprintf_r+0x194>
 80078ae:	ab03      	add	r3, sp, #12
 80078b0:	9300      	str	r3, [sp, #0]
 80078b2:	462a      	mov	r2, r5
 80078b4:	4638      	mov	r0, r7
 80078b6:	4b10      	ldr	r3, [pc, #64]	; (80078f8 <_svfiprintf_r+0x1fc>)
 80078b8:	a904      	add	r1, sp, #16
 80078ba:	f7fd ffd9 	bl	8005870 <_printf_float>
 80078be:	1c42      	adds	r2, r0, #1
 80078c0:	4606      	mov	r6, r0
 80078c2:	d1d6      	bne.n	8007872 <_svfiprintf_r+0x176>
 80078c4:	89ab      	ldrh	r3, [r5, #12]
 80078c6:	065b      	lsls	r3, r3, #25
 80078c8:	f53f af2c 	bmi.w	8007724 <_svfiprintf_r+0x28>
 80078cc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80078ce:	b01d      	add	sp, #116	; 0x74
 80078d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80078d4:	ab03      	add	r3, sp, #12
 80078d6:	9300      	str	r3, [sp, #0]
 80078d8:	462a      	mov	r2, r5
 80078da:	4638      	mov	r0, r7
 80078dc:	4b06      	ldr	r3, [pc, #24]	; (80078f8 <_svfiprintf_r+0x1fc>)
 80078de:	a904      	add	r1, sp, #16
 80078e0:	f7fe fa62 	bl	8005da8 <_printf_i>
 80078e4:	e7eb      	b.n	80078be <_svfiprintf_r+0x1c2>
 80078e6:	bf00      	nop
 80078e8:	08008e84 	.word	0x08008e84
 80078ec:	08008e8a 	.word	0x08008e8a
 80078f0:	08008e8e 	.word	0x08008e8e
 80078f4:	08005871 	.word	0x08005871
 80078f8:	08007645 	.word	0x08007645

080078fc <_sbrk_r>:
 80078fc:	b538      	push	{r3, r4, r5, lr}
 80078fe:	2300      	movs	r3, #0
 8007900:	4d05      	ldr	r5, [pc, #20]	; (8007918 <_sbrk_r+0x1c>)
 8007902:	4604      	mov	r4, r0
 8007904:	4608      	mov	r0, r1
 8007906:	602b      	str	r3, [r5, #0]
 8007908:	f7fa fd58 	bl	80023bc <_sbrk>
 800790c:	1c43      	adds	r3, r0, #1
 800790e:	d102      	bne.n	8007916 <_sbrk_r+0x1a>
 8007910:	682b      	ldr	r3, [r5, #0]
 8007912:	b103      	cbz	r3, 8007916 <_sbrk_r+0x1a>
 8007914:	6023      	str	r3, [r4, #0]
 8007916:	bd38      	pop	{r3, r4, r5, pc}
 8007918:	20000610 	.word	0x20000610

0800791c <__assert_func>:
 800791c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800791e:	4614      	mov	r4, r2
 8007920:	461a      	mov	r2, r3
 8007922:	4b09      	ldr	r3, [pc, #36]	; (8007948 <__assert_func+0x2c>)
 8007924:	4605      	mov	r5, r0
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	68d8      	ldr	r0, [r3, #12]
 800792a:	b14c      	cbz	r4, 8007940 <__assert_func+0x24>
 800792c:	4b07      	ldr	r3, [pc, #28]	; (800794c <__assert_func+0x30>)
 800792e:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007932:	9100      	str	r1, [sp, #0]
 8007934:	462b      	mov	r3, r5
 8007936:	4906      	ldr	r1, [pc, #24]	; (8007950 <__assert_func+0x34>)
 8007938:	f000 f80e 	bl	8007958 <fiprintf>
 800793c:	f000 fa90 	bl	8007e60 <abort>
 8007940:	4b04      	ldr	r3, [pc, #16]	; (8007954 <__assert_func+0x38>)
 8007942:	461c      	mov	r4, r3
 8007944:	e7f3      	b.n	800792e <__assert_func+0x12>
 8007946:	bf00      	nop
 8007948:	20000018 	.word	0x20000018
 800794c:	08008e95 	.word	0x08008e95
 8007950:	08008ea2 	.word	0x08008ea2
 8007954:	08008ed0 	.word	0x08008ed0

08007958 <fiprintf>:
 8007958:	b40e      	push	{r1, r2, r3}
 800795a:	b503      	push	{r0, r1, lr}
 800795c:	4601      	mov	r1, r0
 800795e:	ab03      	add	r3, sp, #12
 8007960:	4805      	ldr	r0, [pc, #20]	; (8007978 <fiprintf+0x20>)
 8007962:	f853 2b04 	ldr.w	r2, [r3], #4
 8007966:	6800      	ldr	r0, [r0, #0]
 8007968:	9301      	str	r3, [sp, #4]
 800796a:	f000 f87b 	bl	8007a64 <_vfiprintf_r>
 800796e:	b002      	add	sp, #8
 8007970:	f85d eb04 	ldr.w	lr, [sp], #4
 8007974:	b003      	add	sp, #12
 8007976:	4770      	bx	lr
 8007978:	20000018 	.word	0x20000018

0800797c <__ascii_mbtowc>:
 800797c:	b082      	sub	sp, #8
 800797e:	b901      	cbnz	r1, 8007982 <__ascii_mbtowc+0x6>
 8007980:	a901      	add	r1, sp, #4
 8007982:	b142      	cbz	r2, 8007996 <__ascii_mbtowc+0x1a>
 8007984:	b14b      	cbz	r3, 800799a <__ascii_mbtowc+0x1e>
 8007986:	7813      	ldrb	r3, [r2, #0]
 8007988:	600b      	str	r3, [r1, #0]
 800798a:	7812      	ldrb	r2, [r2, #0]
 800798c:	1e10      	subs	r0, r2, #0
 800798e:	bf18      	it	ne
 8007990:	2001      	movne	r0, #1
 8007992:	b002      	add	sp, #8
 8007994:	4770      	bx	lr
 8007996:	4610      	mov	r0, r2
 8007998:	e7fb      	b.n	8007992 <__ascii_mbtowc+0x16>
 800799a:	f06f 0001 	mvn.w	r0, #1
 800799e:	e7f8      	b.n	8007992 <__ascii_mbtowc+0x16>

080079a0 <__malloc_lock>:
 80079a0:	4801      	ldr	r0, [pc, #4]	; (80079a8 <__malloc_lock+0x8>)
 80079a2:	f000 bc19 	b.w	80081d8 <__retarget_lock_acquire_recursive>
 80079a6:	bf00      	nop
 80079a8:	20000614 	.word	0x20000614

080079ac <__malloc_unlock>:
 80079ac:	4801      	ldr	r0, [pc, #4]	; (80079b4 <__malloc_unlock+0x8>)
 80079ae:	f000 bc14 	b.w	80081da <__retarget_lock_release_recursive>
 80079b2:	bf00      	nop
 80079b4:	20000614 	.word	0x20000614

080079b8 <_realloc_r>:
 80079b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80079bc:	4680      	mov	r8, r0
 80079be:	4614      	mov	r4, r2
 80079c0:	460e      	mov	r6, r1
 80079c2:	b921      	cbnz	r1, 80079ce <_realloc_r+0x16>
 80079c4:	4611      	mov	r1, r2
 80079c6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80079ca:	f7ff bdc7 	b.w	800755c <_malloc_r>
 80079ce:	b92a      	cbnz	r2, 80079dc <_realloc_r+0x24>
 80079d0:	f7ff fd5c 	bl	800748c <_free_r>
 80079d4:	4625      	mov	r5, r4
 80079d6:	4628      	mov	r0, r5
 80079d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80079dc:	f000 fc64 	bl	80082a8 <_malloc_usable_size_r>
 80079e0:	4284      	cmp	r4, r0
 80079e2:	4607      	mov	r7, r0
 80079e4:	d802      	bhi.n	80079ec <_realloc_r+0x34>
 80079e6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80079ea:	d812      	bhi.n	8007a12 <_realloc_r+0x5a>
 80079ec:	4621      	mov	r1, r4
 80079ee:	4640      	mov	r0, r8
 80079f0:	f7ff fdb4 	bl	800755c <_malloc_r>
 80079f4:	4605      	mov	r5, r0
 80079f6:	2800      	cmp	r0, #0
 80079f8:	d0ed      	beq.n	80079d6 <_realloc_r+0x1e>
 80079fa:	42bc      	cmp	r4, r7
 80079fc:	4622      	mov	r2, r4
 80079fe:	4631      	mov	r1, r6
 8007a00:	bf28      	it	cs
 8007a02:	463a      	movcs	r2, r7
 8007a04:	f7fd fe66 	bl	80056d4 <memcpy>
 8007a08:	4631      	mov	r1, r6
 8007a0a:	4640      	mov	r0, r8
 8007a0c:	f7ff fd3e 	bl	800748c <_free_r>
 8007a10:	e7e1      	b.n	80079d6 <_realloc_r+0x1e>
 8007a12:	4635      	mov	r5, r6
 8007a14:	e7df      	b.n	80079d6 <_realloc_r+0x1e>

08007a16 <__sfputc_r>:
 8007a16:	6893      	ldr	r3, [r2, #8]
 8007a18:	b410      	push	{r4}
 8007a1a:	3b01      	subs	r3, #1
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	6093      	str	r3, [r2, #8]
 8007a20:	da07      	bge.n	8007a32 <__sfputc_r+0x1c>
 8007a22:	6994      	ldr	r4, [r2, #24]
 8007a24:	42a3      	cmp	r3, r4
 8007a26:	db01      	blt.n	8007a2c <__sfputc_r+0x16>
 8007a28:	290a      	cmp	r1, #10
 8007a2a:	d102      	bne.n	8007a32 <__sfputc_r+0x1c>
 8007a2c:	bc10      	pop	{r4}
 8007a2e:	f000 b949 	b.w	8007cc4 <__swbuf_r>
 8007a32:	6813      	ldr	r3, [r2, #0]
 8007a34:	1c58      	adds	r0, r3, #1
 8007a36:	6010      	str	r0, [r2, #0]
 8007a38:	7019      	strb	r1, [r3, #0]
 8007a3a:	4608      	mov	r0, r1
 8007a3c:	bc10      	pop	{r4}
 8007a3e:	4770      	bx	lr

08007a40 <__sfputs_r>:
 8007a40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a42:	4606      	mov	r6, r0
 8007a44:	460f      	mov	r7, r1
 8007a46:	4614      	mov	r4, r2
 8007a48:	18d5      	adds	r5, r2, r3
 8007a4a:	42ac      	cmp	r4, r5
 8007a4c:	d101      	bne.n	8007a52 <__sfputs_r+0x12>
 8007a4e:	2000      	movs	r0, #0
 8007a50:	e007      	b.n	8007a62 <__sfputs_r+0x22>
 8007a52:	463a      	mov	r2, r7
 8007a54:	4630      	mov	r0, r6
 8007a56:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007a5a:	f7ff ffdc 	bl	8007a16 <__sfputc_r>
 8007a5e:	1c43      	adds	r3, r0, #1
 8007a60:	d1f3      	bne.n	8007a4a <__sfputs_r+0xa>
 8007a62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08007a64 <_vfiprintf_r>:
 8007a64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a68:	460d      	mov	r5, r1
 8007a6a:	4614      	mov	r4, r2
 8007a6c:	4698      	mov	r8, r3
 8007a6e:	4606      	mov	r6, r0
 8007a70:	b09d      	sub	sp, #116	; 0x74
 8007a72:	b118      	cbz	r0, 8007a7c <_vfiprintf_r+0x18>
 8007a74:	6983      	ldr	r3, [r0, #24]
 8007a76:	b90b      	cbnz	r3, 8007a7c <_vfiprintf_r+0x18>
 8007a78:	f000 fb10 	bl	800809c <__sinit>
 8007a7c:	4b89      	ldr	r3, [pc, #548]	; (8007ca4 <_vfiprintf_r+0x240>)
 8007a7e:	429d      	cmp	r5, r3
 8007a80:	d11b      	bne.n	8007aba <_vfiprintf_r+0x56>
 8007a82:	6875      	ldr	r5, [r6, #4]
 8007a84:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007a86:	07d9      	lsls	r1, r3, #31
 8007a88:	d405      	bmi.n	8007a96 <_vfiprintf_r+0x32>
 8007a8a:	89ab      	ldrh	r3, [r5, #12]
 8007a8c:	059a      	lsls	r2, r3, #22
 8007a8e:	d402      	bmi.n	8007a96 <_vfiprintf_r+0x32>
 8007a90:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007a92:	f000 fba1 	bl	80081d8 <__retarget_lock_acquire_recursive>
 8007a96:	89ab      	ldrh	r3, [r5, #12]
 8007a98:	071b      	lsls	r3, r3, #28
 8007a9a:	d501      	bpl.n	8007aa0 <_vfiprintf_r+0x3c>
 8007a9c:	692b      	ldr	r3, [r5, #16]
 8007a9e:	b9eb      	cbnz	r3, 8007adc <_vfiprintf_r+0x78>
 8007aa0:	4629      	mov	r1, r5
 8007aa2:	4630      	mov	r0, r6
 8007aa4:	f000 f96e 	bl	8007d84 <__swsetup_r>
 8007aa8:	b1c0      	cbz	r0, 8007adc <_vfiprintf_r+0x78>
 8007aaa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007aac:	07dc      	lsls	r4, r3, #31
 8007aae:	d50e      	bpl.n	8007ace <_vfiprintf_r+0x6a>
 8007ab0:	f04f 30ff 	mov.w	r0, #4294967295
 8007ab4:	b01d      	add	sp, #116	; 0x74
 8007ab6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007aba:	4b7b      	ldr	r3, [pc, #492]	; (8007ca8 <_vfiprintf_r+0x244>)
 8007abc:	429d      	cmp	r5, r3
 8007abe:	d101      	bne.n	8007ac4 <_vfiprintf_r+0x60>
 8007ac0:	68b5      	ldr	r5, [r6, #8]
 8007ac2:	e7df      	b.n	8007a84 <_vfiprintf_r+0x20>
 8007ac4:	4b79      	ldr	r3, [pc, #484]	; (8007cac <_vfiprintf_r+0x248>)
 8007ac6:	429d      	cmp	r5, r3
 8007ac8:	bf08      	it	eq
 8007aca:	68f5      	ldreq	r5, [r6, #12]
 8007acc:	e7da      	b.n	8007a84 <_vfiprintf_r+0x20>
 8007ace:	89ab      	ldrh	r3, [r5, #12]
 8007ad0:	0598      	lsls	r0, r3, #22
 8007ad2:	d4ed      	bmi.n	8007ab0 <_vfiprintf_r+0x4c>
 8007ad4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007ad6:	f000 fb80 	bl	80081da <__retarget_lock_release_recursive>
 8007ada:	e7e9      	b.n	8007ab0 <_vfiprintf_r+0x4c>
 8007adc:	2300      	movs	r3, #0
 8007ade:	9309      	str	r3, [sp, #36]	; 0x24
 8007ae0:	2320      	movs	r3, #32
 8007ae2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007ae6:	2330      	movs	r3, #48	; 0x30
 8007ae8:	f04f 0901 	mov.w	r9, #1
 8007aec:	f8cd 800c 	str.w	r8, [sp, #12]
 8007af0:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8007cb0 <_vfiprintf_r+0x24c>
 8007af4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007af8:	4623      	mov	r3, r4
 8007afa:	469a      	mov	sl, r3
 8007afc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007b00:	b10a      	cbz	r2, 8007b06 <_vfiprintf_r+0xa2>
 8007b02:	2a25      	cmp	r2, #37	; 0x25
 8007b04:	d1f9      	bne.n	8007afa <_vfiprintf_r+0x96>
 8007b06:	ebba 0b04 	subs.w	fp, sl, r4
 8007b0a:	d00b      	beq.n	8007b24 <_vfiprintf_r+0xc0>
 8007b0c:	465b      	mov	r3, fp
 8007b0e:	4622      	mov	r2, r4
 8007b10:	4629      	mov	r1, r5
 8007b12:	4630      	mov	r0, r6
 8007b14:	f7ff ff94 	bl	8007a40 <__sfputs_r>
 8007b18:	3001      	adds	r0, #1
 8007b1a:	f000 80aa 	beq.w	8007c72 <_vfiprintf_r+0x20e>
 8007b1e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007b20:	445a      	add	r2, fp
 8007b22:	9209      	str	r2, [sp, #36]	; 0x24
 8007b24:	f89a 3000 	ldrb.w	r3, [sl]
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	f000 80a2 	beq.w	8007c72 <_vfiprintf_r+0x20e>
 8007b2e:	2300      	movs	r3, #0
 8007b30:	f04f 32ff 	mov.w	r2, #4294967295
 8007b34:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007b38:	f10a 0a01 	add.w	sl, sl, #1
 8007b3c:	9304      	str	r3, [sp, #16]
 8007b3e:	9307      	str	r3, [sp, #28]
 8007b40:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007b44:	931a      	str	r3, [sp, #104]	; 0x68
 8007b46:	4654      	mov	r4, sl
 8007b48:	2205      	movs	r2, #5
 8007b4a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007b4e:	4858      	ldr	r0, [pc, #352]	; (8007cb0 <_vfiprintf_r+0x24c>)
 8007b50:	f7ff f8f8 	bl	8006d44 <memchr>
 8007b54:	9a04      	ldr	r2, [sp, #16]
 8007b56:	b9d8      	cbnz	r0, 8007b90 <_vfiprintf_r+0x12c>
 8007b58:	06d1      	lsls	r1, r2, #27
 8007b5a:	bf44      	itt	mi
 8007b5c:	2320      	movmi	r3, #32
 8007b5e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007b62:	0713      	lsls	r3, r2, #28
 8007b64:	bf44      	itt	mi
 8007b66:	232b      	movmi	r3, #43	; 0x2b
 8007b68:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007b6c:	f89a 3000 	ldrb.w	r3, [sl]
 8007b70:	2b2a      	cmp	r3, #42	; 0x2a
 8007b72:	d015      	beq.n	8007ba0 <_vfiprintf_r+0x13c>
 8007b74:	4654      	mov	r4, sl
 8007b76:	2000      	movs	r0, #0
 8007b78:	f04f 0c0a 	mov.w	ip, #10
 8007b7c:	9a07      	ldr	r2, [sp, #28]
 8007b7e:	4621      	mov	r1, r4
 8007b80:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007b84:	3b30      	subs	r3, #48	; 0x30
 8007b86:	2b09      	cmp	r3, #9
 8007b88:	d94e      	bls.n	8007c28 <_vfiprintf_r+0x1c4>
 8007b8a:	b1b0      	cbz	r0, 8007bba <_vfiprintf_r+0x156>
 8007b8c:	9207      	str	r2, [sp, #28]
 8007b8e:	e014      	b.n	8007bba <_vfiprintf_r+0x156>
 8007b90:	eba0 0308 	sub.w	r3, r0, r8
 8007b94:	fa09 f303 	lsl.w	r3, r9, r3
 8007b98:	4313      	orrs	r3, r2
 8007b9a:	46a2      	mov	sl, r4
 8007b9c:	9304      	str	r3, [sp, #16]
 8007b9e:	e7d2      	b.n	8007b46 <_vfiprintf_r+0xe2>
 8007ba0:	9b03      	ldr	r3, [sp, #12]
 8007ba2:	1d19      	adds	r1, r3, #4
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	9103      	str	r1, [sp, #12]
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	bfbb      	ittet	lt
 8007bac:	425b      	neglt	r3, r3
 8007bae:	f042 0202 	orrlt.w	r2, r2, #2
 8007bb2:	9307      	strge	r3, [sp, #28]
 8007bb4:	9307      	strlt	r3, [sp, #28]
 8007bb6:	bfb8      	it	lt
 8007bb8:	9204      	strlt	r2, [sp, #16]
 8007bba:	7823      	ldrb	r3, [r4, #0]
 8007bbc:	2b2e      	cmp	r3, #46	; 0x2e
 8007bbe:	d10c      	bne.n	8007bda <_vfiprintf_r+0x176>
 8007bc0:	7863      	ldrb	r3, [r4, #1]
 8007bc2:	2b2a      	cmp	r3, #42	; 0x2a
 8007bc4:	d135      	bne.n	8007c32 <_vfiprintf_r+0x1ce>
 8007bc6:	9b03      	ldr	r3, [sp, #12]
 8007bc8:	3402      	adds	r4, #2
 8007bca:	1d1a      	adds	r2, r3, #4
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	9203      	str	r2, [sp, #12]
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	bfb8      	it	lt
 8007bd4:	f04f 33ff 	movlt.w	r3, #4294967295
 8007bd8:	9305      	str	r3, [sp, #20]
 8007bda:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8007cb4 <_vfiprintf_r+0x250>
 8007bde:	2203      	movs	r2, #3
 8007be0:	4650      	mov	r0, sl
 8007be2:	7821      	ldrb	r1, [r4, #0]
 8007be4:	f7ff f8ae 	bl	8006d44 <memchr>
 8007be8:	b140      	cbz	r0, 8007bfc <_vfiprintf_r+0x198>
 8007bea:	2340      	movs	r3, #64	; 0x40
 8007bec:	eba0 000a 	sub.w	r0, r0, sl
 8007bf0:	fa03 f000 	lsl.w	r0, r3, r0
 8007bf4:	9b04      	ldr	r3, [sp, #16]
 8007bf6:	3401      	adds	r4, #1
 8007bf8:	4303      	orrs	r3, r0
 8007bfa:	9304      	str	r3, [sp, #16]
 8007bfc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007c00:	2206      	movs	r2, #6
 8007c02:	482d      	ldr	r0, [pc, #180]	; (8007cb8 <_vfiprintf_r+0x254>)
 8007c04:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007c08:	f7ff f89c 	bl	8006d44 <memchr>
 8007c0c:	2800      	cmp	r0, #0
 8007c0e:	d03f      	beq.n	8007c90 <_vfiprintf_r+0x22c>
 8007c10:	4b2a      	ldr	r3, [pc, #168]	; (8007cbc <_vfiprintf_r+0x258>)
 8007c12:	bb1b      	cbnz	r3, 8007c5c <_vfiprintf_r+0x1f8>
 8007c14:	9b03      	ldr	r3, [sp, #12]
 8007c16:	3307      	adds	r3, #7
 8007c18:	f023 0307 	bic.w	r3, r3, #7
 8007c1c:	3308      	adds	r3, #8
 8007c1e:	9303      	str	r3, [sp, #12]
 8007c20:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007c22:	443b      	add	r3, r7
 8007c24:	9309      	str	r3, [sp, #36]	; 0x24
 8007c26:	e767      	b.n	8007af8 <_vfiprintf_r+0x94>
 8007c28:	460c      	mov	r4, r1
 8007c2a:	2001      	movs	r0, #1
 8007c2c:	fb0c 3202 	mla	r2, ip, r2, r3
 8007c30:	e7a5      	b.n	8007b7e <_vfiprintf_r+0x11a>
 8007c32:	2300      	movs	r3, #0
 8007c34:	f04f 0c0a 	mov.w	ip, #10
 8007c38:	4619      	mov	r1, r3
 8007c3a:	3401      	adds	r4, #1
 8007c3c:	9305      	str	r3, [sp, #20]
 8007c3e:	4620      	mov	r0, r4
 8007c40:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007c44:	3a30      	subs	r2, #48	; 0x30
 8007c46:	2a09      	cmp	r2, #9
 8007c48:	d903      	bls.n	8007c52 <_vfiprintf_r+0x1ee>
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	d0c5      	beq.n	8007bda <_vfiprintf_r+0x176>
 8007c4e:	9105      	str	r1, [sp, #20]
 8007c50:	e7c3      	b.n	8007bda <_vfiprintf_r+0x176>
 8007c52:	4604      	mov	r4, r0
 8007c54:	2301      	movs	r3, #1
 8007c56:	fb0c 2101 	mla	r1, ip, r1, r2
 8007c5a:	e7f0      	b.n	8007c3e <_vfiprintf_r+0x1da>
 8007c5c:	ab03      	add	r3, sp, #12
 8007c5e:	9300      	str	r3, [sp, #0]
 8007c60:	462a      	mov	r2, r5
 8007c62:	4630      	mov	r0, r6
 8007c64:	4b16      	ldr	r3, [pc, #88]	; (8007cc0 <_vfiprintf_r+0x25c>)
 8007c66:	a904      	add	r1, sp, #16
 8007c68:	f7fd fe02 	bl	8005870 <_printf_float>
 8007c6c:	4607      	mov	r7, r0
 8007c6e:	1c78      	adds	r0, r7, #1
 8007c70:	d1d6      	bne.n	8007c20 <_vfiprintf_r+0x1bc>
 8007c72:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007c74:	07d9      	lsls	r1, r3, #31
 8007c76:	d405      	bmi.n	8007c84 <_vfiprintf_r+0x220>
 8007c78:	89ab      	ldrh	r3, [r5, #12]
 8007c7a:	059a      	lsls	r2, r3, #22
 8007c7c:	d402      	bmi.n	8007c84 <_vfiprintf_r+0x220>
 8007c7e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007c80:	f000 faab 	bl	80081da <__retarget_lock_release_recursive>
 8007c84:	89ab      	ldrh	r3, [r5, #12]
 8007c86:	065b      	lsls	r3, r3, #25
 8007c88:	f53f af12 	bmi.w	8007ab0 <_vfiprintf_r+0x4c>
 8007c8c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007c8e:	e711      	b.n	8007ab4 <_vfiprintf_r+0x50>
 8007c90:	ab03      	add	r3, sp, #12
 8007c92:	9300      	str	r3, [sp, #0]
 8007c94:	462a      	mov	r2, r5
 8007c96:	4630      	mov	r0, r6
 8007c98:	4b09      	ldr	r3, [pc, #36]	; (8007cc0 <_vfiprintf_r+0x25c>)
 8007c9a:	a904      	add	r1, sp, #16
 8007c9c:	f7fe f884 	bl	8005da8 <_printf_i>
 8007ca0:	e7e4      	b.n	8007c6c <_vfiprintf_r+0x208>
 8007ca2:	bf00      	nop
 8007ca4:	08008ffc 	.word	0x08008ffc
 8007ca8:	0800901c 	.word	0x0800901c
 8007cac:	08008fdc 	.word	0x08008fdc
 8007cb0:	08008e84 	.word	0x08008e84
 8007cb4:	08008e8a 	.word	0x08008e8a
 8007cb8:	08008e8e 	.word	0x08008e8e
 8007cbc:	08005871 	.word	0x08005871
 8007cc0:	08007a41 	.word	0x08007a41

08007cc4 <__swbuf_r>:
 8007cc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007cc6:	460e      	mov	r6, r1
 8007cc8:	4614      	mov	r4, r2
 8007cca:	4605      	mov	r5, r0
 8007ccc:	b118      	cbz	r0, 8007cd6 <__swbuf_r+0x12>
 8007cce:	6983      	ldr	r3, [r0, #24]
 8007cd0:	b90b      	cbnz	r3, 8007cd6 <__swbuf_r+0x12>
 8007cd2:	f000 f9e3 	bl	800809c <__sinit>
 8007cd6:	4b21      	ldr	r3, [pc, #132]	; (8007d5c <__swbuf_r+0x98>)
 8007cd8:	429c      	cmp	r4, r3
 8007cda:	d12b      	bne.n	8007d34 <__swbuf_r+0x70>
 8007cdc:	686c      	ldr	r4, [r5, #4]
 8007cde:	69a3      	ldr	r3, [r4, #24]
 8007ce0:	60a3      	str	r3, [r4, #8]
 8007ce2:	89a3      	ldrh	r3, [r4, #12]
 8007ce4:	071a      	lsls	r2, r3, #28
 8007ce6:	d52f      	bpl.n	8007d48 <__swbuf_r+0x84>
 8007ce8:	6923      	ldr	r3, [r4, #16]
 8007cea:	b36b      	cbz	r3, 8007d48 <__swbuf_r+0x84>
 8007cec:	6923      	ldr	r3, [r4, #16]
 8007cee:	6820      	ldr	r0, [r4, #0]
 8007cf0:	b2f6      	uxtb	r6, r6
 8007cf2:	1ac0      	subs	r0, r0, r3
 8007cf4:	6963      	ldr	r3, [r4, #20]
 8007cf6:	4637      	mov	r7, r6
 8007cf8:	4283      	cmp	r3, r0
 8007cfa:	dc04      	bgt.n	8007d06 <__swbuf_r+0x42>
 8007cfc:	4621      	mov	r1, r4
 8007cfe:	4628      	mov	r0, r5
 8007d00:	f000 f938 	bl	8007f74 <_fflush_r>
 8007d04:	bb30      	cbnz	r0, 8007d54 <__swbuf_r+0x90>
 8007d06:	68a3      	ldr	r3, [r4, #8]
 8007d08:	3001      	adds	r0, #1
 8007d0a:	3b01      	subs	r3, #1
 8007d0c:	60a3      	str	r3, [r4, #8]
 8007d0e:	6823      	ldr	r3, [r4, #0]
 8007d10:	1c5a      	adds	r2, r3, #1
 8007d12:	6022      	str	r2, [r4, #0]
 8007d14:	701e      	strb	r6, [r3, #0]
 8007d16:	6963      	ldr	r3, [r4, #20]
 8007d18:	4283      	cmp	r3, r0
 8007d1a:	d004      	beq.n	8007d26 <__swbuf_r+0x62>
 8007d1c:	89a3      	ldrh	r3, [r4, #12]
 8007d1e:	07db      	lsls	r3, r3, #31
 8007d20:	d506      	bpl.n	8007d30 <__swbuf_r+0x6c>
 8007d22:	2e0a      	cmp	r6, #10
 8007d24:	d104      	bne.n	8007d30 <__swbuf_r+0x6c>
 8007d26:	4621      	mov	r1, r4
 8007d28:	4628      	mov	r0, r5
 8007d2a:	f000 f923 	bl	8007f74 <_fflush_r>
 8007d2e:	b988      	cbnz	r0, 8007d54 <__swbuf_r+0x90>
 8007d30:	4638      	mov	r0, r7
 8007d32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007d34:	4b0a      	ldr	r3, [pc, #40]	; (8007d60 <__swbuf_r+0x9c>)
 8007d36:	429c      	cmp	r4, r3
 8007d38:	d101      	bne.n	8007d3e <__swbuf_r+0x7a>
 8007d3a:	68ac      	ldr	r4, [r5, #8]
 8007d3c:	e7cf      	b.n	8007cde <__swbuf_r+0x1a>
 8007d3e:	4b09      	ldr	r3, [pc, #36]	; (8007d64 <__swbuf_r+0xa0>)
 8007d40:	429c      	cmp	r4, r3
 8007d42:	bf08      	it	eq
 8007d44:	68ec      	ldreq	r4, [r5, #12]
 8007d46:	e7ca      	b.n	8007cde <__swbuf_r+0x1a>
 8007d48:	4621      	mov	r1, r4
 8007d4a:	4628      	mov	r0, r5
 8007d4c:	f000 f81a 	bl	8007d84 <__swsetup_r>
 8007d50:	2800      	cmp	r0, #0
 8007d52:	d0cb      	beq.n	8007cec <__swbuf_r+0x28>
 8007d54:	f04f 37ff 	mov.w	r7, #4294967295
 8007d58:	e7ea      	b.n	8007d30 <__swbuf_r+0x6c>
 8007d5a:	bf00      	nop
 8007d5c:	08008ffc 	.word	0x08008ffc
 8007d60:	0800901c 	.word	0x0800901c
 8007d64:	08008fdc 	.word	0x08008fdc

08007d68 <__ascii_wctomb>:
 8007d68:	4603      	mov	r3, r0
 8007d6a:	4608      	mov	r0, r1
 8007d6c:	b141      	cbz	r1, 8007d80 <__ascii_wctomb+0x18>
 8007d6e:	2aff      	cmp	r2, #255	; 0xff
 8007d70:	d904      	bls.n	8007d7c <__ascii_wctomb+0x14>
 8007d72:	228a      	movs	r2, #138	; 0x8a
 8007d74:	f04f 30ff 	mov.w	r0, #4294967295
 8007d78:	601a      	str	r2, [r3, #0]
 8007d7a:	4770      	bx	lr
 8007d7c:	2001      	movs	r0, #1
 8007d7e:	700a      	strb	r2, [r1, #0]
 8007d80:	4770      	bx	lr
	...

08007d84 <__swsetup_r>:
 8007d84:	4b32      	ldr	r3, [pc, #200]	; (8007e50 <__swsetup_r+0xcc>)
 8007d86:	b570      	push	{r4, r5, r6, lr}
 8007d88:	681d      	ldr	r5, [r3, #0]
 8007d8a:	4606      	mov	r6, r0
 8007d8c:	460c      	mov	r4, r1
 8007d8e:	b125      	cbz	r5, 8007d9a <__swsetup_r+0x16>
 8007d90:	69ab      	ldr	r3, [r5, #24]
 8007d92:	b913      	cbnz	r3, 8007d9a <__swsetup_r+0x16>
 8007d94:	4628      	mov	r0, r5
 8007d96:	f000 f981 	bl	800809c <__sinit>
 8007d9a:	4b2e      	ldr	r3, [pc, #184]	; (8007e54 <__swsetup_r+0xd0>)
 8007d9c:	429c      	cmp	r4, r3
 8007d9e:	d10f      	bne.n	8007dc0 <__swsetup_r+0x3c>
 8007da0:	686c      	ldr	r4, [r5, #4]
 8007da2:	89a3      	ldrh	r3, [r4, #12]
 8007da4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007da8:	0719      	lsls	r1, r3, #28
 8007daa:	d42c      	bmi.n	8007e06 <__swsetup_r+0x82>
 8007dac:	06dd      	lsls	r5, r3, #27
 8007dae:	d411      	bmi.n	8007dd4 <__swsetup_r+0x50>
 8007db0:	2309      	movs	r3, #9
 8007db2:	6033      	str	r3, [r6, #0]
 8007db4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007db8:	f04f 30ff 	mov.w	r0, #4294967295
 8007dbc:	81a3      	strh	r3, [r4, #12]
 8007dbe:	e03e      	b.n	8007e3e <__swsetup_r+0xba>
 8007dc0:	4b25      	ldr	r3, [pc, #148]	; (8007e58 <__swsetup_r+0xd4>)
 8007dc2:	429c      	cmp	r4, r3
 8007dc4:	d101      	bne.n	8007dca <__swsetup_r+0x46>
 8007dc6:	68ac      	ldr	r4, [r5, #8]
 8007dc8:	e7eb      	b.n	8007da2 <__swsetup_r+0x1e>
 8007dca:	4b24      	ldr	r3, [pc, #144]	; (8007e5c <__swsetup_r+0xd8>)
 8007dcc:	429c      	cmp	r4, r3
 8007dce:	bf08      	it	eq
 8007dd0:	68ec      	ldreq	r4, [r5, #12]
 8007dd2:	e7e6      	b.n	8007da2 <__swsetup_r+0x1e>
 8007dd4:	0758      	lsls	r0, r3, #29
 8007dd6:	d512      	bpl.n	8007dfe <__swsetup_r+0x7a>
 8007dd8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007dda:	b141      	cbz	r1, 8007dee <__swsetup_r+0x6a>
 8007ddc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007de0:	4299      	cmp	r1, r3
 8007de2:	d002      	beq.n	8007dea <__swsetup_r+0x66>
 8007de4:	4630      	mov	r0, r6
 8007de6:	f7ff fb51 	bl	800748c <_free_r>
 8007dea:	2300      	movs	r3, #0
 8007dec:	6363      	str	r3, [r4, #52]	; 0x34
 8007dee:	89a3      	ldrh	r3, [r4, #12]
 8007df0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007df4:	81a3      	strh	r3, [r4, #12]
 8007df6:	2300      	movs	r3, #0
 8007df8:	6063      	str	r3, [r4, #4]
 8007dfa:	6923      	ldr	r3, [r4, #16]
 8007dfc:	6023      	str	r3, [r4, #0]
 8007dfe:	89a3      	ldrh	r3, [r4, #12]
 8007e00:	f043 0308 	orr.w	r3, r3, #8
 8007e04:	81a3      	strh	r3, [r4, #12]
 8007e06:	6923      	ldr	r3, [r4, #16]
 8007e08:	b94b      	cbnz	r3, 8007e1e <__swsetup_r+0x9a>
 8007e0a:	89a3      	ldrh	r3, [r4, #12]
 8007e0c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007e10:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007e14:	d003      	beq.n	8007e1e <__swsetup_r+0x9a>
 8007e16:	4621      	mov	r1, r4
 8007e18:	4630      	mov	r0, r6
 8007e1a:	f000 fa05 	bl	8008228 <__smakebuf_r>
 8007e1e:	89a0      	ldrh	r0, [r4, #12]
 8007e20:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007e24:	f010 0301 	ands.w	r3, r0, #1
 8007e28:	d00a      	beq.n	8007e40 <__swsetup_r+0xbc>
 8007e2a:	2300      	movs	r3, #0
 8007e2c:	60a3      	str	r3, [r4, #8]
 8007e2e:	6963      	ldr	r3, [r4, #20]
 8007e30:	425b      	negs	r3, r3
 8007e32:	61a3      	str	r3, [r4, #24]
 8007e34:	6923      	ldr	r3, [r4, #16]
 8007e36:	b943      	cbnz	r3, 8007e4a <__swsetup_r+0xc6>
 8007e38:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007e3c:	d1ba      	bne.n	8007db4 <__swsetup_r+0x30>
 8007e3e:	bd70      	pop	{r4, r5, r6, pc}
 8007e40:	0781      	lsls	r1, r0, #30
 8007e42:	bf58      	it	pl
 8007e44:	6963      	ldrpl	r3, [r4, #20]
 8007e46:	60a3      	str	r3, [r4, #8]
 8007e48:	e7f4      	b.n	8007e34 <__swsetup_r+0xb0>
 8007e4a:	2000      	movs	r0, #0
 8007e4c:	e7f7      	b.n	8007e3e <__swsetup_r+0xba>
 8007e4e:	bf00      	nop
 8007e50:	20000018 	.word	0x20000018
 8007e54:	08008ffc 	.word	0x08008ffc
 8007e58:	0800901c 	.word	0x0800901c
 8007e5c:	08008fdc 	.word	0x08008fdc

08007e60 <abort>:
 8007e60:	2006      	movs	r0, #6
 8007e62:	b508      	push	{r3, lr}
 8007e64:	f000 fa50 	bl	8008308 <raise>
 8007e68:	2001      	movs	r0, #1
 8007e6a:	f7fa fa34 	bl	80022d6 <_exit>
	...

08007e70 <__sflush_r>:
 8007e70:	898a      	ldrh	r2, [r1, #12]
 8007e72:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e74:	4605      	mov	r5, r0
 8007e76:	0710      	lsls	r0, r2, #28
 8007e78:	460c      	mov	r4, r1
 8007e7a:	d457      	bmi.n	8007f2c <__sflush_r+0xbc>
 8007e7c:	684b      	ldr	r3, [r1, #4]
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	dc04      	bgt.n	8007e8c <__sflush_r+0x1c>
 8007e82:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	dc01      	bgt.n	8007e8c <__sflush_r+0x1c>
 8007e88:	2000      	movs	r0, #0
 8007e8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007e8c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007e8e:	2e00      	cmp	r6, #0
 8007e90:	d0fa      	beq.n	8007e88 <__sflush_r+0x18>
 8007e92:	2300      	movs	r3, #0
 8007e94:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007e98:	682f      	ldr	r7, [r5, #0]
 8007e9a:	602b      	str	r3, [r5, #0]
 8007e9c:	d032      	beq.n	8007f04 <__sflush_r+0x94>
 8007e9e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007ea0:	89a3      	ldrh	r3, [r4, #12]
 8007ea2:	075a      	lsls	r2, r3, #29
 8007ea4:	d505      	bpl.n	8007eb2 <__sflush_r+0x42>
 8007ea6:	6863      	ldr	r3, [r4, #4]
 8007ea8:	1ac0      	subs	r0, r0, r3
 8007eaa:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007eac:	b10b      	cbz	r3, 8007eb2 <__sflush_r+0x42>
 8007eae:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007eb0:	1ac0      	subs	r0, r0, r3
 8007eb2:	2300      	movs	r3, #0
 8007eb4:	4602      	mov	r2, r0
 8007eb6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007eb8:	4628      	mov	r0, r5
 8007eba:	6a21      	ldr	r1, [r4, #32]
 8007ebc:	47b0      	blx	r6
 8007ebe:	1c43      	adds	r3, r0, #1
 8007ec0:	89a3      	ldrh	r3, [r4, #12]
 8007ec2:	d106      	bne.n	8007ed2 <__sflush_r+0x62>
 8007ec4:	6829      	ldr	r1, [r5, #0]
 8007ec6:	291d      	cmp	r1, #29
 8007ec8:	d82c      	bhi.n	8007f24 <__sflush_r+0xb4>
 8007eca:	4a29      	ldr	r2, [pc, #164]	; (8007f70 <__sflush_r+0x100>)
 8007ecc:	40ca      	lsrs	r2, r1
 8007ece:	07d6      	lsls	r6, r2, #31
 8007ed0:	d528      	bpl.n	8007f24 <__sflush_r+0xb4>
 8007ed2:	2200      	movs	r2, #0
 8007ed4:	6062      	str	r2, [r4, #4]
 8007ed6:	6922      	ldr	r2, [r4, #16]
 8007ed8:	04d9      	lsls	r1, r3, #19
 8007eda:	6022      	str	r2, [r4, #0]
 8007edc:	d504      	bpl.n	8007ee8 <__sflush_r+0x78>
 8007ede:	1c42      	adds	r2, r0, #1
 8007ee0:	d101      	bne.n	8007ee6 <__sflush_r+0x76>
 8007ee2:	682b      	ldr	r3, [r5, #0]
 8007ee4:	b903      	cbnz	r3, 8007ee8 <__sflush_r+0x78>
 8007ee6:	6560      	str	r0, [r4, #84]	; 0x54
 8007ee8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007eea:	602f      	str	r7, [r5, #0]
 8007eec:	2900      	cmp	r1, #0
 8007eee:	d0cb      	beq.n	8007e88 <__sflush_r+0x18>
 8007ef0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007ef4:	4299      	cmp	r1, r3
 8007ef6:	d002      	beq.n	8007efe <__sflush_r+0x8e>
 8007ef8:	4628      	mov	r0, r5
 8007efa:	f7ff fac7 	bl	800748c <_free_r>
 8007efe:	2000      	movs	r0, #0
 8007f00:	6360      	str	r0, [r4, #52]	; 0x34
 8007f02:	e7c2      	b.n	8007e8a <__sflush_r+0x1a>
 8007f04:	6a21      	ldr	r1, [r4, #32]
 8007f06:	2301      	movs	r3, #1
 8007f08:	4628      	mov	r0, r5
 8007f0a:	47b0      	blx	r6
 8007f0c:	1c41      	adds	r1, r0, #1
 8007f0e:	d1c7      	bne.n	8007ea0 <__sflush_r+0x30>
 8007f10:	682b      	ldr	r3, [r5, #0]
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	d0c4      	beq.n	8007ea0 <__sflush_r+0x30>
 8007f16:	2b1d      	cmp	r3, #29
 8007f18:	d001      	beq.n	8007f1e <__sflush_r+0xae>
 8007f1a:	2b16      	cmp	r3, #22
 8007f1c:	d101      	bne.n	8007f22 <__sflush_r+0xb2>
 8007f1e:	602f      	str	r7, [r5, #0]
 8007f20:	e7b2      	b.n	8007e88 <__sflush_r+0x18>
 8007f22:	89a3      	ldrh	r3, [r4, #12]
 8007f24:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007f28:	81a3      	strh	r3, [r4, #12]
 8007f2a:	e7ae      	b.n	8007e8a <__sflush_r+0x1a>
 8007f2c:	690f      	ldr	r7, [r1, #16]
 8007f2e:	2f00      	cmp	r7, #0
 8007f30:	d0aa      	beq.n	8007e88 <__sflush_r+0x18>
 8007f32:	0793      	lsls	r3, r2, #30
 8007f34:	bf18      	it	ne
 8007f36:	2300      	movne	r3, #0
 8007f38:	680e      	ldr	r6, [r1, #0]
 8007f3a:	bf08      	it	eq
 8007f3c:	694b      	ldreq	r3, [r1, #20]
 8007f3e:	1bf6      	subs	r6, r6, r7
 8007f40:	600f      	str	r7, [r1, #0]
 8007f42:	608b      	str	r3, [r1, #8]
 8007f44:	2e00      	cmp	r6, #0
 8007f46:	dd9f      	ble.n	8007e88 <__sflush_r+0x18>
 8007f48:	4633      	mov	r3, r6
 8007f4a:	463a      	mov	r2, r7
 8007f4c:	4628      	mov	r0, r5
 8007f4e:	6a21      	ldr	r1, [r4, #32]
 8007f50:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8007f54:	47e0      	blx	ip
 8007f56:	2800      	cmp	r0, #0
 8007f58:	dc06      	bgt.n	8007f68 <__sflush_r+0xf8>
 8007f5a:	89a3      	ldrh	r3, [r4, #12]
 8007f5c:	f04f 30ff 	mov.w	r0, #4294967295
 8007f60:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007f64:	81a3      	strh	r3, [r4, #12]
 8007f66:	e790      	b.n	8007e8a <__sflush_r+0x1a>
 8007f68:	4407      	add	r7, r0
 8007f6a:	1a36      	subs	r6, r6, r0
 8007f6c:	e7ea      	b.n	8007f44 <__sflush_r+0xd4>
 8007f6e:	bf00      	nop
 8007f70:	20400001 	.word	0x20400001

08007f74 <_fflush_r>:
 8007f74:	b538      	push	{r3, r4, r5, lr}
 8007f76:	690b      	ldr	r3, [r1, #16]
 8007f78:	4605      	mov	r5, r0
 8007f7a:	460c      	mov	r4, r1
 8007f7c:	b913      	cbnz	r3, 8007f84 <_fflush_r+0x10>
 8007f7e:	2500      	movs	r5, #0
 8007f80:	4628      	mov	r0, r5
 8007f82:	bd38      	pop	{r3, r4, r5, pc}
 8007f84:	b118      	cbz	r0, 8007f8e <_fflush_r+0x1a>
 8007f86:	6983      	ldr	r3, [r0, #24]
 8007f88:	b90b      	cbnz	r3, 8007f8e <_fflush_r+0x1a>
 8007f8a:	f000 f887 	bl	800809c <__sinit>
 8007f8e:	4b14      	ldr	r3, [pc, #80]	; (8007fe0 <_fflush_r+0x6c>)
 8007f90:	429c      	cmp	r4, r3
 8007f92:	d11b      	bne.n	8007fcc <_fflush_r+0x58>
 8007f94:	686c      	ldr	r4, [r5, #4]
 8007f96:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	d0ef      	beq.n	8007f7e <_fflush_r+0xa>
 8007f9e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007fa0:	07d0      	lsls	r0, r2, #31
 8007fa2:	d404      	bmi.n	8007fae <_fflush_r+0x3a>
 8007fa4:	0599      	lsls	r1, r3, #22
 8007fa6:	d402      	bmi.n	8007fae <_fflush_r+0x3a>
 8007fa8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007faa:	f000 f915 	bl	80081d8 <__retarget_lock_acquire_recursive>
 8007fae:	4628      	mov	r0, r5
 8007fb0:	4621      	mov	r1, r4
 8007fb2:	f7ff ff5d 	bl	8007e70 <__sflush_r>
 8007fb6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007fb8:	4605      	mov	r5, r0
 8007fba:	07da      	lsls	r2, r3, #31
 8007fbc:	d4e0      	bmi.n	8007f80 <_fflush_r+0xc>
 8007fbe:	89a3      	ldrh	r3, [r4, #12]
 8007fc0:	059b      	lsls	r3, r3, #22
 8007fc2:	d4dd      	bmi.n	8007f80 <_fflush_r+0xc>
 8007fc4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007fc6:	f000 f908 	bl	80081da <__retarget_lock_release_recursive>
 8007fca:	e7d9      	b.n	8007f80 <_fflush_r+0xc>
 8007fcc:	4b05      	ldr	r3, [pc, #20]	; (8007fe4 <_fflush_r+0x70>)
 8007fce:	429c      	cmp	r4, r3
 8007fd0:	d101      	bne.n	8007fd6 <_fflush_r+0x62>
 8007fd2:	68ac      	ldr	r4, [r5, #8]
 8007fd4:	e7df      	b.n	8007f96 <_fflush_r+0x22>
 8007fd6:	4b04      	ldr	r3, [pc, #16]	; (8007fe8 <_fflush_r+0x74>)
 8007fd8:	429c      	cmp	r4, r3
 8007fda:	bf08      	it	eq
 8007fdc:	68ec      	ldreq	r4, [r5, #12]
 8007fde:	e7da      	b.n	8007f96 <_fflush_r+0x22>
 8007fe0:	08008ffc 	.word	0x08008ffc
 8007fe4:	0800901c 	.word	0x0800901c
 8007fe8:	08008fdc 	.word	0x08008fdc

08007fec <std>:
 8007fec:	2300      	movs	r3, #0
 8007fee:	b510      	push	{r4, lr}
 8007ff0:	4604      	mov	r4, r0
 8007ff2:	e9c0 3300 	strd	r3, r3, [r0]
 8007ff6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007ffa:	6083      	str	r3, [r0, #8]
 8007ffc:	8181      	strh	r1, [r0, #12]
 8007ffe:	6643      	str	r3, [r0, #100]	; 0x64
 8008000:	81c2      	strh	r2, [r0, #14]
 8008002:	6183      	str	r3, [r0, #24]
 8008004:	4619      	mov	r1, r3
 8008006:	2208      	movs	r2, #8
 8008008:	305c      	adds	r0, #92	; 0x5c
 800800a:	f7fd fb8b 	bl	8005724 <memset>
 800800e:	4b05      	ldr	r3, [pc, #20]	; (8008024 <std+0x38>)
 8008010:	6224      	str	r4, [r4, #32]
 8008012:	6263      	str	r3, [r4, #36]	; 0x24
 8008014:	4b04      	ldr	r3, [pc, #16]	; (8008028 <std+0x3c>)
 8008016:	62a3      	str	r3, [r4, #40]	; 0x28
 8008018:	4b04      	ldr	r3, [pc, #16]	; (800802c <std+0x40>)
 800801a:	62e3      	str	r3, [r4, #44]	; 0x2c
 800801c:	4b04      	ldr	r3, [pc, #16]	; (8008030 <std+0x44>)
 800801e:	6323      	str	r3, [r4, #48]	; 0x30
 8008020:	bd10      	pop	{r4, pc}
 8008022:	bf00      	nop
 8008024:	08008341 	.word	0x08008341
 8008028:	08008363 	.word	0x08008363
 800802c:	0800839b 	.word	0x0800839b
 8008030:	080083bf 	.word	0x080083bf

08008034 <_cleanup_r>:
 8008034:	4901      	ldr	r1, [pc, #4]	; (800803c <_cleanup_r+0x8>)
 8008036:	f000 b8af 	b.w	8008198 <_fwalk_reent>
 800803a:	bf00      	nop
 800803c:	08007f75 	.word	0x08007f75

08008040 <__sfmoreglue>:
 8008040:	2268      	movs	r2, #104	; 0x68
 8008042:	b570      	push	{r4, r5, r6, lr}
 8008044:	1e4d      	subs	r5, r1, #1
 8008046:	4355      	muls	r5, r2
 8008048:	460e      	mov	r6, r1
 800804a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800804e:	f7ff fa85 	bl	800755c <_malloc_r>
 8008052:	4604      	mov	r4, r0
 8008054:	b140      	cbz	r0, 8008068 <__sfmoreglue+0x28>
 8008056:	2100      	movs	r1, #0
 8008058:	e9c0 1600 	strd	r1, r6, [r0]
 800805c:	300c      	adds	r0, #12
 800805e:	60a0      	str	r0, [r4, #8]
 8008060:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008064:	f7fd fb5e 	bl	8005724 <memset>
 8008068:	4620      	mov	r0, r4
 800806a:	bd70      	pop	{r4, r5, r6, pc}

0800806c <__sfp_lock_acquire>:
 800806c:	4801      	ldr	r0, [pc, #4]	; (8008074 <__sfp_lock_acquire+0x8>)
 800806e:	f000 b8b3 	b.w	80081d8 <__retarget_lock_acquire_recursive>
 8008072:	bf00      	nop
 8008074:	20000615 	.word	0x20000615

08008078 <__sfp_lock_release>:
 8008078:	4801      	ldr	r0, [pc, #4]	; (8008080 <__sfp_lock_release+0x8>)
 800807a:	f000 b8ae 	b.w	80081da <__retarget_lock_release_recursive>
 800807e:	bf00      	nop
 8008080:	20000615 	.word	0x20000615

08008084 <__sinit_lock_acquire>:
 8008084:	4801      	ldr	r0, [pc, #4]	; (800808c <__sinit_lock_acquire+0x8>)
 8008086:	f000 b8a7 	b.w	80081d8 <__retarget_lock_acquire_recursive>
 800808a:	bf00      	nop
 800808c:	20000616 	.word	0x20000616

08008090 <__sinit_lock_release>:
 8008090:	4801      	ldr	r0, [pc, #4]	; (8008098 <__sinit_lock_release+0x8>)
 8008092:	f000 b8a2 	b.w	80081da <__retarget_lock_release_recursive>
 8008096:	bf00      	nop
 8008098:	20000616 	.word	0x20000616

0800809c <__sinit>:
 800809c:	b510      	push	{r4, lr}
 800809e:	4604      	mov	r4, r0
 80080a0:	f7ff fff0 	bl	8008084 <__sinit_lock_acquire>
 80080a4:	69a3      	ldr	r3, [r4, #24]
 80080a6:	b11b      	cbz	r3, 80080b0 <__sinit+0x14>
 80080a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80080ac:	f7ff bff0 	b.w	8008090 <__sinit_lock_release>
 80080b0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80080b4:	6523      	str	r3, [r4, #80]	; 0x50
 80080b6:	4b13      	ldr	r3, [pc, #76]	; (8008104 <__sinit+0x68>)
 80080b8:	4a13      	ldr	r2, [pc, #76]	; (8008108 <__sinit+0x6c>)
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	62a2      	str	r2, [r4, #40]	; 0x28
 80080be:	42a3      	cmp	r3, r4
 80080c0:	bf08      	it	eq
 80080c2:	2301      	moveq	r3, #1
 80080c4:	4620      	mov	r0, r4
 80080c6:	bf08      	it	eq
 80080c8:	61a3      	streq	r3, [r4, #24]
 80080ca:	f000 f81f 	bl	800810c <__sfp>
 80080ce:	6060      	str	r0, [r4, #4]
 80080d0:	4620      	mov	r0, r4
 80080d2:	f000 f81b 	bl	800810c <__sfp>
 80080d6:	60a0      	str	r0, [r4, #8]
 80080d8:	4620      	mov	r0, r4
 80080da:	f000 f817 	bl	800810c <__sfp>
 80080de:	2200      	movs	r2, #0
 80080e0:	2104      	movs	r1, #4
 80080e2:	60e0      	str	r0, [r4, #12]
 80080e4:	6860      	ldr	r0, [r4, #4]
 80080e6:	f7ff ff81 	bl	8007fec <std>
 80080ea:	2201      	movs	r2, #1
 80080ec:	2109      	movs	r1, #9
 80080ee:	68a0      	ldr	r0, [r4, #8]
 80080f0:	f7ff ff7c 	bl	8007fec <std>
 80080f4:	2202      	movs	r2, #2
 80080f6:	2112      	movs	r1, #18
 80080f8:	68e0      	ldr	r0, [r4, #12]
 80080fa:	f7ff ff77 	bl	8007fec <std>
 80080fe:	2301      	movs	r3, #1
 8008100:	61a3      	str	r3, [r4, #24]
 8008102:	e7d1      	b.n	80080a8 <__sinit+0xc>
 8008104:	08008c64 	.word	0x08008c64
 8008108:	08008035 	.word	0x08008035

0800810c <__sfp>:
 800810c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800810e:	4607      	mov	r7, r0
 8008110:	f7ff ffac 	bl	800806c <__sfp_lock_acquire>
 8008114:	4b1e      	ldr	r3, [pc, #120]	; (8008190 <__sfp+0x84>)
 8008116:	681e      	ldr	r6, [r3, #0]
 8008118:	69b3      	ldr	r3, [r6, #24]
 800811a:	b913      	cbnz	r3, 8008122 <__sfp+0x16>
 800811c:	4630      	mov	r0, r6
 800811e:	f7ff ffbd 	bl	800809c <__sinit>
 8008122:	3648      	adds	r6, #72	; 0x48
 8008124:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008128:	3b01      	subs	r3, #1
 800812a:	d503      	bpl.n	8008134 <__sfp+0x28>
 800812c:	6833      	ldr	r3, [r6, #0]
 800812e:	b30b      	cbz	r3, 8008174 <__sfp+0x68>
 8008130:	6836      	ldr	r6, [r6, #0]
 8008132:	e7f7      	b.n	8008124 <__sfp+0x18>
 8008134:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008138:	b9d5      	cbnz	r5, 8008170 <__sfp+0x64>
 800813a:	4b16      	ldr	r3, [pc, #88]	; (8008194 <__sfp+0x88>)
 800813c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008140:	60e3      	str	r3, [r4, #12]
 8008142:	6665      	str	r5, [r4, #100]	; 0x64
 8008144:	f000 f847 	bl	80081d6 <__retarget_lock_init_recursive>
 8008148:	f7ff ff96 	bl	8008078 <__sfp_lock_release>
 800814c:	2208      	movs	r2, #8
 800814e:	4629      	mov	r1, r5
 8008150:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008154:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008158:	6025      	str	r5, [r4, #0]
 800815a:	61a5      	str	r5, [r4, #24]
 800815c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008160:	f7fd fae0 	bl	8005724 <memset>
 8008164:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008168:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800816c:	4620      	mov	r0, r4
 800816e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008170:	3468      	adds	r4, #104	; 0x68
 8008172:	e7d9      	b.n	8008128 <__sfp+0x1c>
 8008174:	2104      	movs	r1, #4
 8008176:	4638      	mov	r0, r7
 8008178:	f7ff ff62 	bl	8008040 <__sfmoreglue>
 800817c:	4604      	mov	r4, r0
 800817e:	6030      	str	r0, [r6, #0]
 8008180:	2800      	cmp	r0, #0
 8008182:	d1d5      	bne.n	8008130 <__sfp+0x24>
 8008184:	f7ff ff78 	bl	8008078 <__sfp_lock_release>
 8008188:	230c      	movs	r3, #12
 800818a:	603b      	str	r3, [r7, #0]
 800818c:	e7ee      	b.n	800816c <__sfp+0x60>
 800818e:	bf00      	nop
 8008190:	08008c64 	.word	0x08008c64
 8008194:	ffff0001 	.word	0xffff0001

08008198 <_fwalk_reent>:
 8008198:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800819c:	4606      	mov	r6, r0
 800819e:	4688      	mov	r8, r1
 80081a0:	2700      	movs	r7, #0
 80081a2:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80081a6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80081aa:	f1b9 0901 	subs.w	r9, r9, #1
 80081ae:	d505      	bpl.n	80081bc <_fwalk_reent+0x24>
 80081b0:	6824      	ldr	r4, [r4, #0]
 80081b2:	2c00      	cmp	r4, #0
 80081b4:	d1f7      	bne.n	80081a6 <_fwalk_reent+0xe>
 80081b6:	4638      	mov	r0, r7
 80081b8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80081bc:	89ab      	ldrh	r3, [r5, #12]
 80081be:	2b01      	cmp	r3, #1
 80081c0:	d907      	bls.n	80081d2 <_fwalk_reent+0x3a>
 80081c2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80081c6:	3301      	adds	r3, #1
 80081c8:	d003      	beq.n	80081d2 <_fwalk_reent+0x3a>
 80081ca:	4629      	mov	r1, r5
 80081cc:	4630      	mov	r0, r6
 80081ce:	47c0      	blx	r8
 80081d0:	4307      	orrs	r7, r0
 80081d2:	3568      	adds	r5, #104	; 0x68
 80081d4:	e7e9      	b.n	80081aa <_fwalk_reent+0x12>

080081d6 <__retarget_lock_init_recursive>:
 80081d6:	4770      	bx	lr

080081d8 <__retarget_lock_acquire_recursive>:
 80081d8:	4770      	bx	lr

080081da <__retarget_lock_release_recursive>:
 80081da:	4770      	bx	lr

080081dc <__swhatbuf_r>:
 80081dc:	b570      	push	{r4, r5, r6, lr}
 80081de:	460e      	mov	r6, r1
 80081e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80081e4:	4614      	mov	r4, r2
 80081e6:	2900      	cmp	r1, #0
 80081e8:	461d      	mov	r5, r3
 80081ea:	b096      	sub	sp, #88	; 0x58
 80081ec:	da08      	bge.n	8008200 <__swhatbuf_r+0x24>
 80081ee:	2200      	movs	r2, #0
 80081f0:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80081f4:	602a      	str	r2, [r5, #0]
 80081f6:	061a      	lsls	r2, r3, #24
 80081f8:	d410      	bmi.n	800821c <__swhatbuf_r+0x40>
 80081fa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80081fe:	e00e      	b.n	800821e <__swhatbuf_r+0x42>
 8008200:	466a      	mov	r2, sp
 8008202:	f000 f903 	bl	800840c <_fstat_r>
 8008206:	2800      	cmp	r0, #0
 8008208:	dbf1      	blt.n	80081ee <__swhatbuf_r+0x12>
 800820a:	9a01      	ldr	r2, [sp, #4]
 800820c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008210:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008214:	425a      	negs	r2, r3
 8008216:	415a      	adcs	r2, r3
 8008218:	602a      	str	r2, [r5, #0]
 800821a:	e7ee      	b.n	80081fa <__swhatbuf_r+0x1e>
 800821c:	2340      	movs	r3, #64	; 0x40
 800821e:	2000      	movs	r0, #0
 8008220:	6023      	str	r3, [r4, #0]
 8008222:	b016      	add	sp, #88	; 0x58
 8008224:	bd70      	pop	{r4, r5, r6, pc}
	...

08008228 <__smakebuf_r>:
 8008228:	898b      	ldrh	r3, [r1, #12]
 800822a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800822c:	079d      	lsls	r5, r3, #30
 800822e:	4606      	mov	r6, r0
 8008230:	460c      	mov	r4, r1
 8008232:	d507      	bpl.n	8008244 <__smakebuf_r+0x1c>
 8008234:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008238:	6023      	str	r3, [r4, #0]
 800823a:	6123      	str	r3, [r4, #16]
 800823c:	2301      	movs	r3, #1
 800823e:	6163      	str	r3, [r4, #20]
 8008240:	b002      	add	sp, #8
 8008242:	bd70      	pop	{r4, r5, r6, pc}
 8008244:	466a      	mov	r2, sp
 8008246:	ab01      	add	r3, sp, #4
 8008248:	f7ff ffc8 	bl	80081dc <__swhatbuf_r>
 800824c:	9900      	ldr	r1, [sp, #0]
 800824e:	4605      	mov	r5, r0
 8008250:	4630      	mov	r0, r6
 8008252:	f7ff f983 	bl	800755c <_malloc_r>
 8008256:	b948      	cbnz	r0, 800826c <__smakebuf_r+0x44>
 8008258:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800825c:	059a      	lsls	r2, r3, #22
 800825e:	d4ef      	bmi.n	8008240 <__smakebuf_r+0x18>
 8008260:	f023 0303 	bic.w	r3, r3, #3
 8008264:	f043 0302 	orr.w	r3, r3, #2
 8008268:	81a3      	strh	r3, [r4, #12]
 800826a:	e7e3      	b.n	8008234 <__smakebuf_r+0xc>
 800826c:	4b0d      	ldr	r3, [pc, #52]	; (80082a4 <__smakebuf_r+0x7c>)
 800826e:	62b3      	str	r3, [r6, #40]	; 0x28
 8008270:	89a3      	ldrh	r3, [r4, #12]
 8008272:	6020      	str	r0, [r4, #0]
 8008274:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008278:	81a3      	strh	r3, [r4, #12]
 800827a:	9b00      	ldr	r3, [sp, #0]
 800827c:	6120      	str	r0, [r4, #16]
 800827e:	6163      	str	r3, [r4, #20]
 8008280:	9b01      	ldr	r3, [sp, #4]
 8008282:	b15b      	cbz	r3, 800829c <__smakebuf_r+0x74>
 8008284:	4630      	mov	r0, r6
 8008286:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800828a:	f000 f8d1 	bl	8008430 <_isatty_r>
 800828e:	b128      	cbz	r0, 800829c <__smakebuf_r+0x74>
 8008290:	89a3      	ldrh	r3, [r4, #12]
 8008292:	f023 0303 	bic.w	r3, r3, #3
 8008296:	f043 0301 	orr.w	r3, r3, #1
 800829a:	81a3      	strh	r3, [r4, #12]
 800829c:	89a0      	ldrh	r0, [r4, #12]
 800829e:	4305      	orrs	r5, r0
 80082a0:	81a5      	strh	r5, [r4, #12]
 80082a2:	e7cd      	b.n	8008240 <__smakebuf_r+0x18>
 80082a4:	08008035 	.word	0x08008035

080082a8 <_malloc_usable_size_r>:
 80082a8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80082ac:	1f18      	subs	r0, r3, #4
 80082ae:	2b00      	cmp	r3, #0
 80082b0:	bfbc      	itt	lt
 80082b2:	580b      	ldrlt	r3, [r1, r0]
 80082b4:	18c0      	addlt	r0, r0, r3
 80082b6:	4770      	bx	lr

080082b8 <_raise_r>:
 80082b8:	291f      	cmp	r1, #31
 80082ba:	b538      	push	{r3, r4, r5, lr}
 80082bc:	4604      	mov	r4, r0
 80082be:	460d      	mov	r5, r1
 80082c0:	d904      	bls.n	80082cc <_raise_r+0x14>
 80082c2:	2316      	movs	r3, #22
 80082c4:	6003      	str	r3, [r0, #0]
 80082c6:	f04f 30ff 	mov.w	r0, #4294967295
 80082ca:	bd38      	pop	{r3, r4, r5, pc}
 80082cc:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80082ce:	b112      	cbz	r2, 80082d6 <_raise_r+0x1e>
 80082d0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80082d4:	b94b      	cbnz	r3, 80082ea <_raise_r+0x32>
 80082d6:	4620      	mov	r0, r4
 80082d8:	f000 f830 	bl	800833c <_getpid_r>
 80082dc:	462a      	mov	r2, r5
 80082de:	4601      	mov	r1, r0
 80082e0:	4620      	mov	r0, r4
 80082e2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80082e6:	f000 b817 	b.w	8008318 <_kill_r>
 80082ea:	2b01      	cmp	r3, #1
 80082ec:	d00a      	beq.n	8008304 <_raise_r+0x4c>
 80082ee:	1c59      	adds	r1, r3, #1
 80082f0:	d103      	bne.n	80082fa <_raise_r+0x42>
 80082f2:	2316      	movs	r3, #22
 80082f4:	6003      	str	r3, [r0, #0]
 80082f6:	2001      	movs	r0, #1
 80082f8:	e7e7      	b.n	80082ca <_raise_r+0x12>
 80082fa:	2400      	movs	r4, #0
 80082fc:	4628      	mov	r0, r5
 80082fe:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8008302:	4798      	blx	r3
 8008304:	2000      	movs	r0, #0
 8008306:	e7e0      	b.n	80082ca <_raise_r+0x12>

08008308 <raise>:
 8008308:	4b02      	ldr	r3, [pc, #8]	; (8008314 <raise+0xc>)
 800830a:	4601      	mov	r1, r0
 800830c:	6818      	ldr	r0, [r3, #0]
 800830e:	f7ff bfd3 	b.w	80082b8 <_raise_r>
 8008312:	bf00      	nop
 8008314:	20000018 	.word	0x20000018

08008318 <_kill_r>:
 8008318:	b538      	push	{r3, r4, r5, lr}
 800831a:	2300      	movs	r3, #0
 800831c:	4d06      	ldr	r5, [pc, #24]	; (8008338 <_kill_r+0x20>)
 800831e:	4604      	mov	r4, r0
 8008320:	4608      	mov	r0, r1
 8008322:	4611      	mov	r1, r2
 8008324:	602b      	str	r3, [r5, #0]
 8008326:	f7f9 ffc6 	bl	80022b6 <_kill>
 800832a:	1c43      	adds	r3, r0, #1
 800832c:	d102      	bne.n	8008334 <_kill_r+0x1c>
 800832e:	682b      	ldr	r3, [r5, #0]
 8008330:	b103      	cbz	r3, 8008334 <_kill_r+0x1c>
 8008332:	6023      	str	r3, [r4, #0]
 8008334:	bd38      	pop	{r3, r4, r5, pc}
 8008336:	bf00      	nop
 8008338:	20000610 	.word	0x20000610

0800833c <_getpid_r>:
 800833c:	f7f9 bfb4 	b.w	80022a8 <_getpid>

08008340 <__sread>:
 8008340:	b510      	push	{r4, lr}
 8008342:	460c      	mov	r4, r1
 8008344:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008348:	f000 f894 	bl	8008474 <_read_r>
 800834c:	2800      	cmp	r0, #0
 800834e:	bfab      	itete	ge
 8008350:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008352:	89a3      	ldrhlt	r3, [r4, #12]
 8008354:	181b      	addge	r3, r3, r0
 8008356:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800835a:	bfac      	ite	ge
 800835c:	6563      	strge	r3, [r4, #84]	; 0x54
 800835e:	81a3      	strhlt	r3, [r4, #12]
 8008360:	bd10      	pop	{r4, pc}

08008362 <__swrite>:
 8008362:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008366:	461f      	mov	r7, r3
 8008368:	898b      	ldrh	r3, [r1, #12]
 800836a:	4605      	mov	r5, r0
 800836c:	05db      	lsls	r3, r3, #23
 800836e:	460c      	mov	r4, r1
 8008370:	4616      	mov	r6, r2
 8008372:	d505      	bpl.n	8008380 <__swrite+0x1e>
 8008374:	2302      	movs	r3, #2
 8008376:	2200      	movs	r2, #0
 8008378:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800837c:	f000 f868 	bl	8008450 <_lseek_r>
 8008380:	89a3      	ldrh	r3, [r4, #12]
 8008382:	4632      	mov	r2, r6
 8008384:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008388:	81a3      	strh	r3, [r4, #12]
 800838a:	4628      	mov	r0, r5
 800838c:	463b      	mov	r3, r7
 800838e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008392:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008396:	f000 b817 	b.w	80083c8 <_write_r>

0800839a <__sseek>:
 800839a:	b510      	push	{r4, lr}
 800839c:	460c      	mov	r4, r1
 800839e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80083a2:	f000 f855 	bl	8008450 <_lseek_r>
 80083a6:	1c43      	adds	r3, r0, #1
 80083a8:	89a3      	ldrh	r3, [r4, #12]
 80083aa:	bf15      	itete	ne
 80083ac:	6560      	strne	r0, [r4, #84]	; 0x54
 80083ae:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80083b2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80083b6:	81a3      	strheq	r3, [r4, #12]
 80083b8:	bf18      	it	ne
 80083ba:	81a3      	strhne	r3, [r4, #12]
 80083bc:	bd10      	pop	{r4, pc}

080083be <__sclose>:
 80083be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80083c2:	f000 b813 	b.w	80083ec <_close_r>
	...

080083c8 <_write_r>:
 80083c8:	b538      	push	{r3, r4, r5, lr}
 80083ca:	4604      	mov	r4, r0
 80083cc:	4608      	mov	r0, r1
 80083ce:	4611      	mov	r1, r2
 80083d0:	2200      	movs	r2, #0
 80083d2:	4d05      	ldr	r5, [pc, #20]	; (80083e8 <_write_r+0x20>)
 80083d4:	602a      	str	r2, [r5, #0]
 80083d6:	461a      	mov	r2, r3
 80083d8:	f7f9 ffa4 	bl	8002324 <_write>
 80083dc:	1c43      	adds	r3, r0, #1
 80083de:	d102      	bne.n	80083e6 <_write_r+0x1e>
 80083e0:	682b      	ldr	r3, [r5, #0]
 80083e2:	b103      	cbz	r3, 80083e6 <_write_r+0x1e>
 80083e4:	6023      	str	r3, [r4, #0]
 80083e6:	bd38      	pop	{r3, r4, r5, pc}
 80083e8:	20000610 	.word	0x20000610

080083ec <_close_r>:
 80083ec:	b538      	push	{r3, r4, r5, lr}
 80083ee:	2300      	movs	r3, #0
 80083f0:	4d05      	ldr	r5, [pc, #20]	; (8008408 <_close_r+0x1c>)
 80083f2:	4604      	mov	r4, r0
 80083f4:	4608      	mov	r0, r1
 80083f6:	602b      	str	r3, [r5, #0]
 80083f8:	f7f9 ffb0 	bl	800235c <_close>
 80083fc:	1c43      	adds	r3, r0, #1
 80083fe:	d102      	bne.n	8008406 <_close_r+0x1a>
 8008400:	682b      	ldr	r3, [r5, #0]
 8008402:	b103      	cbz	r3, 8008406 <_close_r+0x1a>
 8008404:	6023      	str	r3, [r4, #0]
 8008406:	bd38      	pop	{r3, r4, r5, pc}
 8008408:	20000610 	.word	0x20000610

0800840c <_fstat_r>:
 800840c:	b538      	push	{r3, r4, r5, lr}
 800840e:	2300      	movs	r3, #0
 8008410:	4d06      	ldr	r5, [pc, #24]	; (800842c <_fstat_r+0x20>)
 8008412:	4604      	mov	r4, r0
 8008414:	4608      	mov	r0, r1
 8008416:	4611      	mov	r1, r2
 8008418:	602b      	str	r3, [r5, #0]
 800841a:	f7f9 ffaa 	bl	8002372 <_fstat>
 800841e:	1c43      	adds	r3, r0, #1
 8008420:	d102      	bne.n	8008428 <_fstat_r+0x1c>
 8008422:	682b      	ldr	r3, [r5, #0]
 8008424:	b103      	cbz	r3, 8008428 <_fstat_r+0x1c>
 8008426:	6023      	str	r3, [r4, #0]
 8008428:	bd38      	pop	{r3, r4, r5, pc}
 800842a:	bf00      	nop
 800842c:	20000610 	.word	0x20000610

08008430 <_isatty_r>:
 8008430:	b538      	push	{r3, r4, r5, lr}
 8008432:	2300      	movs	r3, #0
 8008434:	4d05      	ldr	r5, [pc, #20]	; (800844c <_isatty_r+0x1c>)
 8008436:	4604      	mov	r4, r0
 8008438:	4608      	mov	r0, r1
 800843a:	602b      	str	r3, [r5, #0]
 800843c:	f7f9 ffa8 	bl	8002390 <_isatty>
 8008440:	1c43      	adds	r3, r0, #1
 8008442:	d102      	bne.n	800844a <_isatty_r+0x1a>
 8008444:	682b      	ldr	r3, [r5, #0]
 8008446:	b103      	cbz	r3, 800844a <_isatty_r+0x1a>
 8008448:	6023      	str	r3, [r4, #0]
 800844a:	bd38      	pop	{r3, r4, r5, pc}
 800844c:	20000610 	.word	0x20000610

08008450 <_lseek_r>:
 8008450:	b538      	push	{r3, r4, r5, lr}
 8008452:	4604      	mov	r4, r0
 8008454:	4608      	mov	r0, r1
 8008456:	4611      	mov	r1, r2
 8008458:	2200      	movs	r2, #0
 800845a:	4d05      	ldr	r5, [pc, #20]	; (8008470 <_lseek_r+0x20>)
 800845c:	602a      	str	r2, [r5, #0]
 800845e:	461a      	mov	r2, r3
 8008460:	f7f9 ffa0 	bl	80023a4 <_lseek>
 8008464:	1c43      	adds	r3, r0, #1
 8008466:	d102      	bne.n	800846e <_lseek_r+0x1e>
 8008468:	682b      	ldr	r3, [r5, #0]
 800846a:	b103      	cbz	r3, 800846e <_lseek_r+0x1e>
 800846c:	6023      	str	r3, [r4, #0]
 800846e:	bd38      	pop	{r3, r4, r5, pc}
 8008470:	20000610 	.word	0x20000610

08008474 <_read_r>:
 8008474:	b538      	push	{r3, r4, r5, lr}
 8008476:	4604      	mov	r4, r0
 8008478:	4608      	mov	r0, r1
 800847a:	4611      	mov	r1, r2
 800847c:	2200      	movs	r2, #0
 800847e:	4d05      	ldr	r5, [pc, #20]	; (8008494 <_read_r+0x20>)
 8008480:	602a      	str	r2, [r5, #0]
 8008482:	461a      	mov	r2, r3
 8008484:	f7f9 ff31 	bl	80022ea <_read>
 8008488:	1c43      	adds	r3, r0, #1
 800848a:	d102      	bne.n	8008492 <_read_r+0x1e>
 800848c:	682b      	ldr	r3, [r5, #0]
 800848e:	b103      	cbz	r3, 8008492 <_read_r+0x1e>
 8008490:	6023      	str	r3, [r4, #0]
 8008492:	bd38      	pop	{r3, r4, r5, pc}
 8008494:	20000610 	.word	0x20000610

08008498 <_init>:
 8008498:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800849a:	bf00      	nop
 800849c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800849e:	bc08      	pop	{r3}
 80084a0:	469e      	mov	lr, r3
 80084a2:	4770      	bx	lr

080084a4 <_fini>:
 80084a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80084a6:	bf00      	nop
 80084a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80084aa:	bc08      	pop	{r3}
 80084ac:	469e      	mov	lr, r3
 80084ae:	4770      	bx	lr
